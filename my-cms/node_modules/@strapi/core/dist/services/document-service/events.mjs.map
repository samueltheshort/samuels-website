{"version":3,"file":"events.mjs","sources":["../../../src/services/document-service/events.ts"],"sourcesContent":["import { UID, Utils, Modules, Core } from '@strapi/types';\nimport { sanitize } from '@strapi/utils';\n\nimport { getDeepPopulate } from './utils/populate';\n\nconst EVENTS = {\n  ENTRY_CREATE: 'entry.create',\n  ENTRY_UPDATE: 'entry.update',\n  ENTRY_DELETE: 'entry.delete',\n  ENTRY_PUBLISH: 'entry.publish',\n  ENTRY_UNPUBLISH: 'entry.unpublish',\n  ENTRY_DRAFT_DISCARD: 'entry.draft-discard',\n};\n\ntype EventName = Utils.Object.Values<typeof EVENTS>;\n\n/**\n * Manager to trigger entry related events\n *\n * It will populate the entry if it is not a delete event.\n * So the event payload will contain the full entry.\n */\nconst createEventManager = (strapi: Core.Strapi, uid: UID.Schema) => {\n  const populate = getDeepPopulate(uid, {});\n  const model = strapi.getModel(uid);\n\n  const emitEvent = async (eventName: EventName, entry: Modules.Documents.AnyDocument) => {\n    // There is no need to populate the entry if it has been deleted\n    let populatedEntry = entry;\n    if (![EVENTS.ENTRY_DELETE, EVENTS.ENTRY_UNPUBLISH].includes(eventName)) {\n      populatedEntry = await strapi.db.query(uid).findOne({ where: { id: entry.id }, populate });\n    }\n\n    const sanitizedEntry = await sanitize.sanitizers.defaultSanitizeOutput(\n      {\n        schema: model,\n        getModel: (uid) => strapi.getModel(uid as UID.Schema),\n      },\n      populatedEntry\n    );\n\n    await strapi.eventHub.emit(eventName, {\n      model: model.modelName,\n      uid: model.uid,\n      entry: sanitizedEntry,\n    });\n  };\n\n  return {\n    /**\n     * strapi.db.query might reuse the transaction used in the doc service request,\n     * so this is executed after that transaction is committed.\n     */\n    emitEvent(eventName: EventName, entry: Modules.Documents.AnyDocument) {\n      strapi.db.transaction(({ onCommit }) => {\n        onCommit(() => emitEvent(eventName, entry));\n      });\n    },\n  };\n};\n\nexport { createEventManager };\n"],"names":["uid"],"mappings":";;AAKA,MAAM,SAAS;AAAA,EACb,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,qBAAqB;AACvB;AAUM,MAAA,qBAAqB,CAAC,QAAqB,QAAoB;AACnE,QAAM,WAAW,gBAAgB,KAAK,EAAE;AAClC,QAAA,QAAQ,OAAO,SAAS,GAAG;AAE3B,QAAA,YAAY,OAAO,WAAsB,UAAyC;AAEtF,QAAI,iBAAiB;AACjB,QAAA,CAAC,CAAC,OAAO,cAAc,OAAO,eAAe,EAAE,SAAS,SAAS,GAAG;AACtE,uBAAiB,MAAM,OAAO,GAAG,MAAM,GAAG,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,MAAM,GAAG,GAAG,UAAU;AAAA,IAAA;AAGrF,UAAA,iBAAiB,MAAM,SAAS,WAAW;AAAA,MAC/C;AAAA,QACE,QAAQ;AAAA,QACR,UAAU,CAACA,SAAQ,OAAO,SAASA,IAAiB;AAAA,MACtD;AAAA,MACA;AAAA,IACF;AAEM,UAAA,OAAO,SAAS,KAAK,WAAW;AAAA,MACpC,OAAO,MAAM;AAAA,MACb,KAAK,MAAM;AAAA,MACX,OAAO;AAAA,IAAA,CACR;AAAA,EACH;AAEO,SAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKL,UAAU,WAAsB,OAAsC;AACpE,aAAO,GAAG,YAAY,CAAC,EAAE,eAAe;AACtC,iBAAS,MAAM,UAAU,WAAW,KAAK,CAAC;AAAA,MAAA,CAC3C;AAAA,IAAA;AAAA,EAEL;AACF;"}
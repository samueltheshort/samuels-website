{"version":3,"file":"draft-and-publish.js","sources":["../../../src/services/document-service/draft-and-publish.ts"],"sourcesContent":["import { assoc, curry } from 'lodash/fp';\n\nimport { Modules, Struct } from '@strapi/types';\nimport { contentTypes } from '@strapi/utils';\n\ntype ParamsTransform = (params: Modules.Documents.Params.All) => Modules.Documents.Params.All;\n\ntype TransformWithContentType = (\n  contentType: Struct.SingleTypeSchema | Struct.CollectionTypeSchema,\n  params: Modules.Documents.Params.All\n) => Modules.Documents.Params.All;\n\n/**\n * DP enabled -> set status to draft\n * DP disabled -> Used mostly for parsing relations, so there is not a need for a default.\n */\nconst setStatusToDraft: TransformWithContentType = (contentType, params) => {\n  if (!contentTypes.hasDraftAndPublish(contentType) && params.status) {\n    return params;\n  }\n\n  return assoc('status', 'draft', params);\n};\n\n/**\n * Adds a default status of `draft` to the params\n */\nconst defaultToDraft: ParamsTransform = (params) => {\n  // Default to draft if no status is provided or it's invalid\n  if (!params.status || params.status !== 'published') {\n    return assoc('status', 'draft', params);\n  }\n\n  return params;\n};\n\n/**\n * DP disabled -> ignore status\n * DP enabled -> set status to draft if no status is provided or it's invalid\n */\nconst defaultStatus: TransformWithContentType = (contentType, params) => {\n  if (!contentTypes.hasDraftAndPublish(contentType)) {\n    return params;\n  }\n\n  // Default to draft if no status is provided or it's invalid\n  if (!params.status || params.status !== 'published') {\n    return defaultToDraft(params);\n  }\n\n  return params;\n};\n\n/**\n * In mutating actions we don't want user to set the publishedAt attribute.\n */\nconst filterDataPublishedAt: ParamsTransform = (params) => {\n  if (params?.data?.publishedAt) {\n    return assoc(['data', 'publishedAt'], null, params);\n  }\n\n  return params;\n};\n\n/**\n * Add status lookup query to the params\n */\nconst statusToLookup: TransformWithContentType = (contentType, params) => {\n  if (!contentTypes.hasDraftAndPublish(contentType)) {\n    return params;\n  }\n\n  const lookup = params.lookup || {};\n\n  switch (params?.status) {\n    case 'published':\n      return assoc(['lookup', 'publishedAt'], { $notNull: true }, params);\n    case 'draft':\n      return assoc(['lookup', 'publishedAt'], { $null: true }, params);\n    default:\n      break;\n  }\n\n  return assoc('lookup', lookup, params);\n};\n\n/**\n * Translate publication status parameter into the data that will be saved\n */\nconst statusToData: TransformWithContentType = (contentType, params) => {\n  if (!contentTypes.hasDraftAndPublish(contentType)) {\n    return assoc(['data', 'publishedAt'], new Date(), params);\n  }\n\n  switch (params?.status) {\n    case 'published':\n      return assoc(['data', 'publishedAt'], new Date(), params);\n    case 'draft':\n      return assoc(['data', 'publishedAt'], null, params);\n    default:\n      break;\n  }\n\n  return params;\n};\n\nconst setStatusToDraftCurry = curry(setStatusToDraft);\nconst defaultToDraftCurry = curry(defaultToDraft);\nconst defaultStatusCurry = curry(defaultStatus);\nconst filterDataPublishedAtCurry = curry(filterDataPublishedAt);\nconst statusToLookupCurry = curry(statusToLookup);\nconst statusToDataCurry = curry(statusToData);\n\nexport {\n  setStatusToDraftCurry as setStatusToDraft,\n  defaultToDraftCurry as defaultToDraft,\n  defaultStatusCurry as defaultStatus,\n  filterDataPublishedAtCurry as filterDataPublishedAt,\n  statusToLookupCurry as statusToLookup,\n  statusToDataCurry as statusToData,\n};\n"],"names":["contentTypes","assoc","curry"],"mappings":";;;;AAgBA,MAAM,mBAA6C,CAAC,aAAa,WAAW;AAC1E,MAAI,CAACA,YAAa,aAAA,mBAAmB,WAAW,KAAK,OAAO,QAAQ;AAC3D,WAAA;AAAA,EAAA;AAGF,SAAAC,SAAM,UAAU,SAAS,MAAM;AACxC;AAKA,MAAM,iBAAkC,CAAC,WAAW;AAElD,MAAI,CAAC,OAAO,UAAU,OAAO,WAAW,aAAa;AAC5C,WAAAA,SAAM,UAAU,SAAS,MAAM;AAAA,EAAA;AAGjC,SAAA;AACT;AAMA,MAAM,gBAA0C,CAAC,aAAa,WAAW;AACvE,MAAI,CAACD,YAAA,aAAa,mBAAmB,WAAW,GAAG;AAC1C,WAAA;AAAA,EAAA;AAIT,MAAI,CAAC,OAAO,UAAU,OAAO,WAAW,aAAa;AACnD,WAAO,eAAe,MAAM;AAAA,EAAA;AAGvB,SAAA;AACT;AAKA,MAAM,wBAAyC,CAAC,WAAW;AACrD,MAAA,QAAQ,MAAM,aAAa;AAC7B,WAAOC,GAAAA,MAAM,CAAC,QAAQ,aAAa,GAAG,MAAM,MAAM;AAAA,EAAA;AAG7C,SAAA;AACT;AAKA,MAAM,iBAA2C,CAAC,aAAa,WAAW;AACxE,MAAI,CAACD,YAAA,aAAa,mBAAmB,WAAW,GAAG;AAC1C,WAAA;AAAA,EAAA;AAGH,QAAA,SAAS,OAAO,UAAU,CAAC;AAEjC,UAAQ,QAAQ,QAAQ;AAAA,IACtB,KAAK;AACI,aAAAC,GAAA,MAAM,CAAC,UAAU,aAAa,GAAG,EAAE,UAAU,KAAK,GAAG,MAAM;AAAA,IACpE,KAAK;AACI,aAAAA,GAAA,MAAM,CAAC,UAAU,aAAa,GAAG,EAAE,OAAO,KAAK,GAAG,MAAM;AAAA,EAE/D;AAGG,SAAAA,SAAM,UAAU,QAAQ,MAAM;AACvC;AAKA,MAAM,eAAyC,CAAC,aAAa,WAAW;AACtE,MAAI,CAACD,YAAA,aAAa,mBAAmB,WAAW,GAAG;AAC1C,WAAAC,GAAAA,MAAM,CAAC,QAAQ,aAAa,GAAO,oBAAA,QAAQ,MAAM;AAAA,EAAA;AAG1D,UAAQ,QAAQ,QAAQ;AAAA,IACtB,KAAK;AACI,aAAAA,GAAAA,MAAM,CAAC,QAAQ,aAAa,GAAO,oBAAA,QAAQ,MAAM;AAAA,IAC1D,KAAK;AACH,aAAOA,GAAAA,MAAM,CAAC,QAAQ,aAAa,GAAG,MAAM,MAAM;AAAA,EAElD;AAGG,SAAA;AACT;AAEM,MAAA,wBAAwBC,SAAM,gBAAgB;AAC9C,MAAA,sBAAsBA,SAAM,cAAc;AAC1C,MAAA,qBAAqBA,SAAM,aAAa;AACxC,MAAA,6BAA6BA,SAAM,qBAAqB;AACxD,MAAA,sBAAsBA,SAAM,cAAc;AAC1C,MAAA,oBAAoBA,SAAM,YAAY;;;;;;;"}
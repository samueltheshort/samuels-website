{"version":3,"file":"index.mjs","sources":["../../../src/services/document-service/index.ts"],"sourcesContent":["import type { Core, Modules, UID } from '@strapi/types';\n\nimport { createMiddlewareManager, databaseErrorsMiddleware } from './middlewares';\nimport { createContentTypeRepository } from './repository';\nimport { transformData } from './transform/data';\n\nimport entityValidator from '../entity-validator';\n\n/**\n * Repository to :\n * - Access documents via actions (findMany, findOne, create, update, delete, ...)\n * - Execute middlewares on document actions\n * - Apply default parameters to document actions\n *\n * @param strapi\n * @param validator - validator for database entries\n * @returns DocumentService\n *\n * @example Access documents\n * const article = strapi.documents('api::article.article').create(params)\n * const allArticles = strapi.documents('api::article.article').findMany(params)\n *\n */\nexport const createDocumentService = (\n  strapi: Core.Strapi,\n  validator: Modules.EntityValidator.EntityValidator = entityValidator\n): Modules.Documents.Service => {\n  // Cache the repositories (one per content type)\n  const repositories = new Map<string, Modules.Documents.ServiceInstance>();\n\n  // Manager to handle document service middlewares\n  const middlewares = createMiddlewareManager();\n  middlewares.use(databaseErrorsMiddleware);\n\n  const factory = function factory(uid: UID.ContentType) {\n    if (repositories.has(uid)) {\n      return repositories.get(uid)!;\n    }\n\n    const contentType = strapi.contentType(uid);\n    const repository = createContentTypeRepository(uid, validator);\n\n    const instance = middlewares.wrapObject(\n      repository,\n      { uid, contentType },\n      {\n        exclude: ['updateComponents', 'omitComponentData'],\n      }\n    );\n\n    repositories.set(uid, instance);\n\n    return instance;\n  } as Modules.Documents.Service;\n\n  return Object.assign(factory, {\n    utils: {\n      transformData,\n    },\n    use: middlewares.use.bind(middlewares),\n  });\n};\n"],"names":["factory"],"mappings":";;;;;AAuBO,MAAM,wBAAwB,CACnC,QACA,YAAqD,oBACvB;AAExB,QAAA,mCAAmB,IAA+C;AAGxE,QAAM,cAAc,wBAAwB;AAC5C,cAAY,IAAI,wBAAwB;AAElC,QAAA,UAAU,SAASA,SAAQ,KAAsB;AACjD,QAAA,aAAa,IAAI,GAAG,GAAG;AAClB,aAAA,aAAa,IAAI,GAAG;AAAA,IAAA;AAGvB,UAAA,cAAc,OAAO,YAAY,GAAG;AACpC,UAAA,aAAa,4BAA4B,KAAK,SAAS;AAE7D,UAAM,WAAW,YAAY;AAAA,MAC3B;AAAA,MACA,EAAE,KAAK,YAAY;AAAA,MACnB;AAAA,QACE,SAAS,CAAC,oBAAoB,mBAAmB;AAAA,MAAA;AAAA,IAErD;AAEa,iBAAA,IAAI,KAAK,QAAQ;AAEvB,WAAA;AAAA,EACT;AAEO,SAAA,OAAO,OAAO,SAAS;AAAA,IAC5B,OAAO;AAAA,MACL;AAAA,IACF;AAAA,IACA,KAAK,YAAY,IAAI,KAAK,WAAW;AAAA,EAAA,CACtC;AACH;"}
{"version":3,"file":"data-ids.js","sources":["../../../../../../src/services/document-service/transform/relations/transform/data-ids.ts"],"sourcesContent":["import { curry } from 'lodash/fp';\n\nimport type { UID } from '@strapi/types';\nimport { errors, relations } from '@strapi/utils';\n\nimport { ID, LongHandDocument } from '../utils/types';\nimport { IdMap } from '../../id-map';\nimport { getRelationTargetLocale } from '../utils/i18n';\nimport { getRelationTargetStatus } from '../utils/dp';\nimport { mapRelation, traverseEntityRelations } from '../utils/map-relation';\n\nconst { isPolymorphic } = relations;\n\ninterface Options {\n  uid: UID.Schema;\n  locale?: string | null;\n  status?: 'draft' | 'published';\n  allowMissingId?: boolean; // Whether to ignore missing ids and not throw any error\n}\n\n/**\n * Get the entry ids for a given documentId.\n */\nconst getRelationIds = curry(\n  (idMap: IdMap, source: Options, targetUid: UID.Schema, relation: LongHandDocument) => {\n    // locale to connect to\n    const targetLocale = getRelationTargetLocale(relation, {\n      targetUid,\n      sourceUid: source.uid,\n      sourceLocale: source.locale,\n    });\n\n    // status(es) to connect to\n    const targetStatus = getRelationTargetStatus(relation, {\n      targetUid,\n      sourceUid: source.uid,\n      sourceStatus: source.status,\n    });\n\n    const ids: ID[] = [];\n\n    // Find mapping between documentID -> id(s).\n    // There are scenarios where a single documentID can map to multiple ids.\n    // e.g when connecting Non DP -> DP and connecting to both the draft and publish version at the same time\n    for (const tStatus of targetStatus) {\n      const entryId = idMap.get({\n        uid: targetUid,\n        documentId: relation.documentId,\n        locale: targetLocale,\n        status: tStatus,\n      });\n\n      if (entryId) ids.push(entryId);\n    }\n\n    if (!ids.length && !source.allowMissingId) {\n      throw new errors.ValidationError(\n        `Document with id \"${relation.documentId}\", locale \"${targetLocale}\" not found`\n      );\n    }\n\n    return ids;\n  }\n);\n\n/**\n * Iterate over all relations of a data object and transform all relational document ids to entity ids.\n */\nconst transformDataIdsVisitor = (idMap: IdMap, data: Record<string, any>, source: Options) => {\n  return traverseEntityRelations(\n    async ({ key, value, attribute }, { set }) => {\n      if (!attribute) {\n        return;\n      }\n      const isPolymorphicRelation = isPolymorphic(attribute);\n      const getIds = getRelationIds(idMap, source);\n\n      // Transform the relation documentId to entity id\n      const newRelation = await mapRelation((relation) => {\n        if (!relation || !relation.documentId) {\n          return relation;\n        }\n\n        // Find relational attributes, and return the document ids\n        // if its a polymorphic relation we need to get it from the data itself\n        const targetUid: UID.Schema = isPolymorphicRelation ? relation.__type : attribute.target;\n        const ids: ID[] = getIds(targetUid, relation);\n\n        // Handle positional arguments\n        const position = { ...relation.position };\n\n        // The positional relation target uid can be different for polymorphic relations\n        let positionTargetUid: UID.Schema = targetUid;\n        if (isPolymorphicRelation && position?.__type) {\n          positionTargetUid = position.__type;\n        }\n\n        if (position.before) {\n          const beforeRelation = { ...relation, ...position, documentId: position.before };\n          const beforeIds: ID[] = getIds(positionTargetUid, beforeRelation);\n          position.before = beforeIds.at(0);\n        }\n\n        if (position.after) {\n          const afterRelation = { ...relation, ...position, documentId: position.after };\n          position.after = getIds(positionTargetUid, afterRelation).at(0);\n        }\n\n        // Transform all ids to new relations\n        return ids?.map((id) => {\n          const newRelation = { id } as typeof relation;\n\n          if (relation.position) {\n            newRelation.position = position;\n          }\n\n          // Insert type if its a polymorphic relation\n          if (isPolymorphicRelation) {\n            newRelation.__type = targetUid;\n          }\n\n          return newRelation;\n        });\n      }, value as any);\n\n      set(key, newRelation as any);\n    },\n    { schema: strapi.getModel(source.uid), getModel: strapi.getModel.bind(strapi) },\n    data\n  );\n};\n\nexport { transformDataIdsVisitor };\n"],"names":["relations","curry","getRelationTargetLocale","getRelationTargetStatus","errors","traverseEntityRelations","mapRelation","newRelation"],"mappings":";;;;;;;AAWA,MAAM,EAAE,cAAkB,IAAAA,YAAA;AAY1B,MAAM,iBAAiBC,GAAA;AAAA,EACrB,CAAC,OAAc,QAAiB,WAAuB,aAA+B;AAE9E,UAAA,eAAeC,6BAAwB,UAAU;AAAA,MACrD;AAAA,MACA,WAAW,OAAO;AAAA,MAClB,cAAc,OAAO;AAAA,IAAA,CACtB;AAGK,UAAA,eAAeC,2BAAwB,UAAU;AAAA,MACrD;AAAA,MACA,WAAW,OAAO;AAAA,MAClB,cAAc,OAAO;AAAA,IAAA,CACtB;AAED,UAAM,MAAY,CAAC;AAKnB,eAAW,WAAW,cAAc;AAC5B,YAAA,UAAU,MAAM,IAAI;AAAA,QACxB,KAAK;AAAA,QACL,YAAY,SAAS;AAAA,QACrB,QAAQ;AAAA,QACR,QAAQ;AAAA,MAAA,CACT;AAEG,UAAA,QAAa,KAAA,KAAK,OAAO;AAAA,IAAA;AAG/B,QAAI,CAAC,IAAI,UAAU,CAAC,OAAO,gBAAgB;AACzC,YAAM,IAAIC,YAAO,OAAA;AAAA,QACf,qBAAqB,SAAS,UAAU,cAAc,YAAY;AAAA,MACpE;AAAA,IAAA;AAGK,WAAA;AAAA,EAAA;AAEX;AAKA,MAAM,0BAA0B,CAAC,OAAc,MAA2B,WAAoB;AACrF,SAAAC,YAAA;AAAA,IACL,OAAO,EAAE,KAAK,OAAO,aAAa,EAAE,UAAU;AAC5C,UAAI,CAAC,WAAW;AACd;AAAA,MAAA;AAEI,YAAA,wBAAwB,cAAc,SAAS;AAC/C,YAAA,SAAS,eAAe,OAAO,MAAM;AAG3C,YAAM,cAAc,MAAMC,wBAAY,CAAC,aAAa;AAClD,YAAI,CAAC,YAAY,CAAC,SAAS,YAAY;AAC9B,iBAAA;AAAA,QAAA;AAKT,cAAM,YAAwB,wBAAwB,SAAS,SAAS,UAAU;AAC5E,cAAA,MAAY,OAAO,WAAW,QAAQ;AAG5C,cAAM,WAAW,EAAE,GAAG,SAAS,SAAS;AAGxC,YAAI,oBAAgC;AAChC,YAAA,yBAAyB,UAAU,QAAQ;AAC7C,8BAAoB,SAAS;AAAA,QAAA;AAG/B,YAAI,SAAS,QAAQ;AACb,gBAAA,iBAAiB,EAAE,GAAG,UAAU,GAAG,UAAU,YAAY,SAAS,OAAO;AACzE,gBAAA,YAAkB,OAAO,mBAAmB,cAAc;AACvD,mBAAA,SAAS,UAAU,GAAG,CAAC;AAAA,QAAA;AAGlC,YAAI,SAAS,OAAO;AACZ,gBAAA,gBAAgB,EAAE,GAAG,UAAU,GAAG,UAAU,YAAY,SAAS,MAAM;AAC7E,mBAAS,QAAQ,OAAO,mBAAmB,aAAa,EAAE,GAAG,CAAC;AAAA,QAAA;AAIzD,eAAA,KAAK,IAAI,CAAC,OAAO;AAChBC,gBAAAA,eAAc,EAAE,GAAG;AAEzB,cAAI,SAAS,UAAU;AACrBA,yBAAY,WAAW;AAAA,UAAA;AAIzB,cAAI,uBAAuB;AACzBA,yBAAY,SAAS;AAAA,UAAA;AAGhBA,iBAAAA;AAAAA,QAAA,CACR;AAAA,SACA,KAAY;AAEf,UAAI,KAAK,WAAkB;AAAA,IAC7B;AAAA,IACA,EAAE,QAAQ,OAAO,SAAS,OAAO,GAAG,GAAG,UAAU,OAAO,SAAS,KAAK,MAAM,EAAE;AAAA,IAC9E;AAAA,EACF;AACF;;"}
{"version":3,"file":"id-transform.mjs","sources":["../../../../src/services/document-service/transform/id-transform.ts"],"sourcesContent":["import { curry } from 'lodash/fp';\n\nimport { UID, Modules } from '@strapi/types';\n\nimport { transformData } from './data';\nimport { transformFields } from './fields';\nimport { transformPopulate } from './populate';\n\n/**\n * Transform input of a query to map document ids to entity ids.\n */\nasync function transformParamsDocumentId(\n  uid: UID.Schema,\n  query: Modules.Documents.Params.All\n): Promise<Modules.Documents.Params.All> {\n  // Transform relational documentIds to entity ids\n  let data = query.data;\n  if (query.data) {\n    data = await transformData(query.data, {\n      locale: query.locale,\n      status: query.status,\n      uid,\n    });\n  }\n\n  // Make sure documentId is always present in the response\n  let fields = query.fields;\n  if (query.fields) {\n    fields = transformFields(query.fields) as typeof query.fields;\n  }\n\n  let populate = query.populate;\n  if (query.populate) {\n    populate = (await transformPopulate(query.populate, { uid })) as typeof query.populate;\n  }\n\n  return {\n    ...query,\n    data,\n    fields,\n    populate,\n  };\n}\n\nconst curriedTransformParamsDocumentId = curry(transformParamsDocumentId);\n\nexport { curriedTransformParamsDocumentId as transformParamsDocumentId };\n"],"names":[],"mappings":";;;;AAWA,eAAe,0BACb,KACA,OACuC;AAEvC,MAAI,OAAO,MAAM;AACjB,MAAI,MAAM,MAAM;AACP,WAAA,MAAM,cAAc,MAAM,MAAM;AAAA,MACrC,QAAQ,MAAM;AAAA,MACd,QAAQ,MAAM;AAAA,MACd;AAAA,IAAA,CACD;AAAA,EAAA;AAIH,MAAI,SAAS,MAAM;AACnB,MAAI,MAAM,QAAQ;AACP,aAAA,gBAAgB,MAAM,MAAM;AAAA,EAAA;AAGvC,MAAI,WAAW,MAAM;AACrB,MAAI,MAAM,UAAU;AAClB,eAAY,MAAM,kBAAkB,MAAM,UAAU,EAAE,KAAK;AAAA,EAAA;AAGtD,SAAA;AAAA,IACL,GAAG;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEM,MAAA,mCAAmC,MAAM,yBAAyB;"}
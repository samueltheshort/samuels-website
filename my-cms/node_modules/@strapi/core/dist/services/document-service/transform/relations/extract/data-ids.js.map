{"version":3,"file":"data-ids.js","sources":["../../../../../../src/services/document-service/transform/relations/extract/data-ids.ts"],"sourcesContent":["import { curry } from 'lodash/fp';\n\nimport { UID } from '@strapi/types';\nimport { relations } from '@strapi/utils';\nimport { IdMap } from '../../id-map';\nimport { getRelationTargetLocale } from '../utils/i18n';\nimport { getRelationTargetStatus } from '../utils/dp';\nimport { mapRelation, traverseEntityRelations } from '../utils/map-relation';\nimport { LongHandDocument } from '../utils/types';\n\nconst { isPolymorphic } = relations;\n\ninterface Options {\n  uid: UID.Schema;\n  locale?: string | null;\n  status?: 'draft' | 'published';\n}\n\n/**\n * Load a relation documentId into the idMap.\n */\nconst addRelationDocId = curry(\n  (idMap: IdMap, source: Options, targetUid: UID.Schema, relation: LongHandDocument) => {\n    const targetLocale = getRelationTargetLocale(relation, {\n      targetUid,\n      sourceUid: source.uid,\n      sourceLocale: source.locale,\n    });\n\n    const targetStatus = getRelationTargetStatus(relation, {\n      targetUid,\n      sourceUid: source.uid,\n      sourceStatus: source.status,\n    });\n\n    targetStatus.forEach((status) => {\n      idMap.add({\n        uid: targetUid,\n        documentId: relation.documentId,\n        locale: targetLocale,\n        status,\n      });\n    });\n  }\n);\n\n/**\n * Iterate over all relations of a data object and extract all relational document ids.\n * Those will later be transformed to entity ids.\n */\nconst extractDataIds = (idMap: IdMap, data: Record<string, any>, source: Options) => {\n  return traverseEntityRelations(\n    async ({ attribute, value }) => {\n      if (!attribute) {\n        return;\n      }\n      const isPolymorphicRelation = isPolymorphic(attribute);\n      const addDocId = addRelationDocId(idMap, source);\n\n      return mapRelation((relation) => {\n        if (!relation || !relation.documentId) {\n          return relation;\n        }\n\n        // Regular relations will always target the same target\n        // if its a polymorphic relation we need to get it from the data itself\n        const targetUid = isPolymorphicRelation ? relation.__type : attribute.target;\n\n        addDocId(targetUid, relation);\n\n        // Handle positional arguments\n        const position = relation.position;\n\n        // The positional relation target uid can be different for polymorphic relations\n        let positionTargetUid = targetUid;\n        if (isPolymorphicRelation && position?.__type) {\n          positionTargetUid = position.__type;\n        }\n\n        if (position?.before) {\n          addDocId(positionTargetUid, { ...relation, ...position, documentId: position.before });\n        }\n\n        if (position?.after) {\n          addDocId(positionTargetUid, { ...relation, ...position, documentId: position.after });\n        }\n\n        return relation;\n      }, value as any);\n    },\n    { schema: strapi.getModel(source.uid), getModel: strapi.getModel.bind(strapi) },\n    data\n  );\n};\n\nexport { extractDataIds };\n"],"names":["relations","curry","getRelationTargetLocale","getRelationTargetStatus","traverseEntityRelations","mapRelation"],"mappings":";;;;;;;AAUA,MAAM,EAAE,cAAkB,IAAAA,YAAA;AAW1B,MAAM,mBAAmBC,GAAA;AAAA,EACvB,CAAC,OAAc,QAAiB,WAAuB,aAA+B;AAC9E,UAAA,eAAeC,6BAAwB,UAAU;AAAA,MACrD;AAAA,MACA,WAAW,OAAO;AAAA,MAClB,cAAc,OAAO;AAAA,IAAA,CACtB;AAEK,UAAA,eAAeC,2BAAwB,UAAU;AAAA,MACrD;AAAA,MACA,WAAW,OAAO;AAAA,MAClB,cAAc,OAAO;AAAA,IAAA,CACtB;AAEY,iBAAA,QAAQ,CAAC,WAAW;AAC/B,YAAM,IAAI;AAAA,QACR,KAAK;AAAA,QACL,YAAY,SAAS;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,MAAA,CACD;AAAA,IAAA,CACF;AAAA,EAAA;AAEL;AAMA,MAAM,iBAAiB,CAAC,OAAc,MAA2B,WAAoB;AAC5E,SAAAC,YAAA;AAAA,IACL,OAAO,EAAE,WAAW,YAAY;AAC9B,UAAI,CAAC,WAAW;AACd;AAAA,MAAA;AAEI,YAAA,wBAAwB,cAAc,SAAS;AAC/C,YAAA,WAAW,iBAAiB,OAAO,MAAM;AAExC,aAAAC,YAAAA,YAAY,CAAC,aAAa;AAC/B,YAAI,CAAC,YAAY,CAAC,SAAS,YAAY;AAC9B,iBAAA;AAAA,QAAA;AAKT,cAAM,YAAY,wBAAwB,SAAS,SAAS,UAAU;AAEtE,iBAAS,WAAW,QAAQ;AAG5B,cAAM,WAAW,SAAS;AAG1B,YAAI,oBAAoB;AACpB,YAAA,yBAAyB,UAAU,QAAQ;AAC7C,8BAAoB,SAAS;AAAA,QAAA;AAG/B,YAAI,UAAU,QAAQ;AACX,mBAAA,mBAAmB,EAAE,GAAG,UAAU,GAAG,UAAU,YAAY,SAAS,QAAQ;AAAA,QAAA;AAGvF,YAAI,UAAU,OAAO;AACV,mBAAA,mBAAmB,EAAE,GAAG,UAAU,GAAG,UAAU,YAAY,SAAS,OAAO;AAAA,QAAA;AAG/E,eAAA;AAAA,SACN,KAAY;AAAA,IACjB;AAAA,IACA,EAAE,QAAQ,OAAO,SAAS,OAAO,GAAG,GAAG,UAAU,OAAO,SAAS,KAAK,MAAM,EAAE;AAAA,IAC9E;AAAA,EACF;AACF;;"}
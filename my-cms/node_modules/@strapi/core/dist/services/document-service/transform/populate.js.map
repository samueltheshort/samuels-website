{"version":3,"file":"populate.js","sources":["../../../../src/services/document-service/transform/populate.ts"],"sourcesContent":["import { traverse } from '@strapi/utils';\nimport type { UID } from '@strapi/types';\n\nimport { type Data } from './types';\nimport { transformFields } from './fields';\n\nexport const transformPopulate = async (data: Data, opts: { uid: UID.Schema }) => {\n  return traverse.traverseQueryPopulate(\n    async ({ attribute, key, value }, { set }) => {\n      if (!value || typeof value !== 'object' || attribute?.type !== 'relation') {\n        return;\n      }\n\n      /*\n        If the attribute is a relation\n        Look for fields in the value\n        and apply the relevant transformation to these objects\n      */\n      if ('fields' in value && Array.isArray(value.fields)) {\n        value.fields = transformFields(value.fields);\n      }\n\n      set(key, value);\n    },\n    { schema: strapi.getModel(opts.uid), getModel: strapi.getModel.bind(strapi) },\n    data\n  );\n};\n"],"names":["traverse","transformFields"],"mappings":";;;;AAMa,MAAA,oBAAoB,OAAO,MAAY,SAA8B;AAChF,SAAOA,YAAS,SAAA;AAAA,IACd,OAAO,EAAE,WAAW,KAAK,SAAS,EAAE,UAAU;AAC5C,UAAI,CAAC,SAAS,OAAO,UAAU,YAAY,WAAW,SAAS,YAAY;AACzE;AAAA,MAAA;AAQF,UAAI,YAAY,SAAS,MAAM,QAAQ,MAAM,MAAM,GAAG;AAC9C,cAAA,SAASC,uBAAgB,MAAM,MAAM;AAAA,MAAA;AAG7C,UAAI,KAAK,KAAK;AAAA,IAChB;AAAA,IACA,EAAE,QAAQ,OAAO,SAAS,KAAK,GAAG,GAAG,UAAU,OAAO,SAAS,KAAK,MAAM,EAAE;AAAA,IAC5E;AAAA,EACF;AACF;;"}
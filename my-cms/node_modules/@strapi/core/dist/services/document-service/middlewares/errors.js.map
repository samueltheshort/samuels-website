{"version":3,"file":"errors.js","sources":["../../../../src/services/document-service/middlewares/errors.ts"],"sourcesContent":["import { errors as databaseErrors } from '@strapi/database';\nimport { errors } from '@strapi/utils';\n\nimport type { Middleware } from './middleware-manager';\n\nconst databaseErrorsToTransform = [\n  databaseErrors.InvalidTimeError,\n  databaseErrors.InvalidDateTimeError,\n  databaseErrors.InvalidDateError,\n  databaseErrors.InvalidRelationError,\n];\n\n/**\n * Handle database errors\n */\nexport const databaseErrorsMiddleware: Middleware = async (ctx, next) => {\n  try {\n    return await next();\n  } catch (error) {\n    if (databaseErrorsToTransform.some((errorToTransform) => error instanceof errorToTransform)) {\n      if (error instanceof Error) {\n        throw new errors.ValidationError(error.message);\n      }\n\n      throw error;\n    }\n    throw error;\n  }\n};\n"],"names":["databaseErrors","errors"],"mappings":";;;;AAKA,MAAM,4BAA4B;AAAA,EAChCA,SAAAA,OAAe;AAAA,EACfA,SAAAA,OAAe;AAAA,EACfA,SAAAA,OAAe;AAAA,EACfA,gBAAe;AACjB;AAKa,MAAA,2BAAuC,OAAO,KAAK,SAAS;AACnE,MAAA;AACF,WAAO,MAAM,KAAK;AAAA,WACX,OAAO;AACd,QAAI,0BAA0B,KAAK,CAAC,qBAAqB,iBAAiB,gBAAgB,GAAG;AAC3F,UAAI,iBAAiB,OAAO;AAC1B,cAAM,IAAIC,YAAA,OAAO,gBAAgB,MAAM,OAAO;AAAA,MAAA;AAG1C,YAAA;AAAA,IAAA;AAEF,UAAA;AAAA,EAAA;AAEV;;"}
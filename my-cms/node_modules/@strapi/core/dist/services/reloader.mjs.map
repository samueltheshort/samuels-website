{"version":3,"file":"reloader.mjs","sources":["../../src/services/reloader.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\n\nexport const createReloader = (strapi: Core.Strapi) => {\n  const state = {\n    shouldReload: 0,\n    isWatching: true,\n  };\n\n  function reload() {\n    if (state.shouldReload > 0) {\n      // Reset the reloading state\n      state.shouldReload -= 1;\n      reload.isReloading = false;\n      return;\n    }\n\n    if (strapi.config.get('autoReload')) {\n      process.send?.('reload');\n    }\n  }\n\n  Object.defineProperty(reload, 'isWatching', {\n    configurable: true,\n    enumerable: true,\n    set(value) {\n      // Special state when the reloader is disabled temporarly (see GraphQL plugin example).\n      if (state.isWatching === false && value === true) {\n        state.shouldReload += 1;\n      }\n      state.isWatching = value;\n    },\n    get() {\n      return state.isWatching;\n    },\n  });\n\n  reload.isReloading = false;\n  reload.isWatching = true;\n\n  return reload;\n};\n"],"names":[],"mappings":"AAEa,MAAA,iBAAiB,CAAC,WAAwB;AACrD,QAAM,QAAQ;AAAA,IACZ,cAAc;AAAA,IACd,YAAY;AAAA,EACd;AAEA,WAAS,SAAS;AACZ,QAAA,MAAM,eAAe,GAAG;AAE1B,YAAM,gBAAgB;AACtB,aAAO,cAAc;AACrB;AAAA,IAAA;AAGF,QAAI,OAAO,OAAO,IAAI,YAAY,GAAG;AACnC,cAAQ,OAAO,QAAQ;AAAA,IAAA;AAAA,EACzB;AAGK,SAAA,eAAe,QAAQ,cAAc;AAAA,IAC1C,cAAc;AAAA,IACd,YAAY;AAAA,IACZ,IAAI,OAAO;AAET,UAAI,MAAM,eAAe,SAAS,UAAU,MAAM;AAChD,cAAM,gBAAgB;AAAA,MAAA;AAExB,YAAM,aAAa;AAAA,IACrB;AAAA,IACA,MAAM;AACJ,aAAO,MAAM;AAAA,IAAA;AAAA,EACf,CACD;AAED,SAAO,cAAc;AACrB,SAAO,aAAa;AAEb,SAAA;AACT;"}
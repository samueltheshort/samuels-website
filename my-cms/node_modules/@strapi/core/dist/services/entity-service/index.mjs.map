{"version":3,"file":"index.mjs","sources":["../../../src/services/entity-service/index.ts"],"sourcesContent":["import _ from 'lodash';\nimport delegate from 'delegates';\nimport { errors as databaseErrors } from '@strapi/database';\nimport {\n  contentTypes as contentTypesUtils,\n  errors,\n  relations as relationUtils,\n} from '@strapi/utils';\nimport type { Database } from '@strapi/database';\nimport type { Core, Modules, Utils } from '@strapi/types';\n\ntype Decoratable<T> = T & {\n  decorate(\n    decorator: (old: Modules.EntityService.EntityService) => Modules.EntityService.EntityService & {\n      [key: string]: unknown;\n    }\n  ): void;\n};\n\nconst transformLoadParamsToQuery = (\n  uid: string,\n  field: string,\n  params: Record<string, unknown>,\n  pagination = {}\n) => {\n  const query = strapi\n    .get('query-params')\n    .transform(uid, { populate: { [field]: params } as any }) as any;\n\n  const res = {\n    ...query.populate[field],\n    ...pagination,\n  };\n\n  return res;\n};\n\nconst databaseErrorsToTransform = [\n  databaseErrors.InvalidTimeError,\n  databaseErrors.InvalidDateTimeError,\n  databaseErrors.InvalidDateError,\n  databaseErrors.InvalidRelationError,\n];\n\nconst createDefaultImplementation = ({\n  strapi,\n  db,\n}: {\n  strapi: Core.Strapi;\n  db: Database;\n}): Modules.EntityService.EntityService => ({\n  async wrapParams(options: any = {}) {\n    return options;\n  },\n\n  async wrapResult(result: any = {}) {\n    return result;\n  },\n\n  async findMany(uid, opts) {\n    const { kind } = strapi.getModel(uid);\n\n    const wrappedParams = await this.wrapParams(opts, { uid, action: 'findMany' });\n\n    if (kind === 'singleType') {\n      const entity = strapi.documents!(uid).findFirst(wrappedParams);\n      return this.wrapResult(entity, { uid, action: 'findOne' });\n    }\n\n    const entities = await strapi.documents!(uid).findMany(wrappedParams);\n    return this.wrapResult(entities, { uid, action: 'findMany' });\n  },\n\n  async findPage(uid, opts) {\n    const wrappedParams = await this.wrapParams(opts, { uid, action: 'findPage' });\n\n    const query = strapi.get('query-params').transform(uid, wrappedParams);\n\n    const entities = await db.query(uid).findPage(query);\n    return this.wrapResult(entities, { uid, action: 'findMany' });\n  },\n\n  async findOne(uid, entityId, opts) {\n    const wrappedParams = await this.wrapParams(opts, { uid, action: 'findOne' });\n\n    const res = await db.query(uid).findOne({ where: { id: entityId } });\n\n    if (!res) {\n      return this.wrapResult(null, { uid, action: 'findOne' });\n    }\n\n    const entity = await strapi.documents!(uid).findOne({\n      ...wrappedParams,\n      documentId: res.documentId,\n    });\n    return this.wrapResult(entity, { uid, action: 'findOne' });\n  },\n\n  async count(uid, opts) {\n    const wrappedParams = await this.wrapParams(opts, { uid, action: 'count' });\n\n    return strapi.documents!(uid).count(wrappedParams);\n  },\n\n  async create(uid, params) {\n    const wrappedParams = await this.wrapParams<\n      Modules.EntityService.Params.Pick<typeof uid, 'data' | 'fields' | 'populate'>\n    >(params, { uid, action: 'create' });\n    const { data } = wrappedParams;\n\n    if (!data) {\n      throw new Error('cannot create');\n    }\n\n    const shouldPublish = !contentTypesUtils.isDraft(data, strapi.getModel(uid));\n\n    const entity = await strapi.documents!(uid).create({\n      ...(wrappedParams as any),\n      status: shouldPublish ? 'published' : 'draft',\n    });\n\n    return this.wrapResult(entity, { uid, action: 'create' });\n  },\n\n  async update(uid, entityId, opts) {\n    const wrappedParams = await this.wrapParams<\n      Modules.EntityService.Params.Pick<typeof uid, 'data:partial' | 'fields' | 'populate'>\n    >(opts, {\n      uid,\n      action: 'update',\n    });\n    const entityToUpdate = await db.query(uid).findOne({ where: { id: entityId } });\n\n    if (!entityToUpdate) {\n      return this.wrapResult(null, { uid, action: 'update' });\n    }\n\n    const shouldPublish = !contentTypesUtils.isDraft(entityToUpdate, strapi.getModel(uid));\n\n    const entity = strapi.documents!(uid).update({\n      ...(wrappedParams as any),\n      status: shouldPublish ? 'published' : 'draft',\n      documentId: entityToUpdate.documentId,\n    });\n\n    return this.wrapResult(entity, { uid, action: 'update' });\n  },\n\n  async delete(uid, entityId, opts) {\n    const wrappedParams = await this.wrapParams(opts, { uid, action: 'delete' });\n\n    const entityToDelete = await db.query(uid).findOne({ where: { id: entityId } });\n\n    if (!entityToDelete) {\n      return this.wrapResult(null, { uid, action: 'delete' });\n    }\n\n    await strapi.documents!(uid).delete({\n      ...wrappedParams,\n      documentId: entityToDelete.documentId,\n    });\n\n    return this.wrapResult(entityToDelete, { uid, action: 'delete' });\n  },\n\n  async load(uid, entity, field, params) {\n    if (!_.isString(field)) {\n      throw new Error(`Invalid load. Expected \"${field}\" to be a string`);\n    }\n\n    const loadedEntity = await db\n      .query(uid)\n      .load(entity, field, transformLoadParamsToQuery(uid, field, params ?? {}));\n\n    return this.wrapResult(loadedEntity, { uid, field, action: 'load' });\n  },\n\n  async loadPages(uid, entity, field, params, pagination = {}) {\n    if (!_.isString(field)) {\n      throw new Error(`Invalid load. Expected \"${field}\" to be a string`);\n    }\n\n    const { attributes } = strapi.getModel(uid);\n    const attribute = attributes[field];\n\n    if (!relationUtils.isAnyToMany(attribute)) {\n      throw new Error(`Invalid load. Expected \"${field}\" to be an anyToMany relational attribute`);\n    }\n\n    const query = transformLoadParamsToQuery(uid, field, params ?? {}, pagination);\n\n    const loadedPage = await db.query(uid).loadPages(entity, field, query);\n\n    return {\n      ...loadedPage,\n      results: await this.wrapResult(loadedPage.results, { uid, field, action: 'load' }),\n    };\n  },\n});\n\nexport default (ctx: {\n  strapi: Core.Strapi;\n  db: Database;\n}): Decoratable<Modules.EntityService.EntityService> => {\n  const implementation = createDefaultImplementation(ctx);\n\n  const service = {\n    implementation,\n    decorate<T extends object>(decorator: (current: typeof implementation) => T) {\n      if (typeof decorator !== 'function') {\n        throw new Error(`Decorator must be a function, received ${typeof decorator}`);\n      }\n\n      this.implementation = { ...this.implementation, ...decorator(this.implementation) };\n      return this;\n    },\n  };\n\n  const delegator = delegate(service, 'implementation');\n\n  // delegate every method in implementation\n  Object.keys(service.implementation).forEach((key) => delegator.method(key));\n\n  // wrap methods to handle Database Errors\n  service.decorate((oldService: Modules.EntityService.EntityService) => {\n    const newService = _.mapValues(\n      oldService,\n      (method, methodName: keyof Modules.EntityService.EntityService) =>\n        async function (this: Modules.EntityService.EntityService, ...args: []) {\n          try {\n            return await (oldService[methodName] as Utils.Function.AnyPromise).call(this, ...args);\n          } catch (error) {\n            if (\n              databaseErrorsToTransform.some(\n                (errorToTransform) => error instanceof errorToTransform\n              )\n            ) {\n              if (error instanceof Error) {\n                throw new errors.ValidationError(error.message);\n              }\n\n              throw error;\n            }\n            throw error;\n          }\n        }\n    );\n\n    return newService;\n  });\n\n  return service as unknown as Decoratable<Modules.EntityService.EntityService>;\n};\n"],"names":["databaseErrors","strapi","contentTypesUtils","relationUtils","errors"],"mappings":"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"}
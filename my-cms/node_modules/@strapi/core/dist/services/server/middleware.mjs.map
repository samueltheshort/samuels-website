{"version":3,"file":"middleware.mjs","sources":["../../../src/services/server/middleware.ts"],"sourcesContent":["import path from 'path';\nimport { isArray } from 'lodash/fp';\nimport { importDefault } from '@strapi/utils';\nimport type { Core } from '@strapi/types';\n\nconst instantiateMiddleware = (\n  middlewareFactory: Core.MiddlewareFactory,\n  name: string,\n  config: unknown,\n  strapi: Core.Strapi\n) => {\n  try {\n    return middlewareFactory(config, { strapi });\n  } catch (e) {\n    if (e instanceof Error) {\n      throw new Error(`Middleware \"${name}\": ${e.message}`);\n    }\n  }\n};\n\nconst resolveRouteMiddlewares = (route: Core.Route, strapi: Core.Strapi) => {\n  const middlewaresConfig = route?.config?.middlewares ?? [];\n\n  if (!isArray(middlewaresConfig)) {\n    throw new Error('Route middlewares config must be an array');\n  }\n\n  const middlewares = resolveMiddlewares(middlewaresConfig, strapi);\n\n  return middlewares.map(({ handler }) => handler);\n};\n\nconst dummyMiddleware: Core.MiddlewareHandler = (_, next) => next();\n\n/**\n * Initialize every configured middlewares\n */\nconst resolveMiddlewares = (\n  config: Array<Core.MiddlewareName | Core.MiddlewareConfig | Core.MiddlewareHandler>,\n  strapi: Core.Strapi\n) => {\n  const middlewares: {\n    name: string | null;\n    handler: Core.MiddlewareHandler;\n  }[] = [];\n\n  for (const item of config) {\n    if (typeof item === 'function') {\n      middlewares.push({\n        name: null,\n        handler: item,\n      });\n\n      continue;\n    }\n\n    if (typeof item === 'string') {\n      const middlewareFactory = strapi.middleware(item);\n\n      if (!middlewareFactory) {\n        throw new Error(`Middleware ${item} not found.`);\n      }\n\n      middlewares.push({\n        name: item,\n        handler: instantiateMiddleware(middlewareFactory, item, {}, strapi) ?? dummyMiddleware,\n      });\n\n      continue;\n    }\n\n    if (typeof item === 'object' && item !== null) {\n      const { name, resolve, config = {} } = item;\n\n      if (name) {\n        const middlewareFactory = strapi.middleware(name);\n        middlewares.push({\n          name,\n          handler:\n            instantiateMiddleware(middlewareFactory, name, config, strapi) ?? dummyMiddleware,\n        });\n\n        continue;\n      }\n\n      if (resolve) {\n        const resolvedMiddlewareFactory = resolveCustomMiddleware(resolve, strapi);\n        middlewares.push({\n          name: resolve,\n          handler:\n            instantiateMiddleware(resolvedMiddlewareFactory, resolve, config, strapi) ??\n            dummyMiddleware,\n        });\n\n        continue;\n      }\n\n      throw new Error('Invalid middleware configuration. Missing name or resolve properties.');\n    }\n\n    throw new Error(\n      'Middleware config must either be a string or an object {name?: string, resolve?: string, config: any}.'\n    );\n  }\n\n  return middlewares;\n};\n\n/**\n * Resolve middleware from package name or path\n */\nconst resolveCustomMiddleware = (resolve: string, strapi: Core.Strapi) => {\n  let modulePath;\n\n  try {\n    modulePath = require.resolve(resolve);\n  } catch (error) {\n    if (error instanceof Error && 'code' in error && error.code === 'MODULE_NOT_FOUND') {\n      modulePath = path.resolve(strapi.dirs.dist.root, resolve);\n    } else {\n      throw error;\n    }\n  }\n\n  try {\n    return importDefault(modulePath);\n  } catch (err) {\n    throw new Error(`Could not load middleware \"${modulePath}\".`);\n  }\n};\n\nexport { resolveRouteMiddlewares, resolveMiddlewares };\n"],"names":["config"],"mappings":";;;AAKA,MAAM,wBAAwB,CAC5B,mBACA,MACA,QACA,WACG;AACC,MAAA;AACF,WAAO,kBAAkB,QAAQ,EAAE,QAAQ;AAAA,WACpC,GAAG;AACV,QAAI,aAAa,OAAO;AACtB,YAAM,IAAI,MAAM,eAAe,IAAI,MAAM,EAAE,OAAO,EAAE;AAAA,IAAA;AAAA,EACtD;AAEJ;AAEM,MAAA,0BAA0B,CAAC,OAAmB,WAAwB;AAC1E,QAAM,oBAAoB,OAAO,QAAQ,eAAe,CAAC;AAErD,MAAA,CAAC,QAAQ,iBAAiB,GAAG;AACzB,UAAA,IAAI,MAAM,2CAA2C;AAAA,EAAA;AAGvD,QAAA,cAAc,mBAAmB,mBAAmB,MAAM;AAEhE,SAAO,YAAY,IAAI,CAAC,EAAE,QAAA,MAAc,OAAO;AACjD;AAEA,MAAM,kBAA0C,CAAC,GAAG,SAAS,KAAK;AAK5D,MAAA,qBAAqB,CACzB,QACA,WACG;AACH,QAAM,cAGA,CAAC;AAEP,aAAW,QAAQ,QAAQ;AACrB,QAAA,OAAO,SAAS,YAAY;AAC9B,kBAAY,KAAK;AAAA,QACf,MAAM;AAAA,QACN,SAAS;AAAA,MAAA,CACV;AAED;AAAA,IAAA;AAGE,QAAA,OAAO,SAAS,UAAU;AACtB,YAAA,oBAAoB,OAAO,WAAW,IAAI;AAEhD,UAAI,CAAC,mBAAmB;AACtB,cAAM,IAAI,MAAM,cAAc,IAAI,aAAa;AAAA,MAAA;AAGjD,kBAAY,KAAK;AAAA,QACf,MAAM;AAAA,QACN,SAAS,sBAAsB,mBAAmB,MAAM,CAAC,GAAG,MAAM,KAAK;AAAA,MAAA,CACxE;AAED;AAAA,IAAA;AAGF,QAAI,OAAO,SAAS,YAAY,SAAS,MAAM;AAC7C,YAAM,EAAE,MAAM,SAAS,QAAAA,UAAS,OAAO;AAEvC,UAAI,MAAM;AACF,cAAA,oBAAoB,OAAO,WAAW,IAAI;AAChD,oBAAY,KAAK;AAAA,UACf;AAAA,UACA,SACE,sBAAsB,mBAAmB,MAAMA,SAAQ,MAAM,KAAK;AAAA,QAAA,CACrE;AAED;AAAA,MAAA;AAGF,UAAI,SAAS;AACL,cAAA,4BAA4B,wBAAwB,SAAS,MAAM;AACzE,oBAAY,KAAK;AAAA,UACf,MAAM;AAAA,UACN,SACE,sBAAsB,2BAA2B,SAASA,SAAQ,MAAM,KACxE;AAAA,QAAA,CACH;AAED;AAAA,MAAA;AAGI,YAAA,IAAI,MAAM,uEAAuE;AAAA,IAAA;AAGzF,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EAAA;AAGK,SAAA;AACT;AAKA,MAAM,0BAA0B,CAAC,SAAiB,WAAwB;AACpE,MAAA;AAEA,MAAA;AACW,iBAAA,QAAQ,QAAQ,OAAO;AAAA,WAC7B,OAAO;AACd,QAAI,iBAAiB,SAAS,UAAU,SAAS,MAAM,SAAS,oBAAoB;AAClF,mBAAa,KAAK,QAAQ,OAAO,KAAK,KAAK,MAAM,OAAO;AAAA,IAAA,OACnD;AACC,YAAA;AAAA,IAAA;AAAA,EACR;AAGE,MAAA;AACF,WAAO,cAAc,UAAU;AAAA,WACxB,KAAK;AACZ,UAAM,IAAI,MAAM,8BAA8B,UAAU,IAAI;AAAA,EAAA;AAEhE;"}
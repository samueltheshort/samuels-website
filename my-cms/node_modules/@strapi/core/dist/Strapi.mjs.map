{"version":3,"file":"Strapi.mjs","sources":["../src/Strapi.ts"],"sourcesContent":["import * as globalAgent from 'global-agent';\nimport path from 'path';\nimport _ from 'lodash';\nimport { isFunction } from 'lodash/fp';\nimport { Logger, createLogger } from '@strapi/logger';\nimport { Database } from '@strapi/database';\n\nimport type { Core, Modules, UID, Schema } from '@strapi/types';\n\nimport tsUtils from '@strapi/typescript-utils';\nimport { loadConfiguration } from './configuration';\n\nimport * as factories from './factories';\n\nimport * as utils from './utils';\nimport { Container } from './container';\nimport createStrapiFs from './services/fs';\nimport createEventHub from './services/event-hub';\nimport { createServer } from './services/server';\nimport { createReloader } from './services/reloader';\n\nimport { providers } from './providers';\nimport createEntityService from './services/entity-service';\nimport createQueryParamService from './services/query-params';\n\nimport entityValidator from './services/entity-validator';\nimport requestContext from './services/request-context';\nimport createAuth from './services/auth';\nimport createCustomFields from './services/custom-fields';\nimport createContentAPI from './services/content-api';\nimport getNumberOfDynamicZones from './services/utils/dynamic-zones';\nimport { FeaturesService, createFeaturesService } from './services/features';\nimport { createDocumentService } from './services/document-service';\n\nimport { coreStoreModel } from './services/core-store';\nimport { createConfigProvider } from './services/config';\n\nclass Strapi extends Container implements Core.Strapi {\n  app: any;\n\n  isLoaded: boolean = false;\n\n  internal_config: Record<string, unknown> = {};\n\n  constructor(opts: StrapiOptions) {\n    super();\n\n    this.internal_config = loadConfiguration(opts);\n\n    this.registerInternalServices();\n\n    for (const provider of providers) {\n      provider.init?.(this);\n    }\n  }\n\n  get admin(): Core.Module {\n    return this.get('admin');\n  }\n\n  get EE(): boolean {\n    return utils.ee.isEE;\n  }\n\n  get ee(): Core.Strapi['ee'] {\n    return utils.ee;\n  }\n\n  get dirs(): Core.StrapiDirectories {\n    return this.config.get('dirs');\n  }\n\n  get reload(): Core.Reloader {\n    return this.get('reload');\n  }\n\n  get db(): Database {\n    return this.get('db');\n  }\n\n  get requestContext(): Modules.RequestContext.RequestContext {\n    return this.get('requestContext');\n  }\n\n  get customFields(): Modules.CustomFields.CustomFields {\n    return this.get('customFields');\n  }\n\n  get entityValidator(): Modules.EntityValidator.EntityValidator {\n    return this.get('entityValidator');\n  }\n\n  /**\n   * @deprecated `strapi.entityService` will be removed in the next major version\n   */\n  get entityService(): Modules.EntityService.EntityService {\n    return this.get('entityService');\n  }\n\n  get documents(): Modules.Documents.Service {\n    return this.get('documents');\n  }\n\n  get features(): FeaturesService {\n    return this.get('features');\n  }\n\n  get fetch(): Modules.Fetch.Fetch {\n    return this.get('fetch');\n  }\n\n  get cron(): Modules.Cron.CronService {\n    return this.get('cron');\n  }\n\n  get log(): Logger {\n    return this.get('logger');\n  }\n\n  get startupLogger(): Core.StartupLogger {\n    return this.get('startupLogger');\n  }\n\n  get eventHub(): Modules.EventHub.EventHub {\n    return this.get('eventHub');\n  }\n\n  get fs(): Core.StrapiFS {\n    return this.get('fs');\n  }\n\n  get server(): Modules.Server.Server {\n    return this.get('server');\n  }\n\n  get telemetry(): Modules.Metrics.TelemetryService {\n    return this.get('telemetry');\n  }\n\n  get store(): Modules.CoreStore.CoreStore {\n    return this.get('coreStore');\n  }\n\n  get config() {\n    return this.get('config');\n  }\n\n  get services() {\n    return this.get('services').getAll();\n  }\n\n  service(uid: UID.Service) {\n    return this.get('services').get(uid);\n  }\n\n  get controllers() {\n    return this.get('controllers').getAll();\n  }\n\n  controller(uid: UID.Controller) {\n    return this.get('controllers').get(uid);\n  }\n\n  get contentTypes(): Schema.ContentTypes {\n    return this.get('content-types').getAll();\n  }\n\n  contentType(name: UID.ContentType) {\n    return this.get('content-types').get(name);\n  }\n\n  get components(): Schema.Components {\n    return this.get('components').getAll();\n  }\n\n  get policies() {\n    return this.get('policies').getAll();\n  }\n\n  policy(name: string) {\n    return this.get('policies').get(name);\n  }\n\n  get middlewares() {\n    return this.get('middlewares').getAll();\n  }\n\n  middleware(name: string) {\n    return this.get('middlewares').get(name);\n  }\n\n  get plugins(): Record<string, Core.Plugin> {\n    return this.get('plugins').getAll();\n  }\n\n  plugin(name: string): Core.Plugin {\n    return this.get('plugins').get(name);\n  }\n\n  get hooks() {\n    return this.get('hooks').getAll();\n  }\n\n  hook(name: string) {\n    return this.get('hooks').get(name);\n  }\n\n  get apis() {\n    return this.get('apis').getAll();\n  }\n\n  api(name: string): Core.Module {\n    return this.get('apis').get(name);\n  }\n\n  get auth() {\n    return this.get('auth');\n  }\n\n  get contentAPI() {\n    return this.get('content-api');\n  }\n\n  get sanitizers() {\n    return this.get('sanitizers');\n  }\n\n  get validators() {\n    return this.get('validators');\n  }\n\n  async start() {\n    try {\n      if (!this.isLoaded) {\n        await this.load();\n      }\n\n      await this.listen();\n\n      return this;\n    } catch (error) {\n      return this.stopWithError(error);\n    }\n  }\n\n  // TODO: split into more providers\n  registerInternalServices() {\n    const config = createConfigProvider(this.internal_config, this);\n\n    const logger = createLogger({\n      level: 'http', // Strapi defaults to level 'http'\n      ...config.get('logger'), // DEPRECATED\n      ...config.get('server.logger.config'),\n    });\n\n    // Instantiate the Strapi container\n    this.add('config', () => config)\n      .add('query-params', createQueryParamService(this))\n      .add('content-api', createContentAPI(this))\n      .add('auth', createAuth())\n      .add('server', () => createServer(this))\n      .add('fs', () => createStrapiFs(this))\n      .add('eventHub', () => createEventHub())\n      .add('startupLogger', () => utils.createStartupLogger(this))\n      .add('logger', () => logger)\n      .add('fetch', () => utils.createStrapiFetch(this))\n      .add('features', () => createFeaturesService(this))\n      .add('requestContext', requestContext)\n      .add('customFields', createCustomFields(this))\n      .add('entityValidator', entityValidator)\n      .add('entityService', () => createEntityService({ strapi: this, db: this.db }))\n      .add('documents', () => createDocumentService(this))\n      .add('db', () => {\n        const tsDir = tsUtils.resolveOutDirSync(this.dirs.app.root);\n        const tsMigrationsEnabled =\n          this.config.get('database.settings.useTypescriptMigrations') === true && tsDir;\n        const projectDir = tsMigrationsEnabled ? tsDir : this.dirs.app.root;\n        return new Database(\n          _.merge(this.config.get('database'), {\n            logger,\n            settings: {\n              migrations: {\n                dir: path.join(projectDir, 'database/migrations'),\n              },\n            },\n          })\n        );\n      })\n      .add('reload', () => createReloader(this));\n  }\n\n  sendStartupTelemetry() {\n    // Emit started event.\n    // do not await to avoid slower startup\n    // This event is anonymous\n    this.telemetry\n      .send('didStartServer', {\n        groupProperties: {\n          database: this.config.get('database.connection.client'),\n          plugins: Object.keys(this.plugins),\n          numberOfAllContentTypes: _.size(this.contentTypes), // TODO: V5: This event should be renamed numberOfContentTypes in V5 as the name is already taken to describe the number of content types using i18n.\n          numberOfComponents: _.size(this.components),\n          numberOfDynamicZones: getNumberOfDynamicZones(),\n          numberOfCustomControllers: Object.values<Core.Controller>(this.controllers).filter(\n            // TODO: Fix this at the content API loader level to prevent future types issues\n            (controller) => controller !== undefined && factories.isCustomController(controller)\n          ).length,\n          environment: this.config.environment,\n          // TODO: to add back\n          // providers: this.config.installedProviders,\n        },\n      })\n      .catch(this.log.error);\n  }\n\n  async openAdmin({ isInitialized }: { isInitialized: boolean }) {\n    const shouldOpenAdmin =\n      this.config.get('environment') === 'development' &&\n      this.config.get('admin.autoOpen', true) !== false;\n\n    if (shouldOpenAdmin && !isInitialized) {\n      try {\n        await utils.openBrowser(this.config);\n        this.telemetry.send('didOpenTab');\n      } catch (e) {\n        this.telemetry.send('didNotOpenTab');\n      }\n    }\n  }\n\n  async postListen() {\n    const isInitialized = await utils.isInitialized(this);\n\n    this.startupLogger.logStartupMessage({ isInitialized });\n\n    this.log.info('Strapi started successfully');\n    this.sendStartupTelemetry();\n    this.openAdmin({ isInitialized });\n  }\n\n  /**\n   * Add behaviors to the server\n   */\n  async listen() {\n    return new Promise<void>((resolve, reject) => {\n      const onListen = async () => {\n        try {\n          await this.postListen();\n\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      const listenSocket = this.config.get('server.socket');\n\n      if (listenSocket) {\n        this.server.listen(listenSocket, onListen);\n      } else {\n        const { host, port } = this.config.get('server');\n\n        this.server.listen(port, host, onListen);\n      }\n    });\n  }\n\n  stopWithError(err: unknown, customMessage?: string): never {\n    this.log.debug(`⛔️ Server wasn't able to start properly.`);\n    if (customMessage) {\n      this.log.error(customMessage);\n    }\n\n    this.log.error(err);\n    return this.stop();\n  }\n\n  stop(exitCode = 1): never {\n    this.destroy();\n\n    if (this.config.get('autoReload')) {\n      process.send?.('stop');\n    }\n\n    // Kill process\n    process.exit(exitCode);\n  }\n\n  async load() {\n    await this.register();\n    await this.bootstrap();\n\n    this.isLoaded = true;\n\n    return this;\n  }\n\n  async register() {\n    // @ts-expect-error: init is internal\n    this.ee.init(this.dirs.app.root, this.log);\n\n    for (const provider of providers) {\n      await provider.register?.(this);\n    }\n\n    await this.runPluginsLifecycles(utils.LIFECYCLES.REGISTER);\n    await this.runUserLifecycles(utils.LIFECYCLES.REGISTER);\n\n    // NOTE: Swap type customField for underlying data type\n    utils.convertCustomFieldType(this);\n\n    return this;\n  }\n\n  async bootstrap() {\n    this.configureGlobalProxy();\n\n    const models = [\n      ...utils.transformContentTypesToModels(\n        [...Object.values(this.contentTypes), ...Object.values(this.components)],\n        this.db.metadata.identifiers\n      ),\n      ...this.get('models').get(),\n    ];\n\n    await this.db.init({ models });\n\n    let oldContentTypes;\n    if (await this.db.getSchemaConnection().hasTable(coreStoreModel.tableName)) {\n      oldContentTypes = await this.store.get({\n        type: 'strapi',\n        name: 'content_types',\n        key: 'schema',\n      });\n    }\n\n    await this.hook('strapi::content-types.beforeSync').call({\n      oldContentTypes,\n      contentTypes: this.contentTypes,\n    });\n\n    const status = await this.db.schema.sync();\n\n    // if schemas have changed, run repairs\n    if (status === 'CHANGED') {\n      await this.db.repair.removeOrphanMorphType({ pivot: 'component_type' });\n    }\n\n    if (this.EE) {\n      await utils.ee.checkLicense({ strapi: this });\n    }\n\n    await this.hook('strapi::content-types.afterSync').call({\n      oldContentTypes,\n      contentTypes: this.contentTypes,\n    });\n\n    await this.store.set({\n      type: 'strapi',\n      name: 'content_types',\n      key: 'schema',\n      value: this.contentTypes,\n    });\n\n    await this.server.initMiddlewares();\n    this.server.initRouting();\n\n    await this.contentAPI.permissions.registerActions();\n\n    await this.runPluginsLifecycles(utils.LIFECYCLES.BOOTSTRAP);\n\n    for (const provider of providers) {\n      await provider.bootstrap?.(this);\n    }\n\n    await this.runUserLifecycles(utils.LIFECYCLES.BOOTSTRAP);\n\n    return this;\n  }\n\n  configureGlobalProxy() {\n    const globalProxy = this.config.get('server.proxy.global');\n    const httpProxy = this.config.get('server.proxy.http') || globalProxy;\n    const httpsProxy = this.config.get('server.proxy.https') || globalProxy;\n\n    if (!httpProxy && !httpsProxy) {\n      return;\n    }\n\n    globalAgent.bootstrap();\n\n    if (httpProxy) {\n      this.log.info(`Using HTTP proxy: ${httpProxy}`);\n      (global as any).GLOBAL_AGENT.HTTP_PROXY = httpProxy;\n    }\n\n    if (httpsProxy) {\n      this.log.info(`Using HTTPS proxy: ${httpsProxy}`);\n      (global as any).GLOBAL_AGENT.HTTPS_PROXY = httpsProxy;\n    }\n  }\n\n  async destroy() {\n    this.log.info('Shutting down Strapi');\n    await this.runPluginsLifecycles(utils.LIFECYCLES.DESTROY);\n\n    for (const provider of providers) {\n      await provider.destroy?.(this);\n    }\n\n    await this.runUserLifecycles(utils.LIFECYCLES.DESTROY);\n\n    await this.server.destroy();\n\n    this.eventHub.destroy();\n\n    await this.db?.destroy();\n\n    process.removeAllListeners();\n\n    // @ts-expect-error: Allow clean delete of global.strapi to allow re-instanciation\n    delete global.strapi;\n\n    this.log.info('Strapi has been shut down');\n  }\n\n  async runPluginsLifecycles(lifecycleName: 'register' | 'bootstrap' | 'destroy') {\n    // plugins\n    await this.get('modules')[lifecycleName]();\n  }\n\n  async runUserLifecycles(lifecycleName: 'register' | 'bootstrap' | 'destroy') {\n    // user\n    const userLifecycleFunction = this.app && this.app[lifecycleName];\n    if (isFunction(userLifecycleFunction)) {\n      await userLifecycleFunction({ strapi: this });\n    }\n  }\n\n  getModel(uid: UID.ContentType): Schema.ContentType;\n  getModel(uid: UID.Component): Schema.Component;\n  getModel<TUID extends UID.Schema>(uid: TUID): Schema.ContentType | Schema.Component | undefined {\n    if (uid in this.contentTypes) {\n      return this.contentTypes[uid as UID.ContentType];\n    }\n\n    if (uid in this.components) {\n      return this.components[uid as UID.Component];\n    }\n  }\n\n  /**\n   * @deprecated Use `strapi.db.query` instead\n   */\n  query(uid: UID.Schema) {\n    return this.db.query(uid);\n  }\n}\n\nexport interface StrapiOptions {\n  appDir: string;\n  distDir: string;\n  autoReload?: boolean;\n  serveAdminPanel?: boolean;\n}\n\nexport default Strapi;\n"],"names":["utils.ee","createAuth","utils.createStartupLogger","utils.createStrapiFetch","requestContext","factories.isCustomController","isInitialized","utils.openBrowser","utils.isInitialized","utils.LIFECYCLES","utils.convertCustomFieldType","utils.transformContentTypesToModels"],"mappings":"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"}
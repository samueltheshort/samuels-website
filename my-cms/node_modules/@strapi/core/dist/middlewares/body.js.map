{"version":3,"file":"body.js","sources":["../../src/middlewares/body.ts"],"sourcesContent":["import fse from 'fs-extra';\nimport { defaultsDeep } from 'lodash/fp';\nimport body, { KoaBodyMiddlewareOptions } from 'koa-body';\nimport mime from 'mime-types';\nimport type Koa from 'koa';\nimport type { Core } from '@strapi/types';\n\nexport type Config = KoaBodyMiddlewareOptions;\n\nconst defaults = {\n  multipart: true,\n  patchKoa: true,\n};\n\nfunction ensureFileMimeType(file: any): void {\n  if (!file.type) {\n    file.type = mime.lookup(file.name) || 'application/octet-stream';\n  }\n}\n\nfunction getFiles(ctx: Koa.Context) {\n  return ctx?.request?.files?.files;\n}\n\nconst bodyMiddleware: Core.MiddlewareFactory<Config> = (config, { strapi }) => {\n  const bodyConfig: Config = defaultsDeep(defaults, config);\n\n  let gqlEndpoint: string | undefined;\n  if (strapi.plugin('graphql')) {\n    const { config: gqlConfig } = strapi.plugin('graphql');\n    gqlEndpoint = gqlConfig('endpoint');\n  }\n\n  return async (ctx, next) => {\n    // TODO: find a better way later\n    if (gqlEndpoint && ctx.url === gqlEndpoint) {\n      await next();\n    } else {\n      try {\n        await body(bodyConfig)(ctx, async () => {});\n\n        const files = getFiles(ctx);\n\n        /**\n         * in case the mime-type wasn't sent, Strapi tries to guess it\n         * from the file extension, to avoid a corrupt database state\n         */\n        if (files) {\n          if (Array.isArray(files)) {\n            files.forEach(ensureFileMimeType);\n          } else {\n            ensureFileMimeType(files);\n          }\n        }\n\n        await next();\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message &&\n          error.message.includes('maxFileSize exceeded')\n        ) {\n          return ctx.payloadTooLarge('FileTooBig');\n        }\n\n        throw error;\n      }\n    }\n\n    const files = getFiles(ctx);\n\n    // clean any file that was uploaded\n    if (files) {\n      if (Array.isArray(files)) {\n        // not awaiting to not slow the request\n        Promise.all(files.map((file) => fse.remove(file.filepath)));\n      } else if (files && files.filepath) {\n        // not awaiting to not slow the request\n        fse.remove(files.filepath);\n      }\n      delete ctx.request.files;\n    }\n  };\n};\n\nexport { bodyMiddleware as body };\n"],"names":["mime","defaultsDeep","body","files","fse"],"mappings":";;;;;;;;;;AASA,MAAM,WAAW;AAAA,EACf,WAAW;AAAA,EACX,UAAU;AACZ;AAEA,SAAS,mBAAmB,MAAiB;AACvC,MAAA,CAAC,KAAK,MAAM;AACd,SAAK,OAAOA,cAAA,QAAK,OAAO,KAAK,IAAI,KAAK;AAAA,EAAA;AAE1C;AAEA,SAAS,SAAS,KAAkB;AAC3B,SAAA,KAAK,SAAS,OAAO;AAC9B;AAEA,MAAM,iBAAiD,CAAC,QAAQ,EAAE,aAAa;AACvE,QAAA,aAAqBC,GAAAA,aAAa,UAAU,MAAM;AAEpD,MAAA;AACA,MAAA,OAAO,OAAO,SAAS,GAAG;AAC5B,UAAM,EAAE,QAAQ,UAAA,IAAc,OAAO,OAAO,SAAS;AACrD,kBAAc,UAAU,UAAU;AAAA,EAAA;AAG7B,SAAA,OAAO,KAAK,SAAS;AAEtB,QAAA,eAAe,IAAI,QAAQ,aAAa;AAC1C,YAAM,KAAK;AAAA,IAAA,OACN;AACD,UAAA;AACF,cAAMC,sBAAK,UAAU,EAAE,KAAK,YAAY;AAAA,QAAA,CAAE;AAEpCC,cAAAA,SAAQ,SAAS,GAAG;AAM1B,YAAIA,QAAO;AACL,cAAA,MAAM,QAAQA,MAAK,GAAG;AACxBA,mBAAM,QAAQ,kBAAkB;AAAA,UAAA,OAC3B;AACL,+BAAmBA,MAAK;AAAA,UAAA;AAAA,QAC1B;AAGF,cAAM,KAAK;AAAA,eACJ,OAAO;AAEZ,YAAA,iBAAiB,SACjB,MAAM,WACN,MAAM,QAAQ,SAAS,sBAAsB,GAC7C;AACO,iBAAA,IAAI,gBAAgB,YAAY;AAAA,QAAA;AAGnC,cAAA;AAAA,MAAA;AAAA,IACR;AAGI,UAAA,QAAQ,SAAS,GAAG;AAG1B,QAAI,OAAO;AACL,UAAA,MAAM,QAAQ,KAAK,GAAG;AAEhB,gBAAA,IAAI,MAAM,IAAI,CAAC,SAASC,qBAAI,OAAO,KAAK,QAAQ,CAAC,CAAC;AAAA,MAAA,WACjD,SAAS,MAAM,UAAU;AAE9BA,6BAAA,OAAO,MAAM,QAAQ;AAAA,MAAA;AAE3B,aAAO,IAAI,QAAQ;AAAA,IAAA;AAAA,EAEvB;AACF;;"}
{"version":3,"file":"collection-type.mjs","sources":["../../../src/core-api/service/collection-type.ts"],"sourcesContent":["import type { Core, Struct, Modules } from '@strapi/types';\n\nimport {\n  getPaginationInfo,\n  shouldCount,\n  isPagedPagination,\n  transformPaginationResponse,\n} from './pagination';\n\nimport { CoreService } from './core-service';\n\nexport class CollectionTypeService\n  extends CoreService\n  implements Core.CoreAPI.Service.CollectionType\n{\n  private contentType: Struct.CollectionTypeSchema;\n\n  constructor(contentType: Struct.CollectionTypeSchema) {\n    super();\n\n    this.contentType = contentType;\n  }\n\n  async find(params = {}) {\n    const { uid } = this.contentType;\n\n    const fetchParams = this.getFetchParams(params);\n\n    const paginationInfo = getPaginationInfo(fetchParams);\n    const isPaged = isPagedPagination(fetchParams.pagination);\n\n    const results = await strapi.documents(uid).findMany({\n      ...fetchParams,\n      ...paginationInfo,\n    });\n\n    if (shouldCount(fetchParams)) {\n      const count = await strapi.documents(uid).count({ ...fetchParams, ...paginationInfo });\n\n      if (typeof count !== 'number') {\n        throw new Error('Count should be a number');\n      }\n\n      return {\n        results,\n        pagination: transformPaginationResponse(paginationInfo, count, isPaged),\n      };\n    }\n\n    return {\n      results,\n      pagination: transformPaginationResponse(paginationInfo, undefined, isPaged),\n    };\n  }\n\n  findOne(documentId: Modules.Documents.ID, params = {}) {\n    const { uid } = this.contentType;\n\n    return strapi.documents(uid).findOne({\n      ...this.getFetchParams(params),\n      documentId,\n    });\n  }\n\n  async create(params = { data: {} }) {\n    const { uid } = this.contentType;\n\n    return strapi.documents(uid).create(this.getFetchParams(params));\n  }\n\n  update(documentId: Modules.Documents.ID, params = { data: {} }) {\n    const { uid } = this.contentType;\n\n    return strapi.documents(uid).update({\n      ...this.getFetchParams(params),\n      documentId,\n    });\n  }\n\n  async delete(documentId: Modules.Documents.ID, params = {}) {\n    const { uid } = this.contentType;\n\n    const { entries } = await strapi.documents(uid).delete({\n      ...this.getFetchParams(params),\n      documentId,\n    });\n\n    return { deletedEntries: entries.length };\n  }\n}\n\n/**\n *\n * Returns a collection type service to handle default core-api actions\n */\n\nconst createCollectionTypeService = (\n  contentType: Struct.CollectionTypeSchema\n): Core.CoreAPI.Service.CollectionType => {\n  return new CollectionTypeService(contentType);\n};\n\nexport { createCollectionTypeService };\n"],"names":[],"mappings":";;AAWO,MAAM,8BACH,YAEV;AAAA,EACU;AAAA,EAER,YAAY,aAA0C;AAC9C,UAAA;AAEN,SAAK,cAAc;AAAA,EAAA;AAAA,EAGrB,MAAM,KAAK,SAAS,IAAI;AAChB,UAAA,EAAE,QAAQ,KAAK;AAEf,UAAA,cAAc,KAAK,eAAe,MAAM;AAExC,UAAA,iBAAiB,kBAAkB,WAAW;AAC9C,UAAA,UAAU,kBAAkB,YAAY,UAAU;AAExD,UAAM,UAAU,MAAM,OAAO,UAAU,GAAG,EAAE,SAAS;AAAA,MACnD,GAAG;AAAA,MACH,GAAG;AAAA,IAAA,CACJ;AAEG,QAAA,YAAY,WAAW,GAAG;AAC5B,YAAM,QAAQ,MAAM,OAAO,UAAU,GAAG,EAAE,MAAM,EAAE,GAAG,aAAa,GAAG,gBAAgB;AAEjF,UAAA,OAAO,UAAU,UAAU;AACvB,cAAA,IAAI,MAAM,0BAA0B;AAAA,MAAA;AAGrC,aAAA;AAAA,QACL;AAAA,QACA,YAAY,4BAA4B,gBAAgB,OAAO,OAAO;AAAA,MACxE;AAAA,IAAA;AAGK,WAAA;AAAA,MACL;AAAA,MACA,YAAY,4BAA4B,gBAAgB,QAAW,OAAO;AAAA,IAC5E;AAAA,EAAA;AAAA,EAGF,QAAQ,YAAkC,SAAS,IAAI;AAC/C,UAAA,EAAE,QAAQ,KAAK;AAErB,WAAO,OAAO,UAAU,GAAG,EAAE,QAAQ;AAAA,MACnC,GAAG,KAAK,eAAe,MAAM;AAAA,MAC7B;AAAA,IAAA,CACD;AAAA,EAAA;AAAA,EAGH,MAAM,OAAO,SAAS,EAAE,MAAM,MAAM;AAC5B,UAAA,EAAE,QAAQ,KAAK;AAEd,WAAA,OAAO,UAAU,GAAG,EAAE,OAAO,KAAK,eAAe,MAAM,CAAC;AAAA,EAAA;AAAA,EAGjE,OAAO,YAAkC,SAAS,EAAE,MAAM,MAAM;AACxD,UAAA,EAAE,QAAQ,KAAK;AAErB,WAAO,OAAO,UAAU,GAAG,EAAE,OAAO;AAAA,MAClC,GAAG,KAAK,eAAe,MAAM;AAAA,MAC7B;AAAA,IAAA,CACD;AAAA,EAAA;AAAA,EAGH,MAAM,OAAO,YAAkC,SAAS,IAAI;AACpD,UAAA,EAAE,QAAQ,KAAK;AAEf,UAAA,EAAE,YAAY,MAAM,OAAO,UAAU,GAAG,EAAE,OAAO;AAAA,MACrD,GAAG,KAAK,eAAe,MAAM;AAAA,MAC7B;AAAA,IAAA,CACD;AAEM,WAAA,EAAE,gBAAgB,QAAQ,OAAO;AAAA,EAAA;AAE5C;AAOM,MAAA,8BAA8B,CAClC,gBACwC;AACjC,SAAA,IAAI,sBAAsB,WAAW;AAC9C;"}
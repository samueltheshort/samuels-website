{"version":3,"file":"single-type.js","sources":["../../../src/core-api/controller/single-type.ts"],"sourcesContent":["import { isObject } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\nimport type { Struct, Core, Utils, UID } from '@strapi/types';\n\ninterface Options {\n  contentType: Struct.SingleTypeSchema;\n}\n\n/**\n * Returns a single type controller to handle default core-api actions\n */\nconst createSingleTypeController = ({\n  contentType,\n}: Options): Utils.PartialWithThis<Core.CoreAPI.Controller.SingleType> => {\n  const uid = contentType.uid as UID.Service;\n\n  // TODO: transform into a class\n  return {\n    /**\n     * Retrieve single type content\n     *\n     */\n    async find(ctx) {\n      await this.validateQuery(ctx);\n      const sanitizedQuery = await this.sanitizeQuery(ctx);\n\n      const entity = await strapi.service(uid).find(sanitizedQuery);\n\n      const sanitizedEntity = await this.sanitizeOutput(entity, ctx);\n\n      return this.transformResponse(sanitizedEntity);\n    },\n\n    /**\n     * create or update single type content.\n     */\n    async update(ctx) {\n      const { query, body = {} as any } = ctx.request;\n\n      if (!isObject(body.data)) {\n        throw new errors.ValidationError('Missing \"data\" payload in the request body');\n      }\n\n      await this.validateInput(body.data, ctx);\n\n      const sanitizedInputData = await this.sanitizeInput(body.data, ctx);\n\n      const entity = await strapi.service(uid).createOrUpdate({\n        ...query,\n        data: sanitizedInputData,\n      });\n\n      const sanitizedEntity = await this.sanitizeOutput(entity, ctx);\n\n      return this.transformResponse(sanitizedEntity);\n    },\n\n    async delete(ctx) {\n      const { query } = ctx;\n\n      await strapi.service(uid).delete(query);\n\n      ctx.status = 204;\n    },\n  };\n};\n\nexport { createSingleTypeController };\n"],"names":["isObject","errors"],"mappings":";;;;AAWA,MAAM,6BAA6B,CAAC;AAAA,EAClC;AACF,MAA0E;AACxE,QAAM,MAAM,YAAY;AAGjB,SAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKL,MAAM,KAAK,KAAK;AACR,YAAA,KAAK,cAAc,GAAG;AAC5B,YAAM,iBAAiB,MAAM,KAAK,cAAc,GAAG;AAEnD,YAAM,SAAS,MAAM,OAAO,QAAQ,GAAG,EAAE,KAAK,cAAc;AAE5D,YAAM,kBAAkB,MAAM,KAAK,eAAe,QAAQ,GAAG;AAEtD,aAAA,KAAK,kBAAkB,eAAe;AAAA,IAC/C;AAAA;AAAA;AAAA;AAAA,IAKA,MAAM,OAAO,KAAK;AAChB,YAAM,EAAE,OAAO,OAAO,CAAA,MAAc,IAAI;AAExC,UAAI,CAACA,GAAA,SAAS,KAAK,IAAI,GAAG;AAClB,cAAA,IAAIC,YAAAA,OAAO,gBAAgB,4CAA4C;AAAA,MAAA;AAG/E,YAAM,KAAK,cAAc,KAAK,MAAM,GAAG;AAEvC,YAAM,qBAAqB,MAAM,KAAK,cAAc,KAAK,MAAM,GAAG;AAElE,YAAM,SAAS,MAAM,OAAO,QAAQ,GAAG,EAAE,eAAe;AAAA,QACtD,GAAG;AAAA,QACH,MAAM;AAAA,MAAA,CACP;AAED,YAAM,kBAAkB,MAAM,KAAK,eAAe,QAAQ,GAAG;AAEtD,aAAA,KAAK,kBAAkB,eAAe;AAAA,IAC/C;AAAA,IAEA,MAAM,OAAO,KAAK;AACV,YAAA,EAAE,UAAU;AAElB,YAAM,OAAO,QAAQ,GAAG,EAAE,OAAO,KAAK;AAEtC,UAAI,SAAS;AAAA,IAAA;AAAA,EAEjB;AACF;;"}
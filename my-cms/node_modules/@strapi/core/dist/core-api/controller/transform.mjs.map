{"version":3,"file":"transform.mjs","sources":["../../../src/core-api/controller/transform.ts"],"sourcesContent":["import { isNil, isPlainObject } from 'lodash/fp';\nimport type { UID, Struct, Data } from '@strapi/types';\n\ntype TransformedEntry = {\n  id: string;\n  documentId?: Data.DocumentID | null;\n  attributes: Record<string, unknown>;\n};\n\ntype TransformedComponent = {\n  id: string;\n  [key: string]: unknown;\n};\n\ntype Entry = {\n  id: string;\n  documentId: Data.DocumentID | null;\n  [key: string]: Entry | Entry[] | string | number | null | boolean | Date;\n};\n\nfunction isEntry(property: unknown): property is Entry | Entry[] {\n  return property === null || isPlainObject(property) || Array.isArray(property);\n}\n\nfunction isDZEntries(property: unknown): property is (Entry & { __component: UID.Component })[] {\n  return Array.isArray(property);\n}\n\ninterface TransformOptions {\n  contentType?: Struct.ContentTypeSchema | Struct.ComponentSchema;\n  /**\n   * @deprecated this option is deprecated and will be removed in the next major version\n   */\n  useJsonAPIFormat?: boolean;\n}\n\nconst transformResponse = (\n  resource: any,\n  meta: unknown = {},\n  opts: TransformOptions = {\n    useJsonAPIFormat: false,\n  }\n) => {\n  if (isNil(resource)) {\n    return resource;\n  }\n\n  if (!isPlainObject(resource) && !Array.isArray(resource)) {\n    throw new Error('Entry must be an object or an array of objects');\n  }\n\n  return {\n    data: opts.useJsonAPIFormat ? transformEntry(resource, opts?.contentType) : resource,\n    meta,\n  };\n};\n\nfunction transformComponent<T extends Entry | Entry[] | null>(\n  data: T,\n  component: Struct.ComponentSchema\n): T extends Entry[] ? TransformedComponent[] : T extends Entry ? TransformedComponent : null;\nfunction transformComponent(\n  data: Entry | Entry[] | null,\n  component: Struct.ComponentSchema\n): TransformedComponent | TransformedComponent[] | null {\n  if (Array.isArray(data)) {\n    return data.map((datum) => transformComponent(datum, component));\n  }\n\n  const res = transformEntry(data, component);\n\n  if (isNil(res)) {\n    return res;\n  }\n\n  const { id, attributes } = res;\n  return { id, ...attributes };\n}\n\nfunction transformEntry<T extends Entry | Entry[] | null>(\n  entry: T,\n  type?: Struct.Schema\n): T extends Entry[] ? TransformedEntry[] : T extends Entry ? TransformedEntry : null;\nfunction transformEntry(\n  entry: Entry | Entry[] | null,\n  type?: Struct.Schema\n): TransformedEntry | TransformedEntry[] | null {\n  if (isNil(entry)) {\n    return entry;\n  }\n\n  if (Array.isArray(entry)) {\n    return entry.map((singleEntry) => transformEntry(singleEntry, type));\n  }\n\n  if (!isPlainObject(entry)) {\n    throw new Error('Entry must be an object');\n  }\n\n  const { id, documentId, ...properties } = entry;\n\n  const attributeValues: Record<string, unknown> = {};\n\n  for (const key of Object.keys(properties)) {\n    const property = properties[key];\n    const attribute = type && type.attributes[key];\n\n    if (attribute && attribute.type === 'relation' && isEntry(property) && 'target' in attribute) {\n      const data = transformEntry(property, strapi.contentType(attribute.target));\n\n      attributeValues[key] = { data };\n    } else if (attribute && attribute.type === 'component' && isEntry(property)) {\n      attributeValues[key] = transformComponent(property, strapi.components[attribute.component]);\n    } else if (attribute && attribute.type === 'dynamiczone' && isDZEntries(property)) {\n      if (isNil(property)) {\n        attributeValues[key] = property;\n      }\n\n      attributeValues[key] = property.map((subProperty) => {\n        return transformComponent(subProperty, strapi.components[subProperty.__component]);\n      });\n    } else if (attribute && attribute.type === 'media' && isEntry(property)) {\n      const data = transformEntry(property, strapi.contentType('plugin::upload.file'));\n\n      attributeValues[key] = { data };\n    } else {\n      attributeValues[key] = property;\n    }\n  }\n\n  return {\n    id,\n    documentId,\n    attributes: attributeValues,\n  };\n}\n\nexport { transformResponse };\n"],"names":[],"mappings":";AAoBA,SAAS,QAAQ,UAAgD;AAC/D,SAAO,aAAa,QAAQ,cAAc,QAAQ,KAAK,MAAM,QAAQ,QAAQ;AAC/E;AAEA,SAAS,YAAY,UAA2E;AACvF,SAAA,MAAM,QAAQ,QAAQ;AAC/B;AAUA,MAAM,oBAAoB,CACxB,UACA,OAAgB,CAAA,GAChB,OAAyB;AAAA,EACvB,kBAAkB;AACpB,MACG;AACC,MAAA,MAAM,QAAQ,GAAG;AACZ,WAAA;AAAA,EAAA;AAGL,MAAA,CAAC,cAAc,QAAQ,KAAK,CAAC,MAAM,QAAQ,QAAQ,GAAG;AAClD,UAAA,IAAI,MAAM,gDAAgD;AAAA,EAAA;AAG3D,SAAA;AAAA,IACL,MAAM,KAAK,mBAAmB,eAAe,UAAU,MAAM,WAAW,IAAI;AAAA,IAC5E;AAAA,EACF;AACF;AAMA,SAAS,mBACP,MACA,WACsD;AAClD,MAAA,MAAM,QAAQ,IAAI,GAAG;AACvB,WAAO,KAAK,IAAI,CAAC,UAAU,mBAAmB,OAAO,SAAS,CAAC;AAAA,EAAA;AAG3D,QAAA,MAAM,eAAe,MAAM,SAAS;AAEtC,MAAA,MAAM,GAAG,GAAG;AACP,WAAA;AAAA,EAAA;AAGH,QAAA,EAAE,IAAI,WAAA,IAAe;AACpB,SAAA,EAAE,IAAI,GAAG,WAAW;AAC7B;AAMA,SAAS,eACP,OACA,MAC8C;AAC1C,MAAA,MAAM,KAAK,GAAG;AACT,WAAA;AAAA,EAAA;AAGL,MAAA,MAAM,QAAQ,KAAK,GAAG;AACxB,WAAO,MAAM,IAAI,CAAC,gBAAgB,eAAe,aAAa,IAAI,CAAC;AAAA,EAAA;AAGjE,MAAA,CAAC,cAAc,KAAK,GAAG;AACnB,UAAA,IAAI,MAAM,yBAAyB;AAAA,EAAA;AAG3C,QAAM,EAAE,IAAI,YAAY,GAAG,WAAe,IAAA;AAE1C,QAAM,kBAA2C,CAAC;AAElD,aAAW,OAAO,OAAO,KAAK,UAAU,GAAG;AACnC,UAAA,WAAW,WAAW,GAAG;AAC/B,UAAM,YAAY,QAAQ,KAAK,WAAW,GAAG;AAEzC,QAAA,aAAa,UAAU,SAAS,cAAc,QAAQ,QAAQ,KAAK,YAAY,WAAW;AAC5F,YAAM,OAAO,eAAe,UAAU,OAAO,YAAY,UAAU,MAAM,CAAC;AAE1D,sBAAA,GAAG,IAAI,EAAE,KAAK;AAAA,IAAA,WACrB,aAAa,UAAU,SAAS,eAAe,QAAQ,QAAQ,GAAG;AAC3D,sBAAA,GAAG,IAAI,mBAAmB,UAAU,OAAO,WAAW,UAAU,SAAS,CAAC;AAAA,IAAA,WACjF,aAAa,UAAU,SAAS,iBAAiB,YAAY,QAAQ,GAAG;AAC7E,UAAA,MAAM,QAAQ,GAAG;AACnB,wBAAgB,GAAG,IAAI;AAAA,MAAA;AAGzB,sBAAgB,GAAG,IAAI,SAAS,IAAI,CAAC,gBAAgB;AACnD,eAAO,mBAAmB,aAAa,OAAO,WAAW,YAAY,WAAW,CAAC;AAAA,MAAA,CAClF;AAAA,IAAA,WACQ,aAAa,UAAU,SAAS,WAAW,QAAQ,QAAQ,GAAG;AACvE,YAAM,OAAO,eAAe,UAAU,OAAO,YAAY,qBAAqB,CAAC;AAE/D,sBAAA,GAAG,IAAI,EAAE,KAAK;AAAA,IAAA,OACzB;AACL,sBAAgB,GAAG,IAAI;AAAA,IAAA;AAAA,EACzB;AAGK,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA,YAAY;AAAA,EACd;AACF;"}
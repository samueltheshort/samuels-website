import * as globalAgent from "global-agent";
import path from "path";
import _ from "lodash";
import { isFunction } from "lodash/fp";
import { createLogger } from "@strapi/logger";
import { Database } from "@strapi/database";
import tsUtils from "@strapi/typescript-utils";
import { loadConfiguration } from "./configuration/index.mjs";
import { isCustomController } from "./factories.mjs";
import { openBrowser } from "./utils/open-browser.mjs";
import { isInitialized } from "./utils/is-initialized.mjs";
import index from "./ee/index.mjs";
import "./utils/update-notifier/index.mjs";
import { createStrapiFetch } from "./utils/fetch.mjs";
import { convertCustomFieldType } from "./utils/convert-custom-field-type.mjs";
import { createStartupLogger } from "./utils/startup-logger.mjs";
import { transformContentTypesToModels } from "./utils/transform-content-types-to-models.mjs";
import { LIFECYCLES } from "./utils/lifecycles.mjs";
import "node:path";
import { Container } from "./container.mjs";
import createStrapiFs from "./services/fs.mjs";
import createEventHub from "./services/event-hub.mjs";
import { createServer } from "./services/server/index.mjs";
import { createReloader } from "./services/reloader.mjs";
import { providers } from "./providers/index.mjs";
import createEntityService from "./services/entity-service/index.mjs";
import createQueryParamService from "./services/query-params.mjs";
import entityValidator from "./services/entity-validator/index.mjs";
import requestCtx from "./services/request-context.mjs";
import createAuthentication from "./services/auth/index.mjs";
import createCustomFields from "./services/custom-fields.mjs";
import createContentAPI from "./services/content-api/index.mjs";
import getNumberOfDynamicZones from "./services/utils/dynamic-zones.mjs";
import { createFeaturesService } from "./services/features.mjs";
import { createDocumentService } from "./services/document-service/index.mjs";
import { coreStoreModel } from "./services/core-store.mjs";
import { createConfigProvider } from "./services/config.mjs";
class Strapi extends Container {
  app;
  isLoaded = false;
  internal_config = {};
  constructor(opts) {
    super();
    this.internal_config = loadConfiguration(opts);
    this.registerInternalServices();
    for (const provider of providers) {
      provider.init?.(this);
    }
  }
  get admin() {
    return this.get("admin");
  }
  get EE() {
    return index.isEE;
  }
  get ee() {
    return index;
  }
  get dirs() {
    return this.config.get("dirs");
  }
  get reload() {
    return this.get("reload");
  }
  get db() {
    return this.get("db");
  }
  get requestContext() {
    return this.get("requestContext");
  }
  get customFields() {
    return this.get("customFields");
  }
  get entityValidator() {
    return this.get("entityValidator");
  }
  /**
   * @deprecated `strapi.entityService` will be removed in the next major version
   */
  get entityService() {
    return this.get("entityService");
  }
  get documents() {
    return this.get("documents");
  }
  get features() {
    return this.get("features");
  }
  get fetch() {
    return this.get("fetch");
  }
  get cron() {
    return this.get("cron");
  }
  get log() {
    return this.get("logger");
  }
  get startupLogger() {
    return this.get("startupLogger");
  }
  get eventHub() {
    return this.get("eventHub");
  }
  get fs() {
    return this.get("fs");
  }
  get server() {
    return this.get("server");
  }
  get telemetry() {
    return this.get("telemetry");
  }
  get store() {
    return this.get("coreStore");
  }
  get config() {
    return this.get("config");
  }
  get services() {
    return this.get("services").getAll();
  }
  service(uid) {
    return this.get("services").get(uid);
  }
  get controllers() {
    return this.get("controllers").getAll();
  }
  controller(uid) {
    return this.get("controllers").get(uid);
  }
  get contentTypes() {
    return this.get("content-types").getAll();
  }
  contentType(name) {
    return this.get("content-types").get(name);
  }
  get components() {
    return this.get("components").getAll();
  }
  get policies() {
    return this.get("policies").getAll();
  }
  policy(name) {
    return this.get("policies").get(name);
  }
  get middlewares() {
    return this.get("middlewares").getAll();
  }
  middleware(name) {
    return this.get("middlewares").get(name);
  }
  get plugins() {
    return this.get("plugins").getAll();
  }
  plugin(name) {
    return this.get("plugins").get(name);
  }
  get hooks() {
    return this.get("hooks").getAll();
  }
  hook(name) {
    return this.get("hooks").get(name);
  }
  get apis() {
    return this.get("apis").getAll();
  }
  api(name) {
    return this.get("apis").get(name);
  }
  get auth() {
    return this.get("auth");
  }
  get contentAPI() {
    return this.get("content-api");
  }
  get sanitizers() {
    return this.get("sanitizers");
  }
  get validators() {
    return this.get("validators");
  }
  async start() {
    try {
      if (!this.isLoaded) {
        await this.load();
      }
      await this.listen();
      return this;
    } catch (error) {
      return this.stopWithError(error);
    }
  }
  // TODO: split into more providers
  registerInternalServices() {
    const config = createConfigProvider(this.internal_config, this);
    const logger = createLogger({
      level: "http",
      // Strapi defaults to level 'http'
      ...config.get("logger"),
      // DEPRECATED
      ...config.get("server.logger.config")
    });
    this.add("config", () => config).add("query-params", createQueryParamService(this)).add("content-api", createContentAPI(this)).add("auth", createAuthentication()).add("server", () => createServer(this)).add("fs", () => createStrapiFs(this)).add("eventHub", () => createEventHub()).add("startupLogger", () => createStartupLogger(this)).add("logger", () => logger).add("fetch", () => createStrapiFetch(this)).add("features", () => createFeaturesService(this)).add("requestContext", requestCtx).add("customFields", createCustomFields(this)).add("entityValidator", entityValidator).add("entityService", () => createEntityService({ strapi: this, db: this.db })).add("documents", () => createDocumentService(this)).add("db", () => {
      const tsDir = tsUtils.resolveOutDirSync(this.dirs.app.root);
      const tsMigrationsEnabled = this.config.get("database.settings.useTypescriptMigrations") === true && tsDir;
      const projectDir = tsMigrationsEnabled ? tsDir : this.dirs.app.root;
      return new Database(
        _.merge(this.config.get("database"), {
          logger,
          settings: {
            migrations: {
              dir: path.join(projectDir, "database/migrations")
            }
          }
        })
      );
    }).add("reload", () => createReloader(this));
  }
  sendStartupTelemetry() {
    this.telemetry.send("didStartServer", {
      groupProperties: {
        database: this.config.get("database.connection.client"),
        plugins: Object.keys(this.plugins),
        numberOfAllContentTypes: _.size(this.contentTypes),
        // TODO: V5: This event should be renamed numberOfContentTypes in V5 as the name is already taken to describe the number of content types using i18n.
        numberOfComponents: _.size(this.components),
        numberOfDynamicZones: getNumberOfDynamicZones(),
        numberOfCustomControllers: Object.values(this.controllers).filter(
          // TODO: Fix this at the content API loader level to prevent future types issues
          (controller) => controller !== void 0 && isCustomController(controller)
        ).length,
        environment: this.config.environment
        // TODO: to add back
        // providers: this.config.installedProviders,
      }
    }).catch(this.log.error);
  }
  async openAdmin({ isInitialized: isInitialized2 }) {
    const shouldOpenAdmin = this.config.get("environment") === "development" && this.config.get("admin.autoOpen", true) !== false;
    if (shouldOpenAdmin && !isInitialized2) {
      try {
        await openBrowser(this.config);
        this.telemetry.send("didOpenTab");
      } catch (e) {
        this.telemetry.send("didNotOpenTab");
      }
    }
  }
  async postListen() {
    const isInitialized$1 = await isInitialized(this);
    this.startupLogger.logStartupMessage({ isInitialized: isInitialized$1 });
    this.log.info("Strapi started successfully");
    this.sendStartupTelemetry();
    this.openAdmin({ isInitialized: isInitialized$1 });
  }
  /**
   * Add behaviors to the server
   */
  async listen() {
    return new Promise((resolve, reject) => {
      const onListen = async () => {
        try {
          await this.postListen();
          resolve();
        } catch (error) {
          reject(error);
        }
      };
      const listenSocket = this.config.get("server.socket");
      if (listenSocket) {
        this.server.listen(listenSocket, onListen);
      } else {
        const { host, port } = this.config.get("server");
        this.server.listen(port, host, onListen);
      }
    });
  }
  stopWithError(err, customMessage) {
    this.log.debug(`⛔️ Server wasn't able to start properly.`);
    if (customMessage) {
      this.log.error(customMessage);
    }
    this.log.error(err);
    return this.stop();
  }
  stop(exitCode = 1) {
    this.destroy();
    if (this.config.get("autoReload")) {
      process.send?.("stop");
    }
    process.exit(exitCode);
  }
  async load() {
    await this.register();
    await this.bootstrap();
    this.isLoaded = true;
    return this;
  }
  async register() {
    this.ee.init(this.dirs.app.root, this.log);
    for (const provider of providers) {
      await provider.register?.(this);
    }
    await this.runPluginsLifecycles(LIFECYCLES.REGISTER);
    await this.runUserLifecycles(LIFECYCLES.REGISTER);
    convertCustomFieldType(this);
    return this;
  }
  async bootstrap() {
    this.configureGlobalProxy();
    const models = [
      ...transformContentTypesToModels(
        [...Object.values(this.contentTypes), ...Object.values(this.components)],
        this.db.metadata.identifiers
      ),
      ...this.get("models").get()
    ];
    await this.db.init({ models });
    let oldContentTypes;
    if (await this.db.getSchemaConnection().hasTable(coreStoreModel.tableName)) {
      oldContentTypes = await this.store.get({
        type: "strapi",
        name: "content_types",
        key: "schema"
      });
    }
    await this.hook("strapi::content-types.beforeSync").call({
      oldContentTypes,
      contentTypes: this.contentTypes
    });
    const status = await this.db.schema.sync();
    if (status === "CHANGED") {
      await this.db.repair.removeOrphanMorphType({ pivot: "component_type" });
    }
    if (this.EE) {
      await index.checkLicense({ strapi: this });
    }
    await this.hook("strapi::content-types.afterSync").call({
      oldContentTypes,
      contentTypes: this.contentTypes
    });
    await this.store.set({
      type: "strapi",
      name: "content_types",
      key: "schema",
      value: this.contentTypes
    });
    await this.server.initMiddlewares();
    this.server.initRouting();
    await this.contentAPI.permissions.registerActions();
    await this.runPluginsLifecycles(LIFECYCLES.BOOTSTRAP);
    for (const provider of providers) {
      await provider.bootstrap?.(this);
    }
    await this.runUserLifecycles(LIFECYCLES.BOOTSTRAP);
    return this;
  }
  configureGlobalProxy() {
    const globalProxy = this.config.get("server.proxy.global");
    const httpProxy = this.config.get("server.proxy.http") || globalProxy;
    const httpsProxy = this.config.get("server.proxy.https") || globalProxy;
    if (!httpProxy && !httpsProxy) {
      return;
    }
    globalAgent.bootstrap();
    if (httpProxy) {
      this.log.info(`Using HTTP proxy: ${httpProxy}`);
      global.GLOBAL_AGENT.HTTP_PROXY = httpProxy;
    }
    if (httpsProxy) {
      this.log.info(`Using HTTPS proxy: ${httpsProxy}`);
      global.GLOBAL_AGENT.HTTPS_PROXY = httpsProxy;
    }
  }
  async destroy() {
    this.log.info("Shutting down Strapi");
    await this.runPluginsLifecycles(LIFECYCLES.DESTROY);
    for (const provider of providers) {
      await provider.destroy?.(this);
    }
    await this.runUserLifecycles(LIFECYCLES.DESTROY);
    await this.server.destroy();
    this.eventHub.destroy();
    await this.db?.destroy();
    process.removeAllListeners();
    delete global.strapi;
    this.log.info("Strapi has been shut down");
  }
  async runPluginsLifecycles(lifecycleName) {
    await this.get("modules")[lifecycleName]();
  }
  async runUserLifecycles(lifecycleName) {
    const userLifecycleFunction = this.app && this.app[lifecycleName];
    if (isFunction(userLifecycleFunction)) {
      await userLifecycleFunction({ strapi: this });
    }
  }
  getModel(uid) {
    if (uid in this.contentTypes) {
      return this.contentTypes[uid];
    }
    if (uid in this.components) {
      return this.components[uid];
    }
  }
  /**
   * @deprecated Use `strapi.db.query` instead
   */
  query(uid) {
    return this.db.query(uid);
  }
}
export {
  Strapi as default
};
//# sourceMappingURL=Strapi.mjs.map

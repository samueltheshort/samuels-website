{"version":3,"file":"components.js","sources":["../../src/registries/components.ts"],"sourcesContent":["import { has } from 'lodash/fp';\nimport type { Struct, UID } from '@strapi/types';\n\nconst componentsRegistry = () => {\n  const components: Record<UID.Component, Struct.ComponentSchema> = {};\n\n  return {\n    /**\n     * Returns this list of registered components uids\n     */\n    keys(): UID.Component[] {\n      return Object.keys(components) as UID.Component[];\n    },\n\n    /**\n     * Returns the instance of a component. Instantiate the component if not already done\n     */\n    get(uid: UID.Component) {\n      return components[uid];\n    },\n\n    /**\n     * Returns a map with all the components in a namespace\n     */\n    getAll() {\n      return components;\n    },\n\n    /**\n     * Registers a component\n     */\n    set(uid: UID.Component, component: Struct.ComponentSchema) {\n      if (has(uid, components)) {\n        throw new Error(`Component ${uid} has already been registered.`);\n      }\n\n      components[uid] = component;\n\n      return this;\n    },\n\n    /**\n     * Registers a map of components for a specific namespace\n     */\n    add(newComponents: Record<UID.Component, Struct.ComponentSchema>) {\n      for (const uid of Object.keys(newComponents) as UID.Component[]) {\n        this.set(uid, newComponents[uid]);\n      }\n    },\n  };\n};\n\nexport default componentsRegistry;\n"],"names":["has"],"mappings":";;AAGA,MAAM,qBAAqB,MAAM;AAC/B,QAAM,aAA4D,CAAC;AAE5D,SAAA;AAAA;AAAA;AAAA;AAAA,IAIL,OAAwB;AACf,aAAA,OAAO,KAAK,UAAU;AAAA,IAC/B;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAAoB;AACtB,aAAO,WAAW,GAAG;AAAA,IACvB;AAAA;AAAA;AAAA;AAAA,IAKA,SAAS;AACA,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,KAAoB,WAAmC;AACrD,UAAAA,GAAA,IAAI,KAAK,UAAU,GAAG;AACxB,cAAM,IAAI,MAAM,aAAa,GAAG,+BAA+B;AAAA,MAAA;AAGjE,iBAAW,GAAG,IAAI;AAEX,aAAA;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,eAA8D;AAChE,iBAAW,OAAO,OAAO,KAAK,aAAa,GAAsB;AAC/D,aAAK,IAAI,KAAK,cAAc,GAAG,CAAC;AAAA,MAAA;AAAA,IAClC;AAAA,EAEJ;AACF;;"}
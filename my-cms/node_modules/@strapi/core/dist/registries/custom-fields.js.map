{"version":3,"file":"custom-fields.js","sources":["../../src/registries/custom-fields.ts"],"sourcesContent":["import { has, isPlainObject } from 'lodash/fp';\n\nimport type { Core, Modules } from '@strapi/types';\n\nconst ALLOWED_TYPES = [\n  'biginteger',\n  'boolean',\n  'date',\n  'datetime',\n  'decimal',\n  'email',\n  'enumeration',\n  'float',\n  'integer',\n  'json',\n  'password',\n  'richtext',\n  'string',\n  'text',\n  'time',\n  'uid',\n] as const;\n\nconst customFieldsRegistry = (strapi: Core.Strapi) => {\n  const customFields: Record<string, unknown> = {};\n\n  return {\n    getAll() {\n      return customFields;\n    },\n    get(customField: string) {\n      const registeredCustomField = customFields[customField];\n      if (!registeredCustomField) {\n        throw new Error(`Could not find Custom Field: ${customField}`);\n      }\n\n      return registeredCustomField;\n    },\n    add(\n      customField:\n        | Modules.CustomFields.CustomFieldServerOptions\n        | Modules.CustomFields.CustomFieldServerOptions[]\n    ) {\n      const customFieldList = Array.isArray(customField) ? customField : [customField];\n\n      for (const cf of customFieldList) {\n        if (!has('name', cf) || !has('type', cf)) {\n          throw new Error(`Custom fields require a 'name' and 'type' key`);\n        }\n\n        const { name, plugin, type, inputSize } = cf;\n        if (!ALLOWED_TYPES.includes(type)) {\n          throw new Error(\n            `Custom field type: '${type}' is not a valid Strapi type or it can't be used with a Custom Field`\n          );\n        }\n\n        const isValidObjectKey = /^(?![0-9])[a-zA-Z0-9$_-]+$/g;\n        if (!isValidObjectKey.test(name)) {\n          throw new Error(`Custom field name: '${name}' is not a valid object key`);\n        }\n\n        // Validate inputSize when provided\n        if (inputSize) {\n          if (\n            !isPlainObject(inputSize) ||\n            !has('default', inputSize) ||\n            !has('isResizable', inputSize)\n          ) {\n            throw new Error(`inputSize should be an object with 'default' and 'isResizable' keys`);\n          }\n          if (![4, 6, 8, 12].includes(inputSize.default)) {\n            throw new Error('Custom fields require a valid default input size');\n          }\n          if (typeof inputSize.isResizable !== 'boolean') {\n            throw new Error('Custom fields should specify if their input is resizable');\n          }\n        }\n\n        // When no plugin is specified, or it isn't found in Strapi, default to global\n        const uid =\n          plugin && strapi.plugin(plugin) ? `plugin::${plugin}.${name}` : `global::${name}`;\n\n        if (has(uid, customFields)) {\n          throw new Error(`Custom field: '${uid}' has already been registered`);\n        }\n\n        customFields[uid] = cf;\n      }\n    },\n  };\n};\n\nexport default customFieldsRegistry;\n"],"names":["has","isPlainObject"],"mappings":";;AAIA,MAAM,gBAAgB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEM,MAAA,uBAAuB,CAAC,WAAwB;AACpD,QAAM,eAAwC,CAAC;AAExC,SAAA;AAAA,IACL,SAAS;AACA,aAAA;AAAA,IACT;AAAA,IACA,IAAI,aAAqB;AACjB,YAAA,wBAAwB,aAAa,WAAW;AACtD,UAAI,CAAC,uBAAuB;AAC1B,cAAM,IAAI,MAAM,gCAAgC,WAAW,EAAE;AAAA,MAAA;AAGxD,aAAA;AAAA,IACT;AAAA,IACA,IACE,aAGA;AACA,YAAM,kBAAkB,MAAM,QAAQ,WAAW,IAAI,cAAc,CAAC,WAAW;AAE/E,iBAAW,MAAM,iBAAiB;AAC5B,YAAA,CAACA,GAAAA,IAAI,QAAQ,EAAE,KAAK,CAACA,OAAI,QAAQ,EAAE,GAAG;AAClC,gBAAA,IAAI,MAAM,+CAA+C;AAAA,QAAA;AAGjE,cAAM,EAAE,MAAM,QAAQ,MAAM,UAAc,IAAA;AAC1C,YAAI,CAAC,cAAc,SAAS,IAAI,GAAG;AACjC,gBAAM,IAAI;AAAA,YACR,uBAAuB,IAAI;AAAA,UAC7B;AAAA,QAAA;AAGF,cAAM,mBAAmB;AACzB,YAAI,CAAC,iBAAiB,KAAK,IAAI,GAAG;AAChC,gBAAM,IAAI,MAAM,uBAAuB,IAAI,6BAA6B;AAAA,QAAA;AAI1E,YAAI,WAAW;AACb,cACE,CAACC,GAAA,cAAc,SAAS,KACxB,CAACD,GAAAA,IAAI,WAAW,SAAS,KACzB,CAACA,GAAAA,IAAI,eAAe,SAAS,GAC7B;AACM,kBAAA,IAAI,MAAM,qEAAqE;AAAA,UAAA;AAEnF,cAAA,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,SAAS,UAAU,OAAO,GAAG;AACxC,kBAAA,IAAI,MAAM,kDAAkD;AAAA,UAAA;AAEhE,cAAA,OAAO,UAAU,gBAAgB,WAAW;AACxC,kBAAA,IAAI,MAAM,0DAA0D;AAAA,UAAA;AAAA,QAC5E;AAIF,cAAM,MACJ,UAAU,OAAO,OAAO,MAAM,IAAI,WAAW,MAAM,IAAI,IAAI,KAAK,WAAW,IAAI;AAE7E,YAAAA,GAAA,IAAI,KAAK,YAAY,GAAG;AAC1B,gBAAM,IAAI,MAAM,kBAAkB,GAAG,+BAA+B;AAAA,QAAA;AAGtE,qBAAa,GAAG,IAAI;AAAA,MAAA;AAAA,IACtB;AAAA,EAEJ;AACF;;"}
{"version":3,"file":"src-index.js","sources":["../../src/loaders/src-index.ts"],"sourcesContent":["import { resolve } from 'path';\nimport { statSync, existsSync } from 'fs';\nimport { yup, importDefault } from '@strapi/utils';\n\nimport type { Core } from '@strapi/types';\n\nconst srcSchema = yup\n  .object()\n  .shape({\n    bootstrap: yup.mixed().isFunction(),\n    register: yup.mixed().isFunction(),\n    destroy: yup.mixed().isFunction(),\n  })\n  .noUnknown();\n\nconst validateSrcIndex = (srcIndex: unknown) => {\n  return srcSchema.validateSync(srcIndex, { strict: true, abortEarly: false });\n};\n\nexport default (strapi: Core.Strapi) => {\n  if (!existsSync(strapi.dirs.dist.src)) {\n    return;\n  }\n\n  const pathToSrcIndex = resolve(strapi.dirs.dist.src, 'index.js');\n  if (!existsSync(pathToSrcIndex) || statSync(pathToSrcIndex).isDirectory()) {\n    return {};\n  }\n\n  const srcIndex = importDefault(pathToSrcIndex);\n\n  try {\n    validateSrcIndex(srcIndex);\n  } catch (e) {\n    if (e instanceof yup.ValidationError) {\n      strapi.stopWithError({ message: `Invalid file \\`./src/index.js\\`: ${e.message}` });\n    }\n\n    throw e;\n  }\n\n  strapi.app = srcIndex;\n};\n"],"names":["yup","existsSync","resolve","statSync","importDefault"],"mappings":";;;;AAMA,MAAM,YAAYA,YAAA,IACf,OAAO,EACP,MAAM;AAAA,EACL,WAAWA,YAAA,IAAI,MAAM,EAAE,WAAW;AAAA,EAClC,UAAUA,YAAA,IAAI,MAAM,EAAE,WAAW;AAAA,EACjC,SAASA,YAAAA,IAAI,MAAM,EAAE,WAAW;AAClC,CAAC,EACA,UAAU;AAEb,MAAM,mBAAmB,CAAC,aAAsB;AACvC,SAAA,UAAU,aAAa,UAAU,EAAE,QAAQ,MAAM,YAAY,OAAO;AAC7E;AAEA,MAAe,eAAA,CAAC,WAAwB;AACtC,MAAI,CAACC,GAAW,WAAA,OAAO,KAAK,KAAK,GAAG,GAAG;AACrC;AAAA,EAAA;AAGF,QAAM,iBAAiBC,KAAAA,QAAQ,OAAO,KAAK,KAAK,KAAK,UAAU;AAC3D,MAAA,CAACD,cAAW,cAAc,KAAKE,YAAS,cAAc,EAAE,eAAe;AACzE,WAAO,CAAC;AAAA,EAAA;AAGJ,QAAA,WAAWC,0BAAc,cAAc;AAEzC,MAAA;AACF,qBAAiB,QAAQ;AAAA,WAClB,GAAG;AACN,QAAA,aAAaJ,gBAAI,iBAAiB;AACpC,aAAO,cAAc,EAAE,SAAS,oCAAoC,EAAE,OAAO,IAAI;AAAA,IAAA;AAG7E,UAAA;AAAA,EAAA;AAGR,SAAO,MAAM;AACf;;"}
{"version":3,"file":"fetch.mjs","sources":["../../src/utils/fetch.ts"],"sourcesContent":["import type { Core, Modules } from '@strapi/types';\nimport { ProxyAgent } from 'undici';\n\n// TODO: once core Node exposes a stable way to create a ProxyAgent we will use that instead of undici\n\n// Create a wrapper for Node's Fetch API that applies a global proxy\nexport const createStrapiFetch = (strapi: Core.Strapi): Modules.Fetch.Fetch => {\n  function strapiFetch(url: RequestInfo | URL, options?: RequestInit) {\n    const fetchOptions = {\n      ...(strapiFetch.dispatcher ? { dispatcher: strapiFetch.dispatcher } : {}),\n      ...options,\n    };\n    strapi.log.debug(`Making request for ${url}`);\n    return fetch(url, fetchOptions);\n  }\n\n  const proxy =\n    strapi.config.get<ConstructorParameters<typeof ProxyAgent>[0]>('server.proxy.fetch') ||\n    strapi.config.get<string>('server.proxy.global');\n\n  if (proxy) {\n    strapi.log.info(`Using proxy for Fetch requests: ${proxy}`);\n    strapiFetch.dispatcher = new ProxyAgent(proxy);\n  }\n\n  return strapiFetch;\n};\n\nexport type Fetch = Modules.Fetch.Fetch;\n"],"names":[],"mappings":";AAMa,MAAA,oBAAoB,CAAC,WAA6C;AACpE,WAAA,YAAY,KAAwB,SAAuB;AAClE,UAAM,eAAe;AAAA,MACnB,GAAI,YAAY,aAAa,EAAE,YAAY,YAAY,WAAA,IAAe,CAAC;AAAA,MACvE,GAAG;AAAA,IACL;AACA,WAAO,IAAI,MAAM,sBAAsB,GAAG,EAAE;AACrC,WAAA,MAAM,KAAK,YAAY;AAAA,EAAA;AAG1B,QAAA,QACJ,OAAO,OAAO,IAAiD,oBAAoB,KACnF,OAAO,OAAO,IAAY,qBAAqB;AAEjD,MAAI,OAAO;AACT,WAAO,IAAI,KAAK,mCAAmC,KAAK,EAAE;AAC9C,gBAAA,aAAa,IAAI,WAAW,KAAK;AAAA,EAAA;AAGxC,SAAA;AACT;"}
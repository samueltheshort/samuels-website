{"version":3,"file":"factories.mjs","sources":["../src/factories.ts"],"sourcesContent":["import { pipe, omit, pick } from 'lodash/fp';\nimport type { Core, UID, Utils } from '@strapi/types';\n\nimport { createController } from './core-api/controller';\nimport { createService } from './core-api/service';\nimport { createRoutes } from './core-api/routes';\n\nconst symbols = {\n  CustomController: Symbol('StrapiCustomCoreController'),\n} as const;\n\ntype WithStrapiCallback<T> = T | (<S extends { strapi: Core.Strapi }>(params: S) => T);\n\nconst createCoreController = <\n  TUID extends UID.ContentType,\n  TController extends Core.CoreAPI.Controller.Extendable<TUID>,\n>(\n  uid: TUID,\n  cfg?: WithStrapiCallback<\n    Utils.PartialWithThis<Core.CoreAPI.Controller.Extendable<TUID> & TController>\n  >\n) => {\n  return ({\n    strapi,\n  }: {\n    strapi: Core.Strapi;\n  }): TController & Core.CoreAPI.Controller.ContentType<TUID> => {\n    const baseController = createController({ contentType: strapi.contentType(uid) });\n\n    const userCtrl = typeof cfg === 'function' ? cfg({ strapi }) : (cfg ?? ({} as any));\n\n    for (const methodName of Object.keys(baseController) as Array<keyof typeof baseController>) {\n      if (userCtrl[methodName] === undefined) {\n        userCtrl[methodName] = baseController[methodName];\n      }\n    }\n\n    Object.setPrototypeOf(userCtrl, baseController);\n\n    const isCustom = typeof cfg !== 'undefined';\n    if (isCustom) {\n      Object.defineProperty(userCtrl, symbols.CustomController, {\n        writable: false,\n        configurable: false,\n        enumerable: false,\n      });\n    }\n\n    return userCtrl;\n  };\n};\n\nfunction createCoreService<\n  TUID extends UID.ContentType,\n  TService extends Core.CoreAPI.Service.Extendable<TUID>,\n>(\n  uid: TUID,\n  cfg?: WithStrapiCallback<Utils.PartialWithThis<Core.CoreAPI.Service.Extendable<TUID> & TService>>\n) {\n  return ({\n    strapi,\n  }: {\n    strapi: Core.Strapi;\n  }): TService & Core.CoreAPI.Service.ContentType<TUID> => {\n    const baseService = createService({ contentType: strapi.contentType(uid) });\n\n    const userService = typeof cfg === 'function' ? cfg({ strapi }) : (cfg ?? ({} as any));\n\n    for (const methodName of Object.keys(baseService) as Array<keyof typeof baseService>) {\n      if (userService[methodName] === undefined) {\n        userService[methodName] = baseService[methodName];\n      }\n    }\n\n    Object.setPrototypeOf(userService, baseService);\n    return userService;\n  };\n}\n\nfunction createCoreRouter<T extends UID.ContentType>(\n  uid: T,\n  cfg?: Core.CoreAPI.Router.RouterConfig<T>\n): Core.CoreAPI.Router.Router {\n  const { prefix, config = {}, only, except, type = 'content-api' } = cfg ?? {};\n  let routes: Core.CoreAPI.Router.Route[];\n\n  return {\n    type,\n    prefix,\n    get routes() {\n      if (!routes) {\n        const contentType = strapi.contentType(uid);\n\n        const defaultRoutes = createRoutes({ contentType });\n        const keys = Object.keys(defaultRoutes) as Array<keyof typeof defaultRoutes>;\n\n        keys.forEach((routeName) => {\n          const defaultRoute = defaultRoutes[routeName];\n\n          Object.assign(defaultRoute.config, config[routeName] || {});\n        });\n\n        const selectedRoutes = pipe(\n          (routes) => (except ? omit(except, routes) : routes),\n          (routes) => (only ? pick(only, routes) : routes)\n        )(defaultRoutes);\n\n        routes = Object.values(selectedRoutes);\n      }\n\n      return routes;\n    },\n  };\n}\n\nconst isCustomController = <T extends Core.Controller>(controller: T): boolean => {\n  return symbols.CustomController in controller;\n};\n\nexport { createCoreController, createCoreService, createCoreRouter, isCustomController };\n"],"names":["strapi","routes"],"mappings":";;;;AAOA,MAAM,UAAU;AAAA,EACd,kBAAkB,OAAO,4BAA4B;AACvD;AAIM,MAAA,uBAAuB,CAI3B,KACA,QAGG;AACH,SAAO,CAAC;AAAA,IACN,QAAAA;AAAAA,EAAA,MAG6D;AACvD,UAAA,iBAAiB,iBAAiB,EAAE,aAAaA,QAAO,YAAY,GAAG,GAAG;AAE1E,UAAA,WAAW,OAAO,QAAQ,aAAa,IAAI,EAAE,QAAAA,QAAO,CAAC,IAAK,OAAQ,CAAC;AAEzE,eAAW,cAAc,OAAO,KAAK,cAAc,GAAyC;AACtF,UAAA,SAAS,UAAU,MAAM,QAAW;AAC7B,iBAAA,UAAU,IAAI,eAAe,UAAU;AAAA,MAAA;AAAA,IAClD;AAGK,WAAA,eAAe,UAAU,cAAc;AAExC,UAAA,WAAW,OAAO,QAAQ;AAChC,QAAI,UAAU;AACL,aAAA,eAAe,UAAU,QAAQ,kBAAkB;AAAA,QACxD,UAAU;AAAA,QACV,cAAc;AAAA,QACd,YAAY;AAAA,MAAA,CACb;AAAA,IAAA;AAGI,WAAA;AAAA,EACT;AACF;AAEA,SAAS,kBAIP,KACA,KACA;AACA,SAAO,CAAC;AAAA,IACN,QAAAA;AAAAA,EAAA,MAGuD;AACjD,UAAA,cAAc,cAAc,EAAE,aAAaA,QAAO,YAAY,GAAG,GAAG;AAEpE,UAAA,cAAc,OAAO,QAAQ,aAAa,IAAI,EAAE,QAAAA,QAAO,CAAC,IAAK,OAAQ,CAAC;AAE5E,eAAW,cAAc,OAAO,KAAK,WAAW,GAAsC;AAChF,UAAA,YAAY,UAAU,MAAM,QAAW;AAC7B,oBAAA,UAAU,IAAI,YAAY,UAAU;AAAA,MAAA;AAAA,IAClD;AAGK,WAAA,eAAe,aAAa,WAAW;AACvC,WAAA;AAAA,EACT;AACF;AAEA,SAAS,iBACP,KACA,KAC4B;AACtB,QAAA,EAAE,QAAQ,SAAS,IAAI,MAAM,QAAQ,OAAO,kBAAkB,OAAO,CAAC;AACxE,MAAA;AAEG,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA,IAAI,SAAS;AACX,UAAI,CAAC,QAAQ;AACL,cAAA,cAAc,OAAO,YAAY,GAAG;AAE1C,cAAM,gBAAgB,aAAa,EAAE,aAAa;AAC5C,cAAA,OAAO,OAAO,KAAK,aAAa;AAEjC,aAAA,QAAQ,CAAC,cAAc;AACpB,gBAAA,eAAe,cAAc,SAAS;AAE5C,iBAAO,OAAO,aAAa,QAAQ,OAAO,SAAS,KAAK,EAAE;AAAA,QAAA,CAC3D;AAED,cAAM,iBAAiB;AAAA,UACrB,CAACC,YAAY,SAAS,KAAK,QAAQA,OAAM,IAAIA;AAAAA,UAC7C,CAACA,YAAY,OAAO,KAAK,MAAMA,OAAM,IAAIA;AAAAA,UACzC,aAAa;AAEN,iBAAA,OAAO,OAAO,cAAc;AAAA,MAAA;AAGhC,aAAA;AAAA,IAAA;AAAA,EAEX;AACF;AAEM,MAAA,qBAAqB,CAA4B,eAA2B;AAChF,SAAO,QAAQ,oBAAoB;AACrC;"}
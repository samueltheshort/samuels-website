{"version":3,"file":"admin-customisations.mjs","sources":["../../../src/node/core/admin-customisations.ts"],"sourcesContent":["import path from 'node:path';\nimport { convertSystemPathToModulePath, pathExists } from './files';\nimport type { BaseContext } from '../types';\n\nconst ADMIN_APP_FILES = ['app.js', 'app.mjs', 'app.ts', 'app.jsx', 'app.tsx'];\n\ninterface AdminCustomisations {\n  config?: {\n    locales?: string[];\n  };\n  bootstrap?: (...args: any[]) => any;\n}\n\ninterface AppFile {\n  /**\n   * The system path to the file\n   */\n  path: string;\n  /**\n   * The module path to the file i.e. how you would import it\n   */\n  modulePath: string;\n}\n\nconst loadUserAppFile = async ({\n  runtimeDir,\n  appDir,\n}: Pick<BaseContext, 'appDir' | 'runtimeDir'>): Promise<AppFile | undefined> => {\n  for (const file of ADMIN_APP_FILES) {\n    const filePath = path.join(appDir, 'src', 'admin', file);\n\n    if (await pathExists(filePath)) {\n      return {\n        path: filePath,\n        modulePath: convertSystemPathToModulePath(path.relative(runtimeDir, filePath)),\n      };\n    }\n  }\n\n  return undefined;\n};\n\nexport { loadUserAppFile };\nexport type { AdminCustomisations, AppFile };\n"],"names":[],"mappings":";;AAIA,MAAM,kBAAkB,CAAC,UAAU,WAAW,UAAU,WAAW,SAAS;AAoB5E,MAAM,kBAAkB,OAAO;AAAA,EAC7B;AAAA,EACA;AACF,MAAgF;AAC9E,aAAW,QAAQ,iBAAiB;AAClC,UAAM,WAAW,KAAK,KAAK,QAAQ,OAAO,SAAS,IAAI;AAEnD,QAAA,MAAM,WAAW,QAAQ,GAAG;AACvB,aAAA;AAAA,QACL,MAAM;AAAA,QACN,YAAY,8BAA8B,KAAK,SAAS,YAAY,QAAQ,CAAC;AAAA,MAC/E;AAAA,IAAA;AAAA,EACF;AAGK,SAAA;AACT;"}
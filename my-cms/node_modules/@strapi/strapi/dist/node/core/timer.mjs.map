{"version":3,"file":"timer.mjs","sources":["../../../src/node/core/timer.ts"],"sourcesContent":["import { performance } from 'perf_hooks';\n\nexport interface TimeMeasurer {\n  start: (name: string) => void;\n  end: (name: string) => number;\n  getTimings: () => Record<string, number>;\n}\n\nexport function getTimer(): TimeMeasurer {\n  const timings: Record<string, number> = {};\n  const startTimes: Record<string, number> = {};\n\n  function start(name: string): void {\n    if (typeof startTimes[name] !== 'undefined') {\n      throw new Error(`Timer \"${name}\" already started, cannot overwrite`);\n    }\n\n    startTimes[name] = performance.now();\n  }\n\n  function end(name: string): number {\n    if (typeof startTimes[name] === 'undefined') {\n      throw new Error(`Timer \"${name}\" never started, cannot end`);\n    }\n\n    timings[name] = performance.now() - startTimes[name];\n    return timings[name];\n  }\n\n  return { start, end, getTimings: () => timings };\n}\n\nexport const prettyTime = (timeInMs: number): string => {\n  return `${Math.ceil(timeInMs)}ms`;\n};\n"],"names":[],"mappings":";AAQO,SAAS,WAAyB;AACvC,QAAM,UAAkC,CAAC;AACzC,QAAM,aAAqC,CAAC;AAE5C,WAAS,MAAM,MAAoB;AACjC,QAAI,OAAO,WAAW,IAAI,MAAM,aAAa;AAC3C,YAAM,IAAI,MAAM,UAAU,IAAI,qCAAqC;AAAA,IAAA;AAG1D,eAAA,IAAI,IAAI,YAAY,IAAI;AAAA,EAAA;AAGrC,WAAS,IAAI,MAAsB;AACjC,QAAI,OAAO,WAAW,IAAI,MAAM,aAAa;AAC3C,YAAM,IAAI,MAAM,UAAU,IAAI,6BAA6B;AAAA,IAAA;AAG7D,YAAQ,IAAI,IAAI,YAAY,IAAI,IAAI,WAAW,IAAI;AACnD,WAAO,QAAQ,IAAI;AAAA,EAAA;AAGrB,SAAO,EAAE,OAAO,KAAK,YAAY,MAAM,QAAQ;AACjD;AAEa,MAAA,aAAa,CAAC,aAA6B;AACtD,SAAO,GAAG,KAAK,KAAK,QAAQ,CAAC;AAC/B;"}
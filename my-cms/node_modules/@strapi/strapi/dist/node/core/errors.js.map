{"version":3,"file":"errors.js","sources":["../../../src/node/core/errors.ts"],"sourcesContent":["import boxen from 'boxen';\nimport chalk from 'chalk';\nimport os from 'node:os';\n\nconst isError = (err: unknown): err is Error => err instanceof Error;\n\n/**\n * @description Handle unexpected errors. No, but really, your CLI should anticipate error cases.\n * If a user hits an error we don't expect, then we need to flag to them that this is not normal\n * and they should use the `--debug` flag to get more information (assuming you've implemented this\n * in your action).\n */\nconst handleUnexpectedError = (err: unknown) => {\n  console.error(\n    chalk.red(\n      `[ERROR] `,\n      'There seems to be an unexpected error, try again with --debug for more information',\n      os.EOL\n    )\n  );\n\n  if (isError(err) && err.stack) {\n    // eslint-disable-next-line no-console\n    console.log(\n      chalk.red(\n        boxen(err.stack, {\n          padding: 1,\n          align: 'left',\n        })\n      )\n    );\n  }\n\n  process.exit(1);\n};\n\nexport { handleUnexpectedError, isError };\n"],"names":["chalk","os","boxen"],"mappings":";;;;;;;;;AAIM,MAAA,UAAU,CAAC,QAA+B,eAAe;AAQzD,MAAA,wBAAwB,CAAC,QAAiB;AACtC,UAAA;AAAA,IACNA,eAAAA,QAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACAC,oBAAG;AAAA,IAAA;AAAA,EAEP;AAEA,MAAI,QAAQ,GAAG,KAAK,IAAI,OAAO;AAErB,YAAA;AAAA,MACND,eAAAA,QAAM;AAAA,QACJE,eAAA,QAAM,IAAI,OAAO;AAAA,UACf,SAAS;AAAA,UACT,OAAO;AAAA,QACR,CAAA;AAAA,MAAA;AAAA,IAEL;AAAA,EAAA;AAGF,UAAQ,KAAK,CAAC;AAChB;;;"}
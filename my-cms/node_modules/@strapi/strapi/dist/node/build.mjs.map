{"version":3,"file":"build.mjs","sources":["../../src/node/build.ts"],"sourcesContent":["import * as tsUtils from '@strapi/typescript-utils';\nimport type { CLIContext } from '../cli/types';\nimport { checkRequiredDependencies } from './core/dependencies';\nimport { getTimer, prettyTime } from './core/timer';\nimport { createBuildContext } from './create-build-context';\nimport { writeStaticClientFiles } from './staticFiles';\n\ninterface BuildOptions extends CLIContext {\n  /**\n   * Which bundler to use for building.\n   *\n   * @default webpack\n   */\n  bundler?: 'webpack' | 'vite';\n  /**\n   * Minify the output\n   *\n   * @default true\n   */\n  minify?: boolean;\n  /**\n   * Generate sourcemaps â€“ useful for debugging bugs in the admin panel UI.\n   */\n  sourcemaps?: boolean;\n  /**\n   * Print stats for build\n   */\n  stats?: boolean;\n}\n\n/**\n * @example `$ strapi build`\n *\n * @description Builds the admin panel of the strapi application.\n */\nconst build = async ({ logger, cwd, tsconfig, ...options }: BuildOptions) => {\n  const timer = getTimer();\n\n  const { didInstall } = await checkRequiredDependencies({ cwd, logger }).catch((err) => {\n    logger.error(err.message);\n    process.exit(1);\n  });\n\n  if (didInstall) {\n    return;\n  }\n\n  if (tsconfig?.config) {\n    timer.start('compilingTS');\n    const compilingTsSpinner = logger.spinner(`Compiling TS`).start();\n\n    tsUtils.compile(cwd, { configOptions: { ignoreDiagnostics: false } });\n\n    const compilingDuration = timer.end('compilingTS');\n    compilingTsSpinner.text = `Compiling TS (${prettyTime(compilingDuration)})`;\n    compilingTsSpinner.succeed();\n  }\n\n  timer.start('createBuildContext');\n  const contextSpinner = logger.spinner(`Building build context`).start();\n  console.log('');\n\n  const ctx = await createBuildContext({\n    cwd,\n    logger,\n    tsconfig,\n    options,\n  });\n\n  const contextDuration = timer.end('createBuildContext');\n  contextSpinner.text = `Building build context (${prettyTime(contextDuration)})`;\n  contextSpinner.succeed();\n\n  timer.start('buildAdmin');\n  const buildingSpinner = logger.spinner(`Building admin panel`).start();\n  console.log('');\n\n  try {\n    await writeStaticClientFiles(ctx);\n\n    if (ctx.bundler === 'webpack') {\n      const { build: buildWebpack } = await import('./webpack/build');\n      await buildWebpack(ctx);\n    } else if (ctx.bundler === 'vite') {\n      const { build: buildVite } = await import('./vite/build');\n      await buildVite(ctx);\n    }\n\n    const buildDuration = timer.end('buildAdmin');\n    buildingSpinner.text = `Building admin panel (${prettyTime(buildDuration)})`;\n    buildingSpinner.succeed();\n  } catch (err) {\n    buildingSpinner.fail();\n    throw err;\n  }\n};\n\nexport { build };\nexport type { BuildOptions };\n"],"names":[],"mappings":";;;;;AAmCM,MAAA,QAAQ,OAAO,EAAE,QAAQ,KAAK,UAAU,GAAG,cAA4B;AAC3E,QAAM,QAAQ,SAAS;AAEvB,QAAM,EAAE,eAAe,MAAM,0BAA0B,EAAE,KAAK,QAAQ,EAAE,MAAM,CAAC,QAAQ;AAC9E,WAAA,MAAM,IAAI,OAAO;AACxB,YAAQ,KAAK,CAAC;AAAA,EAAA,CACf;AAED,MAAI,YAAY;AACd;AAAA,EAAA;AAGF,MAAI,UAAU,QAAQ;AACpB,UAAM,MAAM,aAAa;AACzB,UAAM,qBAAqB,OAAO,QAAQ,cAAc,EAAE,MAAM;AAExD,YAAA,QAAQ,KAAK,EAAE,eAAe,EAAE,mBAAmB,MAAA,GAAS;AAE9D,UAAA,oBAAoB,MAAM,IAAI,aAAa;AACjD,uBAAmB,OAAO,iBAAiB,WAAW,iBAAiB,CAAC;AACxE,uBAAmB,QAAQ;AAAA,EAAA;AAG7B,QAAM,MAAM,oBAAoB;AAChC,QAAM,iBAAiB,OAAO,QAAQ,wBAAwB,EAAE,MAAM;AACtE,UAAQ,IAAI,EAAE;AAER,QAAA,MAAM,MAAM,mBAAmB;AAAA,IACnC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAEK,QAAA,kBAAkB,MAAM,IAAI,oBAAoB;AACtD,iBAAe,OAAO,2BAA2B,WAAW,eAAe,CAAC;AAC5E,iBAAe,QAAQ;AAEvB,QAAM,MAAM,YAAY;AACxB,QAAM,kBAAkB,OAAO,QAAQ,sBAAsB,EAAE,MAAM;AACrE,UAAQ,IAAI,EAAE;AAEV,MAAA;AACF,UAAM,uBAAuB,GAAG;AAE5B,QAAA,IAAI,YAAY,WAAW;AAC7B,YAAM,EAAE,OAAO,iBAAiB,MAAM,OAAO,qBAAiB;AAC9D,YAAM,aAAa,GAAG;AAAA,IAAA,WACb,IAAI,YAAY,QAAQ;AACjC,YAAM,EAAE,OAAO,cAAc,MAAM,OAAO,kBAAc;AACxD,YAAM,UAAU,GAAG;AAAA,IAAA;AAGf,UAAA,gBAAgB,MAAM,IAAI,YAAY;AAC5C,oBAAgB,OAAO,yBAAyB,WAAW,aAAa,CAAC;AACzE,oBAAgB,QAAQ;AAAA,WACjB,KAAK;AACZ,oBAAgB,KAAK;AACf,UAAA;AAAA,EAAA;AAEV;"}
{"version":3,"file":"config.js","sources":["../../../src/node/webpack/config.ts"],"sourcesContent":["import ReactRefreshWebpackPlugin from '@pmmmwh/react-refresh-webpack-plugin';\nimport browserslistToEsbuild from 'browserslist-to-esbuild';\nimport { ESBuildMinifyPlugin } from 'esbuild-loader';\nimport ForkTsCheckerPlugin from 'fork-ts-checker-webpack-plugin';\nimport HtmlWebpackPlugin from 'html-webpack-plugin';\nimport MiniCssExtractPlugin from 'mini-css-extract-plugin';\nimport crypto from 'node:crypto';\nimport path from 'node:path';\nimport readPkgUp from 'read-pkg-up';\nimport {\n  Configuration,\n  DefinePlugin,\n  HotModuleReplacementPlugin,\n  WebpackPluginInstance,\n} from 'webpack';\nimport { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';\n\nimport { loadStrapiMonorepo } from '../core/monorepo';\nimport type { BuildContext } from '../create-build-context';\nimport { getUserConfig } from '../core/config';\nimport { getMonorepoAliases } from '../core/aliases';\n\nconst resolveBaseConfig = async (ctx: BuildContext) => {\n  const target = browserslistToEsbuild(ctx.target);\n\n  return {\n    experiments: {\n      topLevelAwait: true,\n    },\n    entry: {\n      main: [`./${ctx.entry}`],\n    },\n    resolve: {\n      alias: {\n        react: getModulePath('react'),\n        'react-dom': getModulePath('react-dom'),\n        'styled-components': getModulePath('styled-components'),\n        'react-router-dom': getModulePath('react-router-dom'),\n      },\n      extensions: ['.js', '.jsx', '.react.js', '.ts', '.tsx'],\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.(ts|tsx)$/,\n          loader: require.resolve('esbuild-loader'),\n          options: {\n            loader: 'tsx',\n            target,\n            jsx: 'automatic',\n          },\n        },\n        {\n          test: /\\.(js|jsx|mjs)$/,\n          use: {\n            loader: require.resolve('esbuild-loader'),\n            options: {\n              loader: 'jsx',\n              target,\n              jsx: 'automatic',\n            },\n          },\n        },\n        {\n          test: /\\.m?js/,\n          resolve: {\n            fullySpecified: false,\n          },\n        },\n        {\n          test: /\\.css$/i,\n          use: [require.resolve('style-loader'), require.resolve('css-loader')],\n        },\n        {\n          test: /\\.(svg|eot|otf|ttf|woff|woff2)$/,\n          type: 'asset/resource',\n        },\n        {\n          test: [/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/, /\\.ico$/],\n          type: 'asset',\n          parser: {\n            dataUrlCondition: {\n              maxSize: 1000,\n            },\n          },\n        },\n        {\n          test: /\\.(mp4|webm)$/,\n          type: 'asset',\n          parser: {\n            dataUrlCondition: {\n              maxSize: 10000,\n            },\n          },\n        },\n      ],\n    },\n    plugins: [\n      new HtmlWebpackPlugin({\n        inject: true,\n        template: path.resolve(ctx.runtimeDir, 'index.html'),\n      }),\n      new DefinePlugin(\n        Object.entries(ctx.env).reduce<Record<string, string>>((acc, [key, value]) => {\n          acc[`process.env.${key}`] = JSON.stringify(value);\n          return acc;\n        }, {})\n      ),\n      ctx.tsconfig &&\n        new ForkTsCheckerPlugin({\n          typescript: {\n            configFile: ctx.tsconfig.path,\n            configOverwrite: {\n              compilerOptions: {\n                sourceMap: ctx.options.sourcemaps,\n              },\n            },\n          },\n        }),\n    ].filter(Boolean),\n  };\n};\n\nconst resolveDevelopmentConfig = async (ctx: BuildContext): Promise<Configuration> => {\n  const baseConfig = await resolveBaseConfig(ctx);\n  const monorepo = await loadStrapiMonorepo(ctx.cwd);\n\n  return {\n    ...baseConfig,\n    cache: {\n      type: 'filesystem',\n      // version cache when there are changes to aliases\n      buildDependencies: {\n        config: [__filename],\n      },\n      version: crypto\n        .createHash('md5')\n        .update(Object.entries(baseConfig.resolve.alias ?? {}).join())\n        .digest('hex'),\n    },\n    resolve: {\n      ...baseConfig.resolve,\n      alias: {\n        ...baseConfig.resolve.alias,\n        ...getMonorepoAliases({ monorepo }),\n      },\n    },\n    entry: {\n      ...baseConfig.entry,\n      main: [\n        `${require.resolve('webpack-hot-middleware/client')}?path=/__webpack_hmr`,\n        ...baseConfig.entry.main,\n      ],\n    },\n    stats: 'errors-warnings',\n    mode: 'development',\n    devtool: 'inline-source-map',\n    output: {\n      filename: '[name].js',\n      path: ctx.distPath,\n      publicPath: ctx.basePath,\n    },\n    infrastructureLogging: {\n      level: 'error',\n    },\n    plugins: [\n      ...baseConfig.plugins,\n      new HotModuleReplacementPlugin(),\n      new ReactRefreshWebpackPlugin(),\n    ],\n  };\n};\n\nconst resolveProductionConfig = async (ctx: BuildContext): Promise<Configuration> => {\n  const target = browserslistToEsbuild(ctx.target);\n\n  const baseConfig = await resolveBaseConfig(ctx);\n\n  return {\n    ...baseConfig,\n    stats: 'errors-only',\n    mode: 'production',\n    bail: true,\n    devtool: ctx.options.sourcemaps ? 'source-map' : false,\n    output: {\n      path: ctx.distPath,\n      publicPath: ctx.basePath,\n      // Utilize long-term caching by adding content hashes (not compilation hashes)\n      // to compiled assets for production\n      filename: '[name].[contenthash:8].js',\n      chunkFilename: '[name].[contenthash:8].chunk.js',\n    },\n    optimization: {\n      minimize: ctx.options.minify,\n      minimizer: [\n        new ESBuildMinifyPlugin({\n          target,\n          css: true, // Apply minification to CSS assets\n        }),\n      ],\n      moduleIds: 'deterministic',\n      runtimeChunk: true,\n    },\n    plugins: [\n      ...baseConfig.plugins,\n      new MiniCssExtractPlugin({\n        filename: '[name].[chunkhash].css',\n        chunkFilename: '[name].[chunkhash].chunkhash.css',\n        ignoreOrder: true,\n      }),\n      ctx.options.stats && (new BundleAnalyzerPlugin() as unknown as WebpackPluginInstance), // TODO: find out if this is an actual issue or just a ts bug\n    ].filter(Boolean),\n  };\n};\n\nconst USER_CONFIGS = ['webpack.config.js', 'webpack.config.mjs', 'webpack.config.ts'];\n\ntype UserWebpackConfig = (config: Configuration, webpack: unknown) => Configuration;\n\nconst mergeConfigWithUserConfig = async (config: Configuration, ctx: BuildContext) => {\n  const userConfig = await getUserConfig<UserWebpackConfig>(USER_CONFIGS, ctx);\n\n  if (userConfig) {\n    if (typeof userConfig === 'function') {\n      const webpack = await import('webpack');\n      return userConfig(config, webpack);\n    }\n\n    ctx.logger.warn(\n      `You've exported something other than a function from ${path.join(\n        ctx.appDir,\n        'src',\n        'admin',\n        'webpack.config'\n      )}, this will ignored.`\n    );\n  }\n\n  return config;\n};\n\n/**\n * @internal This function is used to resolve the path of a module.\n * It mimics what vite does internally already.\n */\nconst getModulePath = (mod: string) => {\n  const modulePath = require.resolve(mod);\n  const pkg = readPkgUp.sync({ cwd: path.dirname(modulePath) });\n  return pkg ? path.dirname(pkg.path) : modulePath;\n};\n\nexport { mergeConfigWithUserConfig, resolveDevelopmentConfig, resolveProductionConfig };\n"],"names":["browserslistToEsbuild","HtmlWebpackPlugin","path","DefinePlugin","ForkTsCheckerPlugin","monorepo","loadStrapiMonorepo","crypto","getMonorepoAliases","HotModuleReplacementPlugin","ReactRefreshWebpackPlugin","ESBuildMinifyPlugin","MiniCssExtractPlugin","BundleAnalyzerPlugin","config","getUserConfig","webpack","readPkgUp"],"mappings":"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"}
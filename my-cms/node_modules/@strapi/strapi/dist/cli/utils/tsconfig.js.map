{"version":3,"file":"tsconfig.js","sources":["../../../src/cli/utils/tsconfig.ts"],"sourcesContent":["import os from 'os';\nimport ts from 'typescript';\nimport type { Logger } from './logger';\n\ninterface TsConfig {\n  config: ts.ParsedCommandLine;\n  path: string;\n}\n\n/**\n * @description Load a tsconfig.json file and return the parsed config.\n *\n * @internal\n */\nconst loadTsConfig = ({\n  cwd,\n  path,\n  logger,\n}: {\n  cwd: string;\n  path: string;\n  logger: Logger;\n}): TsConfig | undefined => {\n  const configPath = ts.findConfigFile(cwd, ts.sys.fileExists, path);\n\n  if (!configPath) {\n    return undefined;\n  }\n\n  const configFile = ts.readConfigFile(configPath, ts.sys.readFile);\n\n  const parsedConfig = ts.parseJsonConfigFileContent(configFile.config, ts.sys, cwd);\n\n  logger.debug(`Loaded user TS config:`, os.EOL, parsedConfig);\n\n  return {\n    config: parsedConfig,\n    path: configPath,\n  };\n};\n\nexport { loadTsConfig };\nexport type { TsConfig };\n"],"names":["ts","os"],"mappings":";;;;;;;AAcA,MAAM,eAAe,CAAC;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACF,MAI4B;AAC1B,QAAM,aAAaA,YAAG,QAAA,eAAe,KAAKA,YAAAA,QAAG,IAAI,YAAY,IAAI;AAEjE,MAAI,CAAC,YAAY;AACR,WAAA;AAAA,EAAA;AAGT,QAAM,aAAaA,YAAAA,QAAG,eAAe,YAAYA,YAAA,QAAG,IAAI,QAAQ;AAEhE,QAAM,eAAeA,YAAG,QAAA,2BAA2B,WAAW,QAAQA,YAAA,QAAG,KAAK,GAAG;AAEjF,SAAO,MAAM,0BAA0BC,YAAG,QAAA,KAAK,YAAY;AAEpD,SAAA;AAAA,IACL,QAAQ;AAAA,IACR,MAAM;AAAA,EACR;AACF;;"}
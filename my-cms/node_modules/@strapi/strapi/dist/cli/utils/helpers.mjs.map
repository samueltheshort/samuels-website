{"version":3,"file":"helpers.mjs","sources":["../../../src/cli/utils/helpers.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\nimport chalk from 'chalk';\nimport { has, isString, isArray } from 'lodash/fp';\nimport { prompt } from 'inquirer';\nimport boxen from 'boxen';\nimport type { Command } from 'commander';\n\n/**\n * Helper functions for the Strapi CLI\n */\nconst bytesPerKb = 1024;\nconst sizes = ['B ', 'KB', 'MB', 'GB', 'TB', 'PB'];\n\n/**\n * Convert bytes to a human readable formatted string, for example \"1024\" becomes \"1KB\"\n */\nconst readableBytes = (bytes: number, decimals = 1, padStart = 0) => {\n  if (!bytes) {\n    return '0';\n  }\n  const i = Math.floor(Math.log(bytes) / Math.log(bytesPerKb));\n  const result = `${parseFloat((bytes / bytesPerKb ** i).toFixed(decimals))} ${sizes[i].padStart(\n    2\n  )}`;\n\n  return result.padStart(padStart);\n};\n\ninterface ExitWithOptions {\n  logger?: Console;\n  prc?: NodeJS.Process;\n}\n\n/**\n *\n * Display message(s) to console and then call process.exit with code.\n * If code is zero, console.log and green text is used for messages, otherwise console.error and red text.\n *\n */\nconst exitWith = (code: number, message?: string | string[], options: ExitWithOptions = {}) => {\n  const { logger = console, prc = process } = options;\n\n  const log = (message: string) => {\n    if (code === 0) {\n      logger.log(chalk.green(message));\n    } else {\n      logger.error(chalk.red(message));\n    }\n  };\n\n  if (isString(message)) {\n    log(message);\n  } else if (isArray(message)) {\n    message.forEach((msg) => log(msg));\n  }\n\n  prc.exit(code);\n};\n\n/**\n * assert that a URL object has a protocol value\n *\n */\nconst assertUrlHasProtocol = (url: URL, protocol?: string | string[]) => {\n  if (!url.protocol) {\n    exitWith(1, `${url.toString()} does not have a protocol`);\n  }\n\n  // if just checking for the existence of a protocol, return\n  if (!protocol) {\n    return;\n  }\n\n  if (isString(protocol)) {\n    if (protocol !== url.protocol) {\n      exitWith(1, `${url.toString()} must have the protocol ${protocol}`);\n    }\n    return;\n  }\n\n  // assume an array\n  if (!protocol.some((protocol) => url.protocol === protocol)) {\n    return exitWith(\n      1,\n      `${url.toString()} must have one of the following protocols: ${protocol.join(',')}`\n    );\n  }\n};\n\ntype ConditionCallback = (opts: Record<string, any>) => Promise<boolean>;\ntype IsMetCallback = (command: Command) => Promise<void>;\ntype IsNotMetCallback = (command: Command) => Promise<void>;\n\n/**\n * Passes commander options to conditionCallback(). If it returns true, call isMetCallback otherwise call isNotMetCallback\n */\nconst ifOptions = (\n  conditionCallback: ConditionCallback,\n  isMetCallback: IsMetCallback = async () => {},\n  isNotMetCallback: IsNotMetCallback = async () => {}\n) => {\n  return async (command: Command) => {\n    const opts = command.opts();\n    if (await conditionCallback(opts)) {\n      await isMetCallback(command);\n    } else {\n      await isNotMetCallback(command);\n    }\n  };\n};\n\nconst assertCwdContainsStrapiProject = (name: string) => {\n  const logErrorAndExit = () => {\n    console.log(\n      `You need to run ${chalk.yellow(\n        `strapi ${name}`\n      )} in a Strapi project. Make sure you are in the right directory.`\n    );\n    process.exit(1);\n  };\n\n  try {\n    const pkgJSON = require(`${process.cwd()}/package.json`);\n    if (\n      !has('dependencies.@strapi/strapi', pkgJSON) &&\n      !has('devDependencies.@strapi/strapi', pkgJSON)\n    ) {\n      logErrorAndExit();\n    }\n  } catch (err) {\n    logErrorAndExit();\n  }\n};\n\nconst runAction =\n  (name: string, action: (...args: any[]) => Promise<void>) =>\n  (...args: unknown[]) => {\n    assertCwdContainsStrapiProject(name);\n\n    Promise.resolve()\n      .then(() => {\n        return action(...args);\n      })\n      .catch((error) => {\n        console.error(error);\n        process.exit(1);\n      });\n  };\n\n/**\n * @description Notify users this is an experimental command and get them to approve first\n * this can be opted out by passing `yes` as a property of the args object.\n *\n * @example\n * ```ts\n * const { notifyExperimentalCommand } = require('../utils/helpers');\n *\n * const myCommand = async ({ force }) => {\n *  await notifyExperimentalCommand('plugin:build', { force });\n * }\n * ```\n */\nconst notifyExperimentalCommand = async (name: string, { force }: { force?: boolean } = {}) => {\n  console.log(\n    boxen(\n      `The ${chalk.bold(\n        chalk.underline(name)\n      )} command is considered experimental, use at your own risk.`,\n      {\n        title: 'Warning',\n        padding: 1,\n        margin: 1,\n        align: 'center',\n        borderColor: 'yellow',\n        borderStyle: 'bold',\n      }\n    )\n  );\n\n  if (!force) {\n    const { confirmed } = await prompt({\n      type: 'confirm',\n      name: 'confirmed',\n      message: 'Do you want to continue?',\n    });\n\n    if (!confirmed) {\n      process.exit(0);\n    }\n  }\n};\n\nexport {\n  exitWith,\n  assertUrlHasProtocol,\n  ifOptions,\n  readableBytes,\n  runAction,\n  assertCwdContainsStrapiProject,\n  notifyExperimentalCommand,\n};\n"],"names":["message","protocol"],"mappings":";;;;AAUA,MAAM,aAAa;AACnB,MAAM,QAAQ,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AAKjD,MAAM,gBAAgB,CAAC,OAAe,WAAW,GAAG,WAAW,MAAM;AACnE,MAAI,CAAC,OAAO;AACH,WAAA;AAAA,EAAA;AAEH,QAAA,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,UAAU,CAAC;AAC3D,QAAM,SAAS,GAAG,YAAY,QAAQ,cAAc,GAAG,QAAQ,QAAQ,CAAC,CAAC,IAAI,MAAM,CAAC,EAAE;AAAA,IACpF;AAAA,EAAA,CACD;AAEM,SAAA,OAAO,SAAS,QAAQ;AACjC;AAaA,MAAM,WAAW,CAAC,MAAc,SAA6B,UAA2B,CAAA,MAAO;AAC7F,QAAM,EAAE,SAAS,SAAS,MAAM,QAAY,IAAA;AAEtC,QAAA,MAAM,CAACA,aAAoB;AAC/B,QAAI,SAAS,GAAG;AACd,aAAO,IAAI,MAAM,MAAMA,QAAO,CAAC;AAAA,IAAA,OAC1B;AACL,aAAO,MAAM,MAAM,IAAIA,QAAO,CAAC;AAAA,IAAA;AAAA,EAEnC;AAEI,MAAA,SAAS,OAAO,GAAG;AACrB,QAAI,OAAO;AAAA,EAAA,WACF,QAAQ,OAAO,GAAG;AAC3B,YAAQ,QAAQ,CAAC,QAAQ,IAAI,GAAG,CAAC;AAAA,EAAA;AAGnC,MAAI,KAAK,IAAI;AACf;AAMM,MAAA,uBAAuB,CAAC,KAAU,aAAiC;AACnE,MAAA,CAAC,IAAI,UAAU;AACjB,aAAS,GAAG,GAAG,IAAI,SAAA,CAAU,2BAA2B;AAAA,EAAA;AAI1D,MAAI,CAAC,UAAU;AACb;AAAA,EAAA;AAGE,MAAA,SAAS,QAAQ,GAAG;AAClB,QAAA,aAAa,IAAI,UAAU;AAC7B,eAAS,GAAG,GAAG,IAAI,UAAU,2BAA2B,QAAQ,EAAE;AAAA,IAAA;AAEpE;AAAA,EAAA;AAIE,MAAA,CAAC,SAAS,KAAK,CAACC,cAAa,IAAI,aAAaA,SAAQ,GAAG;AACpD,WAAA;AAAA,MACL;AAAA,MACA,GAAG,IAAI,SAAU,CAAA,8CAA8C,SAAS,KAAK,GAAG,CAAC;AAAA,IACnF;AAAA,EAAA;AAEJ;AASA,MAAM,YAAY,CAChB,mBACA,gBAA+B,YAAY;AAAC,GAC5C,mBAAqC,YAAY;AAAC,MAC/C;AACH,SAAO,OAAO,YAAqB;AAC3B,UAAA,OAAO,QAAQ,KAAK;AACtB,QAAA,MAAM,kBAAkB,IAAI,GAAG;AACjC,YAAM,cAAc,OAAO;AAAA,IAAA,OACtB;AACL,YAAM,iBAAiB,OAAO;AAAA,IAAA;AAAA,EAElC;AACF;AAEM,MAAA,iCAAiC,CAAC,SAAiB;AACvD,QAAM,kBAAkB,MAAM;AACpB,YAAA;AAAA,MACN,mBAAmB,MAAM;AAAA,QACvB,UAAU,IAAI;AAAA,MAAA,CACf;AAAA,IACH;AACA,YAAQ,KAAK,CAAC;AAAA,EAChB;AAEI,MAAA;AACF,UAAM,UAAU,QAAQ,GAAG,QAAQ,IAAA,CAAK,eAAe;AAErD,QAAA,CAAC,IAAI,+BAA+B,OAAO,KAC3C,CAAC,IAAI,kCAAkC,OAAO,GAC9C;AACgB,sBAAA;AAAA,IAAA;AAAA,WAEX,KAAK;AACI,oBAAA;AAAA,EAAA;AAEpB;AAEA,MAAM,YACJ,CAAC,MAAc,WACf,IAAI,SAAoB;AACtB,iCAA+B,IAAI;AAE3B,UAAA,UACL,KAAK,MAAM;AACH,WAAA,OAAO,GAAG,IAAI;AAAA,EAAA,CACtB,EACA,MAAM,CAAC,UAAU;AAChB,YAAQ,MAAM,KAAK;AACnB,YAAQ,KAAK,CAAC;AAAA,EAAA,CACf;AACL;"}
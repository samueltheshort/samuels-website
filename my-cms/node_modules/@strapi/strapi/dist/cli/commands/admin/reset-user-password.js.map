{"version":3,"file":"reset-user-password.js","sources":["../../../../src/cli/commands/admin/reset-user-password.ts"],"sourcesContent":["import _ from 'lodash';\nimport inquirer from 'inquirer';\nimport { createCommand } from 'commander';\nimport { createStrapi, compileStrapi } from '@strapi/core';\n\nimport type { StrapiCommand } from '../../types';\nimport { runAction } from '../../utils/helpers';\n\ninterface CmdOptions {\n  email?: string;\n  password?: string;\n}\n\ninterface Answers {\n  email: string;\n  password: string;\n  confirm: boolean;\n}\n\nconst promptQuestions: ReadonlyArray<inquirer.DistinctQuestion<Answers>> = [\n  { type: 'input', name: 'email', message: 'User email?' },\n  { type: 'password', name: 'password', message: 'New password?' },\n  {\n    type: 'confirm',\n    name: 'confirm',\n    message: \"Do you really want to reset this user's password?\",\n  },\n];\n\nasync function changePassword({ email, password }: CmdOptions) {\n  const appContext = await compileStrapi();\n  const app = await createStrapi(appContext).load();\n\n  await app.admin!.services.user.resetPasswordByEmail(email, password);\n\n  console.log(`Successfully reset user's password`);\n  process.exit(0);\n}\n\n/**\n * Reset user's password\n */\nconst action = async (cmdOptions: CmdOptions = {}) => {\n  const { email, password } = cmdOptions;\n\n  if (_.isEmpty(email) && _.isEmpty(password) && process.stdin.isTTY) {\n    const inquiry = await inquirer.prompt(promptQuestions);\n\n    if (!inquiry.confirm) {\n      process.exit(0);\n    }\n\n    return changePassword(inquiry);\n  }\n\n  if (_.isEmpty(email) || _.isEmpty(password)) {\n    console.error('Missing required options `email` or `password`');\n    process.exit(1);\n  }\n\n  return changePassword({ email, password });\n};\n\n/**\n * `$ strapi admin:reset-user-password`\n */\nconst command: StrapiCommand = () => {\n  return createCommand('admin:reset-user-password')\n    .alias('admin:reset-password')\n    .description(\"Reset an admin user's password\")\n    .option('-e, --email <email>', 'The user email')\n    .option('-p, --password <password>', 'New password for the user')\n    .action(runAction('admin:reset-user-password', action));\n};\n\nexport { action, command };\n"],"names":["compileStrapi","createStrapi","_","inquirer","createCommand","runAction"],"mappings":";;;;;;;;;;AAmBA,MAAM,kBAAqE;AAAA,EACzE,EAAE,MAAM,SAAS,MAAM,SAAS,SAAS,cAAc;AAAA,EACvD,EAAE,MAAM,YAAY,MAAM,YAAY,SAAS,gBAAgB;AAAA,EAC/D;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,EAAA;AAEb;AAEA,eAAe,eAAe,EAAE,OAAO,YAAwB;AACvD,QAAA,aAAa,MAAMA,mBAAc;AACvC,QAAM,MAAM,MAAMC,KAAAA,aAAa,UAAU,EAAE,KAAK;AAEhD,QAAM,IAAI,MAAO,SAAS,KAAK,qBAAqB,OAAO,QAAQ;AAEnE,UAAQ,IAAI,oCAAoC;AAChD,UAAQ,KAAK,CAAC;AAChB;AAKA,MAAM,SAAS,OAAO,aAAyB,OAAO;AAC9C,QAAA,EAAE,OAAO,SAAA,IAAa;AAExB,MAAAC,mBAAE,QAAQ,KAAK,KAAKA,WAAA,QAAE,QAAQ,QAAQ,KAAK,QAAQ,MAAM,OAAO;AAClE,UAAM,UAAU,MAAMC,0BAAS,OAAO,eAAe;AAEjD,QAAA,CAAC,QAAQ,SAAS;AACpB,cAAQ,KAAK,CAAC;AAAA,IAAA;AAGhB,WAAO,eAAe,OAAO;AAAA,EAAA;AAG/B,MAAID,WAAAA,QAAE,QAAQ,KAAK,KAAKA,WAAAA,QAAE,QAAQ,QAAQ,GAAG;AAC3C,YAAQ,MAAM,gDAAgD;AAC9D,YAAQ,KAAK,CAAC;AAAA,EAAA;AAGhB,SAAO,eAAe,EAAE,OAAO,UAAU;AAC3C;AAKA,MAAM,UAAyB,MAAM;AAC5B,SAAAE,UAAA,cAAc,2BAA2B,EAC7C,MAAM,sBAAsB,EAC5B,YAAY,gCAAgC,EAC5C,OAAO,uBAAuB,gBAAgB,EAC9C,OAAO,6BAA6B,2BAA2B,EAC/D,OAAOC,QAAA,UAAU,6BAA6B,MAAM,CAAC;AAC1D;;;"}
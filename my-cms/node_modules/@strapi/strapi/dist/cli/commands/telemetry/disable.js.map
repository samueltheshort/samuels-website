{"version":3,"file":"disable.js","sources":["../../../../src/cli/commands/telemetry/disable.ts"],"sourcesContent":["import { resolve } from 'path';\nimport fse from 'fs-extra';\nimport chalk from 'chalk';\nimport { createCommand } from 'commander';\n\nimport type { StrapiCommand } from '../../types';\nimport { runAction } from '../../utils/helpers';\nimport { sendEvent } from '../../utils/telemetry';\n\nconst readPackageJSON = async (path: string) => {\n  try {\n    const packageObj = await fse.readJson(path);\n    const uuid = packageObj.strapi ? packageObj.strapi.uuid : null;\n\n    return { uuid, packageObj };\n  } catch (err) {\n    if (err instanceof Error) {\n      console.error(`${chalk.red('Error')}: ${err.message}`);\n    }\n  }\n};\n\nconst writePackageJSON = async (path: string, file: object, spacing: number) => {\n  try {\n    await fse.writeJson(path, file, { spaces: spacing });\n    return true;\n  } catch (err) {\n    if (err instanceof Error) {\n      console.error(`${chalk.red('Error')}: ${err.message}`);\n    }\n  }\n};\n\nconst action = async () => {\n  const packageJSONPath = resolve(process.cwd(), 'package.json');\n  const exists = await fse.pathExists(packageJSONPath);\n\n  if (!exists) {\n    console.log(`${chalk.yellow('Warning')}: could not find package.json`);\n    process.exit(0);\n  }\n\n  const { uuid, packageObj } = (await readPackageJSON(packageJSONPath)) ?? {};\n\n  if ((packageObj.strapi && packageObj.strapi.telemetryDisabled) || !uuid) {\n    console.log(`${chalk.yellow('Warning:')} telemetry is already disabled`);\n    process.exit(0);\n  }\n\n  const updatedPackageJSON = {\n    ...packageObj,\n    strapi: {\n      ...packageObj.strapi,\n      telemetryDisabled: true,\n    },\n  };\n\n  const write = await writePackageJSON(packageJSONPath, updatedPackageJSON, 2);\n\n  if (!write) {\n    console.log(\n      `${chalk.yellow(\n        'Warning'\n      )}: There has been an error, please set \"telemetryDisabled\": true in the \"strapi\" object of your package.json manually.`\n    );\n    process.exit(0);\n  }\n\n  await sendEvent('didOptOutTelemetry', uuid);\n  console.log(`${chalk.green('Successfully opted out of Strapi telemetry')}`);\n  process.exit(0);\n};\n\n/**\n * `$ strapi telemetry:disable`\n */\nconst command: StrapiCommand = () => {\n  return createCommand('telemetry:disable')\n    .description('Disable anonymous telemetry and metadata sending to Strapi analytics')\n    .action(runAction('telemetry:disable', action));\n};\n\nexport { action, command };\n"],"names":["path","fse","chalk","resolve","sendEvent","createCommand","runAction"],"mappings":";;;;;;;;;;;AASA,MAAM,kBAAkB,OAAOA,UAAiB;AAC1C,MAAA;AACF,UAAM,aAAa,MAAMC,qBAAI,SAASD,KAAI;AAC1C,UAAM,OAAO,WAAW,SAAS,WAAW,OAAO,OAAO;AAEnD,WAAA,EAAE,MAAM,WAAW;AAAA,WACnB,KAAK;AACZ,QAAI,eAAe,OAAO;AAChB,cAAA,MAAM,GAAGE,eAAAA,QAAM,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,EAAE;AAAA,IAAA;AAAA,EACvD;AAEJ;AAEA,MAAM,mBAAmB,OAAOF,OAAc,MAAc,YAAoB;AAC1E,MAAA;AACF,UAAMC,aAAAA,QAAI,UAAUD,OAAM,MAAM,EAAE,QAAQ,SAAS;AAC5C,WAAA;AAAA,WACA,KAAK;AACZ,QAAI,eAAe,OAAO;AAChB,cAAA,MAAM,GAAGE,eAAAA,QAAM,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,EAAE;AAAA,IAAA;AAAA,EACvD;AAEJ;AAEA,MAAM,SAAS,YAAY;AACzB,QAAM,kBAAkBC,KAAA,QAAQ,QAAQ,IAAA,GAAO,cAAc;AAC7D,QAAM,SAAS,MAAMF,qBAAI,WAAW,eAAe;AAEnD,MAAI,CAAC,QAAQ;AACX,YAAQ,IAAI,GAAGC,eAAAA,QAAM,OAAO,SAAS,CAAC,+BAA+B;AACrE,YAAQ,KAAK,CAAC;AAAA,EAAA;AAGV,QAAA,EAAE,MAAM,WAAW,IAAK,MAAM,gBAAgB,eAAe,KAAM,CAAC;AAE1E,MAAK,WAAW,UAAU,WAAW,OAAO,qBAAsB,CAAC,MAAM;AACvE,YAAQ,IAAI,GAAGA,eAAAA,QAAM,OAAO,UAAU,CAAC,gCAAgC;AACvE,YAAQ,KAAK,CAAC;AAAA,EAAA;AAGhB,QAAM,qBAAqB;AAAA,IACzB,GAAG;AAAA,IACH,QAAQ;AAAA,MACN,GAAG,WAAW;AAAA,MACd,mBAAmB;AAAA,IAAA;AAAA,EAEvB;AAEA,QAAM,QAAQ,MAAM,iBAAiB,iBAAiB,oBAAoB,CAAC;AAE3E,MAAI,CAAC,OAAO;AACF,YAAA;AAAA,MACN,GAAGA,eAAM,QAAA;AAAA,QACP;AAAA,MAAA,CACD;AAAA,IACH;AACA,YAAQ,KAAK,CAAC;AAAA,EAAA;AAGV,QAAAE,UAAA,UAAU,sBAAsB,IAAI;AAC1C,UAAQ,IAAI,GAAGF,eAAAA,QAAM,MAAM,4CAA4C,CAAC,EAAE;AAC1E,UAAQ,KAAK,CAAC;AAChB;AAKA,MAAM,UAAyB,MAAM;AAC5B,SAAAG,UAAA,cAAc,mBAAmB,EACrC,YAAY,sEAAsE,EAClF,OAAOC,QAAA,UAAU,qBAAqB,MAAM,CAAC;AAClD;;;"}
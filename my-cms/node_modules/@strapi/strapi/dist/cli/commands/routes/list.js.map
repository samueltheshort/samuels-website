{"version":3,"file":"list.js","sources":["../../../../src/cli/commands/routes/list.ts"],"sourcesContent":["import { createCommand } from 'commander';\nimport CLITable from 'cli-table3';\nimport chalk from 'chalk';\nimport { toUpper } from 'lodash/fp';\n\nimport { createStrapi, compileStrapi } from '@strapi/core';\n\nimport type { StrapiCommand } from '../../types';\nimport { runAction } from '../../utils/helpers';\n\nconst action = async () => {\n  const appContext = await compileStrapi();\n  const app = await createStrapi(appContext).load();\n\n  const list = app.server.mount().listRoutes();\n\n  const infoTable = new CLITable({\n    head: [chalk.blue('Method'), chalk.blue('Path')],\n    colWidths: [20],\n  });\n\n  list\n    .filter((route) => route.methods.length)\n    .forEach((route) => {\n      infoTable.push([route.methods.map(toUpper).join('|'), route.path]);\n    });\n\n  console.log(infoTable.toString());\n\n  await app.destroy();\n};\n\n/**\n * `$ strapi routes:list``\n */\nconst command: StrapiCommand = () => {\n  return createCommand('routes:list')\n    .description('List all the application routes')\n    .action(runAction('routes:list', action));\n};\n\nexport { action, command };\n"],"names":["compileStrapi","createStrapi","CLITable","chalk","toUpper","createCommand","runAction"],"mappings":";;;;;;;;;;;AAUA,MAAM,SAAS,YAAY;AACnB,QAAA,aAAa,MAAMA,mBAAc;AACvC,QAAM,MAAM,MAAMC,KAAAA,aAAa,UAAU,EAAE,KAAK;AAEhD,QAAM,OAAO,IAAI,OAAO,MAAA,EAAQ,WAAW;AAErC,QAAA,YAAY,IAAIC,0BAAS;AAAA,IAC7B,MAAM,CAACC,eAAM,QAAA,KAAK,QAAQ,GAAGA,uBAAM,KAAK,MAAM,CAAC;AAAA,IAC/C,WAAW,CAAC,EAAE;AAAA,EAAA,CACf;AAGE,OAAA,OAAO,CAAC,UAAU,MAAM,QAAQ,MAAM,EACtC,QAAQ,CAAC,UAAU;AAClB,cAAU,KAAK,CAAC,MAAM,QAAQ,IAAIC,UAAO,EAAE,KAAK,GAAG,GAAG,MAAM,IAAI,CAAC;AAAA,EAAA,CAClE;AAEK,UAAA,IAAI,UAAU,UAAU;AAEhC,QAAM,IAAI,QAAQ;AACpB;AAKA,MAAM,UAAyB,MAAM;AAC5B,SAAAC,UAAA,cAAc,aAAa,EAC/B,YAAY,iCAAiC,EAC7C,OAAOC,QAAA,UAAU,eAAe,MAAM,CAAC;AAC5C;;;"}
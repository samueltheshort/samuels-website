{"version":3,"file":"command.mjs","sources":["../../../../src/cli/commands/import/command.ts"],"sourcesContent":["import path from 'path';\nimport { createCommand, Option } from 'commander';\nimport inquirer from 'inquirer';\nimport {\n  excludeOption,\n  onlyOption,\n  throttleOption,\n  validateExcludeOnly,\n} from '../../utils/data-transfer';\nimport { getCommanderConfirmMessage, forceOption } from '../../utils/commander';\nimport { exitWith } from '../../utils/helpers';\nimport action from './action';\n\n/**\n * `$ strapi import`\n */\nconst command = () => {\n  return (\n    createCommand('import')\n      .description('Import data from file to Strapi')\n      .allowExcessArguments(false)\n      .requiredOption(\n        '-f, --file <file>',\n        'path and filename for the Strapi export file you want to import'\n      )\n      .addOption(\n        new Option(\n          '-k, --key <string>',\n          'Provide encryption key in command instead of using the prompt'\n        )\n      )\n      .addOption(new Option('--verbose', 'Enable verbose logs'))\n      .addOption(forceOption)\n      .addOption(excludeOption)\n      .addOption(onlyOption)\n      .addOption(throttleOption)\n      .hook('preAction', validateExcludeOnly)\n      .hook('preAction', async (thisCommand) => {\n        const opts = thisCommand.opts();\n        const ext = path.extname(String(opts.file));\n\n        // check extension to guess if we should prompt for key\n        if (ext === '.enc') {\n          if (!opts.key) {\n            const answers = await inquirer.prompt([\n              {\n                type: 'password',\n                message: 'Please enter your decryption key',\n                name: 'key',\n              },\n            ]);\n            if (!answers.key?.length) {\n              exitWith(1, 'No key entered, aborting import.');\n            }\n            opts.key = answers.key;\n          }\n        }\n      })\n      // set decrypt and decompress options based on filename\n      .hook('preAction', (thisCommand) => {\n        const opts = thisCommand.opts();\n\n        const { extname, parse } = path;\n\n        let file = opts.file;\n\n        if (extname(file) === '.enc') {\n          file = parse(file).name; // trim the .enc extension\n          thisCommand.opts().decrypt = true;\n        } else {\n          thisCommand.opts().decrypt = false;\n        }\n\n        if (extname(file) === '.gz') {\n          file = parse(file).name; // trim the .gz extension\n          thisCommand.opts().decompress = true;\n        } else {\n          thisCommand.opts().decompress = false;\n        }\n\n        if (extname(file) !== '.tar') {\n          exitWith(\n            1,\n            `The file '${opts.file}' does not appear to be a valid Strapi data file. It must have an extension ending in .tar[.gz][.enc]`\n          );\n        }\n      })\n      .hook(\n        'preAction',\n        getCommanderConfirmMessage(\n          'The import will delete your existing data! Are you sure you want to proceed?',\n          { failMessage: 'Import process aborted' }\n        )\n      )\n      .action(action)\n  );\n};\n\nexport default command;\n"],"names":[],"mappings":";;;;;;;AAgBA,MAAM,UAAU,MAAM;AAElB,SAAA,cAAc,QAAQ,EACnB,YAAY,iCAAiC,EAC7C,qBAAqB,KAAK,EAC1B;AAAA,IACC;AAAA,IACA;AAAA,EAAA,EAED;AAAA,IACC,IAAI;AAAA,MACF;AAAA,MACA;AAAA,IAAA;AAAA,EAEJ,EACC,UAAU,IAAI,OAAO,aAAa,qBAAqB,CAAC,EACxD,UAAU,WAAW,EACrB,UAAU,aAAa,EACvB,UAAU,UAAU,EACpB,UAAU,cAAc,EACxB,KAAK,aAAa,mBAAmB,EACrC,KAAK,aAAa,OAAO,gBAAgB;AAClC,UAAA,OAAO,YAAY,KAAK;AAC9B,UAAM,MAAM,KAAK,QAAQ,OAAO,KAAK,IAAI,CAAC;AAG1C,QAAI,QAAQ,QAAQ;AACd,UAAA,CAAC,KAAK,KAAK;AACP,cAAA,UAAU,MAAM,SAAS,OAAO;AAAA,UACpC;AAAA,YACE,MAAM;AAAA,YACN,SAAS;AAAA,YACT,MAAM;AAAA,UAAA;AAAA,QACR,CACD;AACG,YAAA,CAAC,QAAQ,KAAK,QAAQ;AACxB,mBAAS,GAAG,kCAAkC;AAAA,QAAA;AAEhD,aAAK,MAAM,QAAQ;AAAA,MAAA;AAAA,IACrB;AAAA,EAEH,CAAA,EAEA,KAAK,aAAa,CAAC,gBAAgB;AAC5B,UAAA,OAAO,YAAY,KAAK;AAExB,UAAA,EAAE,SAAS,MAAA,IAAU;AAE3B,QAAI,OAAO,KAAK;AAEZ,QAAA,QAAQ,IAAI,MAAM,QAAQ;AACrB,aAAA,MAAM,IAAI,EAAE;AACP,kBAAA,OAAO,UAAU;AAAA,IAAA,OACxB;AACO,kBAAA,OAAO,UAAU;AAAA,IAAA;AAG3B,QAAA,QAAQ,IAAI,MAAM,OAAO;AACpB,aAAA,MAAM,IAAI,EAAE;AACP,kBAAA,OAAO,aAAa;AAAA,IAAA,OAC3B;AACO,kBAAA,OAAO,aAAa;AAAA,IAAA;AAG9B,QAAA,QAAQ,IAAI,MAAM,QAAQ;AAC5B;AAAA,QACE;AAAA,QACA,aAAa,KAAK,IAAI;AAAA,MACxB;AAAA,IAAA;AAAA,EAEH,CAAA,EACA;AAAA,IACC;AAAA,IACA;AAAA,MACE;AAAA,MACA,EAAE,aAAa,yBAAyB;AAAA,IAAA;AAAA,EAC1C,EAED,OAAO,MAAM;AAEpB;"}
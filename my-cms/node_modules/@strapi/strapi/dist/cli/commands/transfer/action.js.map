{"version":3,"file":"action.js","sources":["../../../../src/cli/commands/transfer/action.ts"],"sourcesContent":["import { isObject } from 'lodash/fp';\nimport { engine as engineDataTransfer, strapi as strapiDataTransfer } from '@strapi/data-transfer';\n\nimport {\n  buildTransferTable,\n  createStrapiInstance,\n  DEFAULT_IGNORED_CONTENT_TYPES,\n  formatDiagnostic,\n  loadersFactory,\n  exitMessageText,\n  abortTransfer,\n  getTransferTelemetryPayload,\n  setSignalHandler,\n  getDiffHandler,\n  getAssetsBackupHandler,\n  parseRestoreFromOptions,\n} from '../../utils/data-transfer';\nimport { exitWith } from '../../utils/helpers';\n\nconst { createTransferEngine } = engineDataTransfer;\nconst {\n  providers: {\n    createRemoteStrapiDestinationProvider,\n    createLocalStrapiSourceProvider,\n    createLocalStrapiDestinationProvider,\n    createRemoteStrapiSourceProvider,\n  },\n} = strapiDataTransfer;\n\ninterface CmdOptions {\n  from?: URL;\n  fromToken: string;\n  to: URL;\n  toToken: string;\n  verbose?: boolean;\n  only?: (keyof engineDataTransfer.TransferGroupFilter)[];\n  exclude?: (keyof engineDataTransfer.TransferGroupFilter)[];\n  throttle?: number;\n  force?: boolean;\n}\n/**\n * Transfer command.\n *\n * Transfers data between local Strapi and remote Strapi instances\n */\nexport default async (opts: CmdOptions) => {\n  // Validate inputs from Commander\n  if (!isObject(opts)) {\n    exitWith(1, 'Could not parse command arguments');\n  }\n\n  if (!(opts.from || opts.to) || (opts.from && opts.to)) {\n    exitWith(1, 'Exactly one source (from) or destination (to) option must be provided');\n  }\n\n  const strapi = await createStrapiInstance();\n  let source;\n  let destination;\n\n  // if no URL provided, use local Strapi\n  if (!opts.from) {\n    source = createLocalStrapiSourceProvider({\n      getStrapi: () => strapi,\n    });\n  }\n  // if URL provided, set up a remote source provider\n  else {\n    if (!opts.fromToken) {\n      exitWith(1, 'Missing token for remote destination');\n    }\n\n    source = createRemoteStrapiSourceProvider({\n      getStrapi: () => strapi,\n      url: opts.from,\n      auth: {\n        type: 'token',\n        token: opts.fromToken,\n      },\n    });\n  }\n\n  // if no URL provided, use local Strapi\n  if (!opts.to) {\n    destination = createLocalStrapiDestinationProvider({\n      getStrapi: () => strapi,\n      strategy: 'restore',\n      restore: parseRestoreFromOptions(opts),\n    });\n  }\n  // if URL provided, set up a remote destination provider\n  else {\n    if (!opts.toToken) {\n      exitWith(1, 'Missing token for remote destination');\n    }\n\n    destination = createRemoteStrapiDestinationProvider({\n      url: opts.to,\n      auth: {\n        type: 'token',\n        token: opts.toToken,\n      },\n      strategy: 'restore',\n      restore: parseRestoreFromOptions(opts),\n    });\n  }\n\n  if (!source || !destination) {\n    exitWith(1, 'Could not create providers');\n  }\n\n  const engine = createTransferEngine(source, destination, {\n    versionStrategy: 'exact',\n    schemaStrategy: 'strict',\n    exclude: opts.exclude,\n    only: opts.only,\n    throttle: opts.throttle,\n    transforms: {\n      links: [\n        {\n          filter(link) {\n            return (\n              !DEFAULT_IGNORED_CONTENT_TYPES.includes(link.left.type) &&\n              !DEFAULT_IGNORED_CONTENT_TYPES.includes(link.right.type)\n            );\n          },\n        },\n      ],\n      entities: [\n        {\n          filter(entity) {\n            return !DEFAULT_IGNORED_CONTENT_TYPES.includes(entity.type);\n          },\n        },\n      ],\n    },\n  });\n\n  engine.diagnostics.onDiagnostic(formatDiagnostic('transfer', opts.verbose));\n\n  const progress = engine.progress.stream;\n\n  const { updateLoader } = loadersFactory();\n\n  engine.onSchemaDiff(getDiffHandler(engine, { force: opts.force, action: 'transfer' }));\n\n  engine.addErrorHandler(\n    'ASSETS_DIRECTORY_ERR',\n    getAssetsBackupHandler(engine, { force: opts.force, action: 'transfer' })\n  );\n\n  progress.on(`stage::start`, ({ stage, data }) => {\n    updateLoader(stage, data).start();\n  });\n\n  progress.on('stage::finish', ({ stage, data }) => {\n    updateLoader(stage, data).succeed();\n  });\n\n  progress.on('stage::progress', ({ stage, data }) => {\n    updateLoader(stage, data);\n  });\n\n  progress.on('stage::error', ({ stage, data }) => {\n    updateLoader(stage, data).fail();\n  });\n\n  progress.on('transfer::start', async () => {\n    console.log(`Starting transfer...`);\n\n    await strapi.telemetry.send('didDEITSProcessStart', getTransferTelemetryPayload(engine));\n  });\n\n  let results: Awaited<ReturnType<typeof engine.transfer>>;\n  try {\n    // Abort transfer if user interrupts process\n    setSignalHandler(() => abortTransfer({ engine, strapi }));\n\n    results = await engine.transfer();\n\n    // Note: we need to await telemetry or else the process ends before it is sent\n    await strapi.telemetry.send('didDEITSProcessFinish', getTransferTelemetryPayload(engine));\n\n    try {\n      const table = buildTransferTable(results.engine);\n      console.log(table?.toString());\n    } catch (e) {\n      console.error('There was an error displaying the results of the transfer.');\n    }\n\n    exitWith(0, exitMessageText('transfer'));\n  } catch (e) {\n    await strapi.telemetry.send('didDEITSProcessFail', getTransferTelemetryPayload(engine));\n    exitWith(1, exitMessageText('transfer', true));\n  }\n};\n"],"names":["engineDataTransfer","strapiDataTransfer","isObject","exitWith","createStrapiInstance","parseRestoreFromOptions","DEFAULT_IGNORED_CONTENT_TYPES","formatDiagnostic","loadersFactory","getDiffHandler","getAssetsBackupHandler","getTransferTelemetryPayload","setSignalHandler","abortTransfer","buildTransferTable","exitMessageText"],"mappings":"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"}
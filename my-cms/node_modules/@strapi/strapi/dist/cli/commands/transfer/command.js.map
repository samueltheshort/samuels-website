{"version":3,"file":"command.js","sources":["../../../../src/cli/commands/transfer/command.ts"],"sourcesContent":["import inquirer from 'inquirer';\nimport { createCommand, Option } from 'commander';\nimport { getCommanderConfirmMessage, forceOption, parseURL } from '../../utils/commander';\nimport { exitWith, assertUrlHasProtocol, ifOptions } from '../../utils/helpers';\nimport {\n  excludeOption,\n  onlyOption,\n  throttleOption,\n  validateExcludeOnly,\n} from '../../utils/data-transfer';\n\nimport action from './action';\n\n/**\n * `$ strapi transfer`\n */\nconst command = () => {\n  return (\n    createCommand('transfer')\n      .description('Transfer data from one source to another')\n      .allowExcessArguments(false)\n      .addOption(\n        new Option(\n          '--from <sourceURL>',\n          `URL of the remote Strapi instance to get data from`\n        ).argParser(parseURL)\n      )\n      .addOption(new Option('--from-token <token>', `Transfer token for the remote Strapi source`))\n      .addOption(\n        new Option(\n          '--to <destinationURL>',\n          `URL of the remote Strapi instance to send data to`\n        ).argParser(parseURL)\n      )\n\n      .addOption(\n        new Option('--to-token <token>', `Transfer token for the remote Strapi destination`)\n      )\n      .addOption(new Option('--verbose', 'Enable verbose logs'))\n      .addOption(forceOption)\n      .addOption(excludeOption)\n      .addOption(onlyOption)\n      .addOption(throttleOption)\n      .hook('preAction', validateExcludeOnly)\n      .hook(\n        'preAction',\n        ifOptions(\n          (opts) => !(opts.from || opts.to) || (opts.from && opts.to),\n          async () =>\n            exitWith(\n              1,\n              'Exactly one remote source (from) or destination (to) option must be provided'\n            )\n        )\n      )\n      // If --from is used, validate the URL and token\n      .hook(\n        'preAction',\n        ifOptions(\n          (opts) => opts.from,\n          async (thisCommand) => {\n            assertUrlHasProtocol(thisCommand.opts().from, ['https:', 'http:']);\n            if (!thisCommand.opts().fromToken) {\n              const answers = await inquirer.prompt([\n                {\n                  type: 'password',\n                  message: 'Please enter your transfer token for the remote Strapi source',\n                  name: 'fromToken',\n                },\n              ]);\n              if (!answers.fromToken?.length) {\n                exitWith(1, 'No token provided for remote source, aborting transfer.');\n              }\n              thisCommand.opts().fromToken = answers.fromToken;\n            }\n\n            await getCommanderConfirmMessage(\n              'The transfer will delete all the local Strapi assets and its database. Are you sure you want to proceed?',\n              { failMessage: 'Transfer process aborted' }\n            )(thisCommand);\n          }\n        )\n      )\n      // If --to is used, validate the URL, token, and confirm restore\n      .hook(\n        'preAction',\n        ifOptions(\n          (opts) => opts.to,\n          async (thisCommand) => {\n            assertUrlHasProtocol(thisCommand.opts().to, ['https:', 'http:']);\n            if (!thisCommand.opts().toToken) {\n              const answers = await inquirer.prompt([\n                {\n                  type: 'password',\n                  message: 'Please enter your transfer token for the remote Strapi destination',\n                  name: 'toToken',\n                },\n              ]);\n              if (!answers.toToken?.length) {\n                exitWith(1, 'No token provided for remote destination, aborting transfer.');\n              }\n              thisCommand.opts().toToken = answers.toToken;\n            }\n\n            await getCommanderConfirmMessage(\n              'The transfer will delete existing data from the remote Strapi! Are you sure you want to proceed?',\n              { failMessage: 'Transfer process aborted' }\n            )(thisCommand);\n          }\n        )\n      )\n      .action(action)\n  );\n};\n\nexport default command;\n"],"names":["createCommand","Option","parseURL","forceOption","excludeOption","onlyOption","throttleOption","validateExcludeOnly","ifOptions","exitWith","assertUrlHasProtocol","inquirer","getCommanderConfirmMessage"],"mappings":";;;;;;;;;AAgBA,MAAM,UAAU,MAAM;AAElB,SAAAA,UAAA,cAAc,UAAU,EACrB,YAAY,0CAA0C,EACtD,qBAAqB,KAAK,EAC1B;AAAA,IACC,IAAIC,UAAA;AAAA,MACF;AAAA,MACA;AAAA,IACF,EAAE,UAAUC,YAAQ,QAAA;AAAA,EAAA,EAErB,UAAU,IAAID,iBAAO,wBAAwB,6CAA6C,CAAC,EAC3F;AAAA,IACC,IAAIA,UAAA;AAAA,MACF;AAAA,MACA;AAAA,IACF,EAAE,UAAUC,YAAQ,QAAA;AAAA,EAAA,EAGrB;AAAA,IACC,IAAID,UAAO,OAAA,sBAAsB,kDAAkD;AAAA,EAAA,EAEpF,UAAU,IAAIA,UAAAA,OAAO,aAAa,qBAAqB,CAAC,EACxD,UAAUE,YAAW,WAAA,EACrB,UAAUC,aAAa,aAAA,EACvB,UAAUC,uBAAU,EACpB,UAAUC,aAAAA,cAAc,EACxB,KAAK,aAAaC,aAAmB,mBAAA,EACrC;AAAA,IACC;AAAA,IACAC,QAAA;AAAA,MACE,CAAC,SAAS,EAAE,KAAK,QAAQ,KAAK,OAAQ,KAAK,QAAQ,KAAK;AAAA,MACxD,YACEC,QAAA;AAAA,QACE;AAAA,QACA;AAAA,MAAA;AAAA,IACF;AAAA,EACJ,EAGD;AAAA,IACC;AAAA,IACAD,QAAA;AAAA,MACE,CAAC,SAAS,KAAK;AAAA,MACf,OAAO,gBAAgB;AACrBE,gBAAA,qBAAqB,YAAY,KAAK,EAAE,MAAM,CAAC,UAAU,OAAO,CAAC;AACjE,YAAI,CAAC,YAAY,KAAK,EAAE,WAAW;AAC3B,gBAAA,UAAU,MAAMC,kBAAA,QAAS,OAAO;AAAA,YACpC;AAAA,cACE,MAAM;AAAA,cACN,SAAS;AAAA,cACT,MAAM;AAAA,YAAA;AAAA,UACR,CACD;AACG,cAAA,CAAC,QAAQ,WAAW,QAAQ;AAC9BF,oBAAA,SAAS,GAAG,yDAAyD;AAAA,UAAA;AAE3D,sBAAA,KAAA,EAAO,YAAY,QAAQ;AAAA,QAAA;AAGnC,cAAAG,YAAA;AAAA,UACJ;AAAA,UACA,EAAE,aAAa,2BAA2B;AAAA,UAC1C,WAAW;AAAA,MAAA;AAAA,IACf;AAAA,EACF,EAGD;AAAA,IACC;AAAA,IACAJ,QAAA;AAAA,MACE,CAAC,SAAS,KAAK;AAAA,MACf,OAAO,gBAAgB;AACrBE,gBAAA,qBAAqB,YAAY,KAAK,EAAE,IAAI,CAAC,UAAU,OAAO,CAAC;AAC/D,YAAI,CAAC,YAAY,KAAK,EAAE,SAAS;AACzB,gBAAA,UAAU,MAAMC,kBAAA,QAAS,OAAO;AAAA,YACpC;AAAA,cACE,MAAM;AAAA,cACN,SAAS;AAAA,cACT,MAAM;AAAA,YAAA;AAAA,UACR,CACD;AACG,cAAA,CAAC,QAAQ,SAAS,QAAQ;AAC5BF,oBAAA,SAAS,GAAG,8DAA8D;AAAA,UAAA;AAEhE,sBAAA,KAAA,EAAO,UAAU,QAAQ;AAAA,QAAA;AAGjC,cAAAG,YAAA;AAAA,UACJ;AAAA,UACA,EAAE,aAAa,2BAA2B;AAAA,UAC1C,WAAW;AAAA,MAAA;AAAA,IACf;AAAA,EACF,EAED,OAAO,MAAM;AAEpB;;"}
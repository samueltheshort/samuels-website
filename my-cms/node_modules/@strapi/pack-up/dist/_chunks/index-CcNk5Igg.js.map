{"version":3,"file":"index-CcNk5Igg.js","sources":["../../src/node/createTasks.ts","../../src/node/tasks/dts/diagnostic.ts","../../src/node/tasks/dts/build.ts","../../src/node/tasks/dts/watch.ts","../../src/node/tasks/vite/config.ts","../../src/node/tasks/vite/build.ts","../../src/node/tasks/vite/watch.ts","../../src/node/tasks/index.ts"],"sourcesContent":["import path from 'path';\n\nimport type { Extensions } from './core/exports';\nimport type { BuildContext, Runtime } from './createBuildContext';\nimport type { DtsBuildTask } from './tasks/dts/build';\nimport type { DtsBaseTask } from './tasks/dts/types';\nimport type { DtsWatchTask } from './tasks/dts/watch';\nimport type { ViteBuildTask } from './tasks/vite/build';\nimport type { ViteBaseTask, ViteTaskEntry } from './tasks/vite/types';\nimport type { ViteWatchTask } from './tasks/vite/watch';\n\ntype BuildTask = DtsBuildTask | ViteBuildTask;\ntype WatchTask = ViteWatchTask | DtsWatchTask;\n\ntype BaseTask = ViteBaseTask | DtsBaseTask;\n\n/**\n * @description Create the build tasks for the pipeline, this\n * comes from the exports map we've created in the build context.\n * But handles each export line uniquely with space to add more\n * as the standard develops.\n */\nconst createTasks =\n  <TMode extends 'build' | 'watch'>(mode: TMode) =>\n  async (ctx: BuildContext): Promise<TMode extends 'build' ? BuildTask[] : WatchTask[]> => {\n    const tasks: Array<BaseTask> = [];\n\n    const dtsTask: DtsBaseTask = {\n      type: `${mode}:dts`,\n      entries: [],\n    };\n\n    const viteTasks: Record<string, ViteBaseTask> = {};\n\n    const createViteTask = (\n      format: Extensions,\n      runtime: Runtime,\n      { output, ...restEntry }: ViteTaskEntry & Pick<ViteWatchTask | ViteBuildTask, 'output'>\n    ) => {\n      const buildId = `${format}:${output}`;\n\n      if (viteTasks[buildId]) {\n        viteTasks[buildId]?.entries.push(restEntry);\n\n        if (output !== viteTasks[buildId]?.output) {\n          ctx.logger.warn(\n            'Multiple entries with different outputs for the same format are not supported. The first output will be used.'\n          );\n        }\n      } else {\n        viteTasks[buildId] = {\n          type: `${mode}:js`,\n          format,\n          output,\n          runtime,\n          entries: [restEntry],\n        };\n      }\n    };\n\n    const exps = Object.entries(ctx.exports).map(([exportPath, exportEntry]) => ({\n      ...exportEntry,\n      _path: exportPath,\n    }));\n\n    for (const exp of exps) {\n      if (exp.types) {\n        const importId = path.join(ctx.pkg.name, exp._path);\n\n        dtsTask.entries.push({\n          importId,\n          exportPath: exp._path,\n          sourcePath: exp.source,\n          targetPath: exp.types,\n        });\n      }\n\n      if (exp.require) {\n        /**\n         * register CJS task\n         */\n        createViteTask('cjs', ctx.runtime ?? '*', {\n          path: exp._path,\n          entry: exp.source,\n          output: exp.require,\n        });\n      }\n\n      if (exp.import) {\n        /**\n         * register ESM task\n         */\n        createViteTask('es', ctx.runtime ?? '*', {\n          path: exp._path,\n          entry: exp.source,\n          output: exp.import,\n        });\n      }\n\n      if (exp.browser?.require) {\n        createViteTask('cjs', 'web', {\n          path: exp._path,\n          entry: exp.browser?.source || exp.source,\n          output: exp.browser.require,\n        });\n      }\n\n      if (exp.browser?.import) {\n        createViteTask('cjs', 'web', {\n          path: exp._path,\n          entry: exp.browser?.source || exp.source,\n          output: exp.browser.import,\n        });\n      }\n    }\n\n    const bundles = ctx.config.bundles ?? [];\n\n    for (const bundle of bundles) {\n      const idx = bundles.indexOf(bundle);\n\n      if (bundle.require) {\n        createViteTask('cjs', (bundle.runtime || ctx.runtime) ?? '*', {\n          path: `bundle_cjs_${idx}`,\n          entry: bundle.source,\n          output: bundle.require,\n        });\n      }\n\n      if (bundle.import) {\n        createViteTask('es', (bundle.runtime || ctx.runtime) ?? '*', {\n          path: `bundle_esm_${idx}`,\n          entry: bundle.source,\n          output: bundle.import,\n        });\n      }\n\n      if (bundle.types) {\n        const importId = path.join(ctx.pkg.name, bundle.source);\n\n        dtsTask.entries.push({\n          importId,\n          exportPath: bundle.source,\n          sourcePath: bundle.source,\n          targetPath: bundle.types,\n          tsconfig: bundle.tsconfig,\n        });\n      }\n    }\n\n    if (dtsTask.entries.length) {\n      tasks.push(dtsTask);\n    }\n    if (Object.values(viteTasks).length) {\n      tasks.push(...Object.values(viteTasks));\n    }\n\n    return tasks as TMode extends 'build' ? BuildTask[] : WatchTask[];\n  };\n\nconst createBuildTasks = createTasks('build');\nconst createWatchTasks = createTasks('watch');\n\nexport { createBuildTasks, createWatchTasks };\nexport type { BuildTask, WatchTask, BaseTask };\n","import chalk from 'chalk';\nimport path from 'path';\nimport ts from 'typescript';\n\nimport type { Logger } from '../../core/logger';\n\nconst printDiagnostic = (\n  diagnostic: ts.Diagnostic,\n  { logger, cwd }: { logger: Logger; cwd: string }\n) => {\n  let output = ts.flattenDiagnosticMessageText(diagnostic.messageText, ts.sys.newLine);\n\n  if (diagnostic.file && diagnostic.start) {\n    const { line, character } = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start);\n    const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, ts.sys.newLine);\n\n    const file = path.relative(cwd, diagnostic.file.fileName);\n\n    output = [\n      `${chalk.cyan(file)}:${chalk.cyan(line + 1)}:${chalk.cyan(character + 1)} - `,\n      `${chalk.gray(`TS${diagnostic.code}:`)} ${message}`,\n    ].join('');\n  }\n\n  switch (diagnostic.category) {\n    case ts.DiagnosticCategory.Error:\n      logger.error(output);\n      break;\n    case ts.DiagnosticCategory.Warning:\n      logger.warn(output);\n      break;\n    case ts.DiagnosticCategory.Message:\n      logger.info(output);\n      break;\n    case ts.DiagnosticCategory.Suggestion:\n      logger.info(output);\n      break;\n    default:\n      break;\n  }\n};\n\nexport { printDiagnostic };\n","import chalk from 'chalk';\nimport os from 'os';\nimport { Observable } from 'rxjs';\nimport ts from 'typescript';\n\nimport { isError } from '../../core/errors';\nimport { loadTsConfig } from '../../core/tsconfig';\n\nimport { printDiagnostic } from './diagnostic';\n\nimport type { DtsBaseTask } from './types';\nimport type { TaskHandler } from '../index';\n\ninterface DtsBuildTask extends DtsBaseTask {\n  type: 'build:dts';\n}\n\nconst dtsBuildTask: TaskHandler<DtsBuildTask> = {\n  print(ctx, task) {\n    const entries = [\n      '   entries:',\n      ...task.entries.map((entry) =>\n        [\n          '    â€“ ',\n          chalk.green(`${entry.importId} `),\n          `${chalk.cyan(entry.sourcePath)} ${chalk.gray('->')} ${chalk.cyan(entry.targetPath)}`,\n        ].join('')\n      ),\n    ];\n\n    ctx.logger.log(['Building type files:', ...entries].join(os.EOL));\n  },\n  run$(ctx, task) {\n    return new Observable((subscriber) => {\n      Promise.all(\n        task.entries.map(async (entry) => {\n          /**\n           * Entry level tsconfig's take precedence\n           */\n          const tsconfig = entry.tsconfig\n            ? loadTsConfig({\n                cwd: ctx.cwd,\n                path: entry.tsconfig,\n                logger: ctx.logger,\n              })\n            : ctx.ts;\n\n          if (!tsconfig) {\n            ctx.logger.warn(\n              `You've added a types entry but no tsconfig.json was found for ${entry.targetPath}. Skipping...`\n            );\n\n            return;\n          }\n\n          const program = ts.createProgram(tsconfig.config.fileNames, tsconfig.config.options);\n\n          const emitResult = program.emit();\n\n          const allDiagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);\n\n          for (const diagnostic of allDiagnostics) {\n            printDiagnostic(diagnostic, { logger: ctx.logger, cwd: ctx.cwd });\n          }\n\n          const errors = allDiagnostics.filter(\n            (diag) => diag.category === ts.DiagnosticCategory.Error\n          );\n\n          if (errors.length) {\n            throw new Error('Failed to compile TypeScript definitions');\n          }\n        })\n      )\n        .then(() => {\n          subscriber.complete();\n        })\n        .catch((err) => {\n          subscriber.error(err);\n        });\n    });\n  },\n  async success(ctx, task) {\n    const msg = [\n      'Built types, entries:',\n      task.entries\n        .map(\n          (entry) =>\n            `    ${chalk.blue(`${entry.importId}`)}: ${entry.sourcePath} -> ${entry.targetPath}`\n        )\n        .join(os.EOL),\n    ];\n\n    ctx.logger.success(msg.join(os.EOL));\n  },\n  async fail(ctx, task, err) {\n    if (isError(err)) {\n      ctx.logger.error(err.message);\n    }\n  },\n};\n\nexport { dtsBuildTask };\n\nexport type { DtsBuildTask };\n","import chalk from 'chalk';\nimport os from 'os';\nimport { Observable } from 'rxjs';\nimport ts from 'typescript';\n\nimport { isError } from '../../core/errors';\nimport { loadTsConfig } from '../../core/tsconfig';\n\nimport { printDiagnostic } from './diagnostic';\n\nimport type { DtsBaseTask } from './types';\nimport type { TaskHandler } from '../index';\n\ninterface DtsWatchTask extends DtsBaseTask {\n  type: 'watch:dts';\n}\n\nconst dtsWatchTask: TaskHandler<DtsWatchTask, ts.Diagnostic> = {\n  print(ctx, task) {\n    const msg = [\n      'Building Types, entries:',\n      task.entries\n        .map(\n          (entry) =>\n            `    ${chalk.blue(`${entry.importId}`)}: ${entry.sourcePath} -> ${entry.targetPath}`\n        )\n        .join(os.EOL),\n    ];\n\n    ctx.logger.success(msg.join(os.EOL));\n  },\n  run$(ctx, task) {\n    let programs: Array<\n      ts.WatchOfConfigFile<ts.EmitAndSemanticDiagnosticsBuilderProgram> | undefined\n    > = [];\n\n    return new Observable((subscriber) => {\n      Promise.all(\n        task.entries.map(async (entry) => {\n          /**\n           * Entry level tsconfig's take precedence\n           */\n          const tsconfig = entry.tsconfig\n            ? loadTsConfig({\n                cwd: ctx.cwd,\n                path: entry.tsconfig,\n                logger: ctx.logger,\n              })\n            : ctx.ts;\n\n          if (!tsconfig) {\n            ctx.logger.warn(\n              `You've added a types entry but no tsconfig.json was found for ${entry.targetPath}. Skipping...`\n            );\n\n            return;\n          }\n\n          const compilerHost = ts.createWatchCompilerHost(\n            tsconfig.path,\n            tsconfig.config.options,\n            ts.sys,\n            ts.createEmitAndSemanticDiagnosticsBuilderProgram,\n            (diagnostic) => {\n              subscriber.next(diagnostic);\n            },\n            (diagnostic) => {\n              subscriber.next(diagnostic);\n            }\n          );\n\n          return ts.createWatchProgram(compilerHost);\n        })\n      )\n        .then((progs) => {\n          programs = progs;\n        })\n        .catch((err) => {\n          subscriber.error(err);\n        });\n\n      return () => {\n        programs.forEach((prog) => {\n          prog?.close();\n        });\n      };\n    });\n  },\n  async success(ctx, task, diagnostic) {\n    const { logger, cwd } = ctx;\n\n    /**\n     * This code is \"Found 0 errors. Watching for file changes.\"\n     * which is equivalent to \"BUNDLE_END\" code with rollup/vite.\n     *\n     * So we use this to say, hey we've built your types again!\n     */\n    if (diagnostic.code === 6194) {\n      this.print(ctx, task);\n    }\n\n    /**\n     * We don't want to print messages or suggestions.\n     * Only errors and warnings in watch mode.\n     */\n    if (\n      diagnostic.category === ts.DiagnosticCategory.Message ||\n      diagnostic.category === ts.DiagnosticCategory.Suggestion\n    ) {\n      return;\n    }\n\n    printDiagnostic(diagnostic, { logger, cwd });\n  },\n  async fail(ctx, task, err) {\n    if (isError(err)) {\n      ctx.logger.error(err);\n    }\n  },\n};\n\nexport { dtsWatchTask };\n\nexport type { DtsWatchTask };\n","/* eslint-disable no-nested-ternary */\nimport react from '@vitejs/plugin-react-swc';\nimport { builtinModules } from 'node:module';\nimport path from 'path';\n\nimport { resolveConfigProperty } from '../../core/config';\n\nimport type { ViteBaseTask } from './types';\nimport type { BuildContext } from '../../createBuildContext';\nimport type { InlineConfig } from 'vite';\n\n/**\n * @internal\n */\nconst resolveViteConfig = async (ctx: BuildContext, task: ViteBaseTask) => {\n  const { cwd, distPath, targets, external, extMap, pkg, exports: exportMap } = ctx;\n  const { entries, format, output, runtime } = task;\n  const outputExt = extMap[pkg.type || 'commonjs'][format];\n  const outDir = path.relative(cwd, distPath);\n\n  const { createLogger } = await import('vite');\n  const customLogger = createLogger();\n  customLogger.warn = (msg) => ctx.logger.warn(msg);\n  customLogger.warnOnce = (msg) => ctx.logger.warn(msg);\n  customLogger.error = (msg) => ctx.logger.error(msg);\n  customLogger.info = () => {};\n\n  const exportIds = Object.keys(exportMap).map((exportPath) => path.join(pkg.name, exportPath));\n  const sourcePaths = Object.values(exportMap).map((exp) => path.resolve(cwd, exp.source));\n\n  const basePlugins = runtime === 'node' ? [] : [react()];\n\n  const plugins = ctx.config.plugins\n    ? typeof ctx.config.plugins === 'function'\n      ? ctx.config.plugins({ runtime })\n      : ctx.config.plugins\n    : [];\n\n  const config = {\n    configFile: false,\n    root: cwd,\n    mode: 'production',\n    logLevel: 'warn',\n    clearScreen: false,\n    customLogger,\n    build: {\n      minify: resolveConfigProperty(ctx.config.minify, false),\n      sourcemap: resolveConfigProperty(ctx.config.sourcemap, true),\n      /**\n       * The task runner will clear this for us\n       */\n      emptyOutDir: false,\n      target: targets[runtime],\n      outDir,\n      lib: {\n        entry: entries.map((e) => e.entry),\n        formats: [format],\n        /**\n         * this enforces the file name to match what the output we've\n         * determined from the package.json exports. However, when preserving modules\n         * we want to let Rollup handle the file names.\n         */\n        fileName: resolveConfigProperty(ctx.config.preserveModules, false)\n          ? undefined\n          : () => {\n              return `${path.relative(outDir, output).replace(/\\.[^/.]+$/, '')}${outputExt}`;\n            },\n      },\n      rollupOptions: {\n        external(id, importer) {\n          // Check if the id is a self-referencing import\n          if (exportIds?.includes(id)) {\n            return true;\n          }\n\n          // Check if the id is a file path that points to an exported source file\n          if (importer && (id.startsWith('.') || id.startsWith('/'))) {\n            const idPath = path.resolve(path.dirname(importer), id);\n\n            if (sourcePaths?.includes(idPath)) {\n              ctx.logger.warn(\n                `detected self-referencing import â€“ treating as external: ${path.relative(\n                  cwd,\n                  idPath\n                )}`\n              );\n\n              return true;\n            }\n          }\n\n          const idParts = id.split('/');\n\n          const name = idParts[0]?.startsWith('@') ? `${idParts[0]}/${idParts[1]}` : idParts[0];\n\n          const builtinModulesWithNodePrefix = [\n            ...builtinModules,\n            ...builtinModules.map((modName) => `node:${modName}`),\n          ];\n\n          if (\n            (name && external.includes(name)) ||\n            (name && builtinModulesWithNodePrefix.includes(name))\n          ) {\n            return true;\n          }\n\n          return false;\n        },\n        output: {\n          preserveModules: resolveConfigProperty(ctx.config.preserveModules, false),\n          /**\n           * Mimic TypeScript's behavior, by setting the value to \"auto\" to control\n           * how Rollup handles default, namespace and dynamic imports from external\n           * dependencies in formats like CommonJS that do not natively support\n           * these concepts. Mainly styled-components@5\n           *\n           * For more info see https://rollupjs.org/configuration-options/#output-interop\n           */\n          interop: 'auto',\n          chunkFileNames() {\n            const parts = outputExt.split('.');\n\n            if (parts.length === 3) {\n              return `_chunks/[name]-[hash].${parts[2]}`;\n            }\n\n            return `_chunks/[name]-[hash]${outputExt}`;\n          },\n        },\n      },\n    },\n    plugins: [...basePlugins, ...plugins],\n  } satisfies InlineConfig;\n\n  return import('vite').then(({ mergeConfig }) =>\n    mergeConfig(config, ctx.config.unstable_viteConfig ?? {})\n  );\n};\n\nexport { resolveViteConfig };\n","import chalk from 'chalk';\nimport os from 'os';\nimport path from 'path';\nimport { Observable } from 'rxjs';\n\nimport { isError } from '../../core/errors';\n\nimport { resolveViteConfig } from './config';\n\nimport type { ViteBaseTask } from './types';\nimport type { TaskHandler } from '../index';\n\ninterface ViteBuildTask extends ViteBaseTask {\n  type: 'build:js';\n}\n\nconst viteBuildTask: TaskHandler<ViteBuildTask> = {\n  print(ctx, task) {\n    const targetLines = [\n      '   target:',\n      ...ctx.targets[task.runtime].map((t) => chalk.cyan(`    - ${t}`)),\n    ];\n    const entries = [\n      '   entries:',\n      ...task.entries.map((entry) =>\n        [\n          '    â€“ ',\n          chalk.green(`${path.join(ctx.pkg.name, entry.path)}: `),\n          `${chalk.cyan(entry.entry)} ${chalk.gray('â†’')} ${chalk.cyan(task.output)}`,\n        ].join('')\n      ),\n    ];\n\n    ctx.logger.log(\n      ['Building javascript files:', `  format: ${task.format}`, ...targetLines, ...entries].join(\n        os.EOL\n      )\n    );\n  },\n  run$(ctx, task) {\n    return new Observable((subscriber) => {\n      resolveViteConfig(ctx, task).then((config) => {\n        ctx.logger.debug('Vite config:', os.EOL, config);\n        import('vite').then(({ build }) => {\n          build(config)\n            .then(() => {\n              subscriber.complete();\n            })\n            .catch((err) => {\n              subscriber.error(err);\n            });\n        });\n      });\n    });\n  },\n  async success(ctx, task) {\n    const msg = [\n      `Built javascript (runtime: ${task.runtime} â€“ target: ${task.format})`,\n      task.entries\n        .map(\n          (e) => `    ${chalk.blue(path.join(ctx.pkg.name, e.path))}: ${e.entry} -> ${task.output}`\n        )\n        .join(os.EOL),\n    ];\n\n    ctx.logger.success(msg.join(os.EOL));\n  },\n  async fail(ctx, task, err) {\n    if (isError(err)) {\n      ctx.logger.error(err.message);\n    }\n  },\n};\n\nexport { viteBuildTask };\nexport type { ViteBuildTask };\n","import chalk from 'chalk';\nimport os from 'os';\nimport path from 'path';\nimport { Observable } from 'rxjs';\n\nimport { isError } from '../../core/errors';\n\nimport { resolveViteConfig } from './config';\n\nimport type { ViteBaseTask } from './types';\nimport type { TaskHandler } from '../index';\n\nexport type InputOption = string | string[] | { [entryAlias: string]: string };\n\n/**\n * This is a copy because it can't be imported from `vite`.\n */\nexport type RollupWatcherEvent =\n  | { code: 'START' }\n  | { code: 'BUNDLE_START'; input?: InputOption; output: readonly string[] }\n  | {\n      code: 'BUNDLE_END';\n      duration: number;\n      input?: InputOption;\n      output: readonly string[];\n      result: object;\n    }\n  | { code: 'END' }\n  | { code: 'ERROR'; error: object; result: object | null };\n\ninterface ViteWatchTask extends ViteBaseTask {\n  type: 'watch:js';\n}\n\nconst viteWatchTask: TaskHandler<ViteWatchTask, RollupWatcherEvent> = {\n  print(ctx, task) {\n    const msg = [\n      `Building Javascript (runtime: ${task.runtime} â€“ target: ${task.format})`,\n      task.entries\n        .map(\n          (e) => `    ${chalk.blue(path.join(ctx.pkg.name, e.path))}: ${e.entry} -> ${task.output}`\n        )\n        .join(os.EOL),\n    ];\n\n    ctx.logger.success(msg.join(os.EOL));\n  },\n  run$(ctx, task) {\n    /**\n     * We need to return an observable here, but vite build\n     * is an async function which the observable does not want,\n     * so we do some classic let definition with if to workaround.\n     */\n    return new Observable((subscriber) => {\n      let watcher: object | null = null;\n\n      resolveViteConfig(ctx, task).then((config) => {\n        ctx.logger.debug(`Vite config:${os.EOL}`, config);\n        import('vite').then(({ build }) => {\n          build({\n            ...config,\n            mode: 'development',\n            build: {\n              ...config.build,\n              watch: {},\n            },\n          }).then((rollupWatcher) => {\n            watcher = rollupWatcher;\n\n            if ('on' in watcher && typeof watcher.on === 'function') {\n              watcher.on('event', (ev: any) => {\n                subscriber.next(ev);\n              });\n            }\n          });\n        });\n      });\n\n      return () => {\n        if (watcher !== null && 'close' in watcher && typeof watcher.close === 'function') {\n          watcher.close();\n        }\n      };\n    });\n  },\n  success(ctx, task, result) {\n    switch (result.code) {\n      case 'BUNDLE_END':\n        this.print(ctx, task);\n        break;\n      case 'ERROR':\n        ctx.logger.error(result.error);\n        break;\n      default:\n        break;\n    }\n  },\n  fail(ctx, task, err) {\n    if (isError(err)) {\n      ctx.logger.error(err);\n    }\n  },\n};\n\nexport { viteWatchTask };\nexport type { ViteWatchTask };\n","import { dtsBuildTask } from './dts/build';\nimport { dtsWatchTask } from './dts/watch';\nimport { viteBuildTask } from './vite/build';\nimport { viteWatchTask } from './vite/watch';\n\nimport type { BuildContext } from '../createBuildContext';\nimport type { DtsBuildTask } from './dts/build';\nimport type { DtsWatchTask } from './dts/watch';\nimport type { ViteBuildTask } from './vite/build';\nimport type { RollupWatcherEvent, ViteWatchTask } from './vite/watch';\nimport type { Observable } from 'rxjs';\nimport type ts from 'typescript';\n\ninterface TaskHandler<Task, Result = void> {\n  print(ctx: BuildContext, task: Task): void;\n  run$(ctx: BuildContext, task: Task): Observable<Result>;\n  success(ctx: BuildContext, task: Task, result: Result): void;\n  fail(ctx: BuildContext, task: Task, err: unknown): void;\n}\n\ninterface TaskHandlers {\n  'build:js': TaskHandler<ViteBuildTask>;\n  'build:dts': TaskHandler<DtsBuildTask>;\n  'watch:js': TaskHandler<ViteWatchTask, RollupWatcherEvent>;\n  'watch:dts': TaskHandler<DtsWatchTask, ts.Diagnostic>;\n}\n\nconst taskHandlers: TaskHandlers = {\n  'build:js': viteBuildTask,\n  'build:dts': dtsBuildTask,\n  'watch:js': viteWatchTask,\n  'watch:dts': dtsWatchTask,\n};\n\nexport { taskHandlers };\nexport type { TaskHandler, TaskHandlers };\n"],"names":["path","ts","chalk","os","Observable","loadTsConfig","errors","isError","react","resolveConfigProperty","builtinModules"],"mappings":"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"}
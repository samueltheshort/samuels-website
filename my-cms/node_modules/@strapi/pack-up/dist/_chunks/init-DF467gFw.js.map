{"version":3,"file":"init-DF467gFw.js","sources":["../../src/node/core/git.ts","../../src/node/templates/create.ts","../../src/node/templates/internal/files/editorConfig.ts","../../src/node/templates/internal/files/gitIgnore.ts","../../src/node/templates/internal/files/prettier.ts","../../src/node/templates/internal/default.ts","../../src/node/templates/load.ts","../../src/node/init.ts","../../src/cli/commands/init.ts"],"sourcesContent":["/**\n * Extracted & reduced from https://github.com/jonschlinkert/parse-git-config/blob/master/index.js\n */\nimport fs from 'fs/promises';\nimport ini from 'ini';\nimport os from 'os';\nimport path from 'path';\n\nconst resolveConfigPath = async ({ cwd }: { cwd: string }) => {\n  const configPath = path.join(os.homedir(), '.gitconfig');\n\n  try {\n    await fs.access(configPath);\n    return path.resolve(cwd, configPath);\n  } catch (err) {\n    return null;\n  }\n};\n\n/**\n * This is the type for a parsed git config file.\n *\n * There's another object attached but for ease of\n * readability we're only interested in user information.\n */\ninterface GitConfig {\n  user: {\n    name?: string;\n    email?: string;\n  };\n}\n\nconst parseIni = (str: string): GitConfig => {\n  const normalisedString = str.replace(/\\[(\\S+) \"(.*)\"\\]/g, (m, $1, $2) => {\n    return $1 && $2 ? `[${$1} \"${$2.split('.').join('\\\\.')}\"]` : m;\n  });\n\n  return ini.parse(normalisedString) as GitConfig;\n};\n\n/**\n * @internal\n *\n * @description Parses the global git config file.\n */\nconst parseGlobalGitConfig = async (): Promise<GitConfig | null> => {\n  const cwd = process.cwd();\n\n  const filepath = await resolveConfigPath({ cwd });\n\n  if (!filepath) {\n    return null;\n  }\n\n  const file = await fs.stat(filepath).then(() => fs.readFile(filepath, 'utf8'));\n\n  return parseIni(file);\n};\n\nexport { parseGlobalGitConfig };\nexport type { GitConfig };\n","import { mkdir, writeFile } from 'fs/promises';\nimport os from 'os';\nimport { relative, resolve, dirname } from 'path';\nimport prompts from 'prompts';\n\nimport { isError } from '../core/errors';\nimport { parseGlobalGitConfig } from '../core/git';\n\nimport type {\n  Template,\n  TemplateFeature,\n  TemplateOption,\n  TemplateOrTemplateResolver,\n} from './types';\nimport type { Logger } from '../core/logger';\nimport type { Config as PrettierConfig } from 'prettier';\n\ninterface CreatePackageFromTemplateOpts {\n  logger: Logger;\n  cwd: string;\n  template: TemplateOrTemplateResolver;\n}\n\n/**\n * @internal\n *\n * @description Resolves a template if it's a function and runs\n * through the template to create a new package.\n */\nconst createPackageFromTemplate = async (\n  packagePath: string,\n  opts: CreatePackageFromTemplateOpts\n) => {\n  const { cwd, logger, template: templateOrResolver } = opts;\n\n  const prettier = await import('prettier'); // ESM-only\n\n  const gitConfig = await parseGlobalGitConfig();\n\n  const template =\n    typeof templateOrResolver === 'function'\n      ? await templateOrResolver({ cwd, logger, packagePath, gitConfig })\n      : templateOrResolver;\n\n  logger.info('Creating a new package at: ', relative(cwd, packagePath));\n\n  logger.debug('Loaded template:', os.EOL, template);\n\n  const answers: Parameters<Template['getFiles']>[0] = [];\n\n  if (Array.isArray(template.prompts)) {\n    for (const prompt of template.prompts) {\n      /**\n       * We know it's a TemplateOption if it has a type property.\n       */\n      if ('type' in prompt) {\n        const res = await prompts(prompt, {\n          onCancel() {\n            process.exit(0);\n          },\n        });\n\n        answers.push({ name: prompt.name, answer: res[prompt.name] });\n      } else {\n        const res = prompt.optional\n          ? await prompts({\n              type: 'confirm',\n              name: 'confirm',\n              message: `use ${prompt.name}?`,\n              initial: prompt.initial,\n            })\n          : null;\n\n        answers.push({\n          name: prompt.name,\n          answer: res?.confirm ?? !prompt.optional,\n        });\n      }\n    }\n\n    logger.debug(\n      [\n        'User answers: ',\n        ...answers.map((ans) => `    ${ans.name}: ${JSON.stringify(ans.answer)}`),\n      ].join(os.EOL)\n    );\n  }\n\n  const files = await template.getFiles(answers);\n\n  logger.debug(\n    ['Files to write: ', ...files.map((f) => `    ${f.name}: ${f.contents}`)].join(os.EOL)\n  );\n\n  /**\n   * Sort files alphabetically, just cause it's nice.\n   */\n  files.sort((a, b) => {\n    return a.name.localeCompare(b.name);\n  });\n\n  for (const file of files) {\n    const filePath = resolve(packagePath, file.name);\n\n    await mkdir(dirname(filePath), { recursive: true });\n\n    const defaultPrettierConfig: PrettierConfig = {\n      endOfLine: 'lf',\n      tabWidth: 2,\n      printWidth: 100,\n      singleQuote: true,\n      trailingComma: 'es5',\n    };\n    try {\n      const formattedContents = await prettier.format(file.contents, {\n        ...defaultPrettierConfig,\n        filepath: filePath,\n      });\n\n      await writeFile(filePath, `${formattedContents.trim()}${os.EOL}`);\n    } catch (err) {\n      if (isError(err)) {\n        logger.debug(err.message);\n      }\n\n      await writeFile(filePath, `${file.contents.trim()}${os.EOL}`);\n    }\n\n    logger.success(`Wrote ${relative(cwd, filePath)}`);\n  }\n};\n\n/**\n * @public\n *\n * @description a helper function to define your package template in a typesafe manner.\n */\nconst defineTemplate = (template: TemplateOrTemplateResolver): TemplateOrTemplateResolver =>\n  template;\n\n/**\n * @public\n *\n * @description Create a prompt for your users to input data for your package template.\n * e.g. \"what is the name of your package?\"\n */\nconst definePackageOption = <T extends string>(option: TemplateOption<T>): TemplateOption<T> =>\n  option;\n\n/**\n * @public\n *\n * @description Create a feature option for your package e.g. \"do you want typescript?\" â€“ yes/no.\n */\nconst definePackageFeature = (feature: TemplateFeature): TemplateFeature => feature;\n\nexport { createPackageFromTemplate, definePackageFeature, definePackageOption, defineTemplate };\n","import { outdent } from 'outdent';\n\nimport type { TemplateFile } from '../../types';\n\nconst editorConfigFile: TemplateFile = {\n  name: '.editorconfig',\n  contents: outdent`\n    root = true\n\n    [*]\n    indent_style = space\n    indent_size = 2\n    end_of_line = lf\n    charset = utf-8\n    trim_trailing_whitespace = true\n    insert_final_newline = true\n    \n    [{package.json,*.yml}]\n    indent_style = space\n    indent_size = 2\n    \n    [*.md]\n    trim_trailing_whitespace = false\n    `,\n};\n\nexport { editorConfigFile };\n","import { outdent } from 'outdent';\n\nimport type { TemplateFile } from '../../types';\n\nconst gitIgnoreFile: TemplateFile = {\n  name: '.gitignore',\n  contents: outdent`\n    # See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n    # dependencies\n    node_modules\n    .pnp\n    .pnp.js\n    \n    # testing\n    coverage\n    \n    # production\n    dist\n    \n    # misc\n    .DS_Store\n    *.pem\n    \n    # debug\n    npm-debug.log*\n    yarn-debug.log*\n    yarn-error.log*\n    \n    # local env files\n    .env\n    .env.local\n    .env.development.local\n    .env.test.local\n    .env.production.local        \n    `,\n};\n\nexport { gitIgnoreFile };\n","import { outdent } from 'outdent';\n\nimport type { TemplateFile } from '../../types';\n\nconst prettierFile: TemplateFile = {\n  name: '.prettierrc',\n  contents: outdent`\n      {\n        \"endOfLine\": 'lf',\n        \"tabWidth\": 2,\n        \"printWidth\": 100,\n        \"singleQuote\": true,\n        \"trailingComma\": 'es5',\n      }\n    `,\n};\n\nconst prettierIgnoreFile: TemplateFile = {\n  name: '.prettierignore',\n  contents: outdent`\n      dist\n      coverage\n    `,\n};\n\nexport { prettierFile, prettierIgnoreFile };\n","import getLatestVersion from 'get-latest-version';\nimport gitUrlParse from 'git-url-parse';\nimport { outdent } from 'outdent';\n\nimport { isError } from '../../core/errors';\nimport { definePackageFeature, definePackageOption, defineTemplate } from '../create';\n\nimport { editorConfigFile } from './files/editorConfig';\nimport { gitIgnoreFile } from './files/gitIgnore';\nimport { prettierFile, prettierIgnoreFile } from './files/prettier';\n\nimport type { PackageJson } from '../../core/pkg';\nimport type { TemplateFile } from '../types';\n\nconst PACKAGE_NAME_REGEXP = /^(?:@(?:[a-z0-9-*~][a-z0-9-*._~]*)\\/)?[a-z0-9-~][a-z0-9-._~]*$/i;\n\nconst defaultTemplate = defineTemplate(async ({ logger, gitConfig }) => {\n  let repo: {\n    source?: string;\n    owner?: string;\n    name?: string;\n  };\n\n  return {\n    prompts: [\n      definePackageOption({\n        name: 'repo',\n        type: 'text',\n        message: 'git url',\n        validate(v) {\n          if (!v) {\n            return true;\n          }\n\n          try {\n            const result = gitUrlParse(v);\n\n            repo = { source: result.source, owner: result.owner, name: result.name };\n\n            return true;\n          } catch (err) {\n            return 'invalid git url';\n          }\n        },\n      }),\n      definePackageOption({\n        name: 'pkgName',\n        type: 'text',\n        message: 'package name',\n        initial: () => repo?.name ?? '',\n        validate(v) {\n          if (!v) {\n            return 'package name is required';\n          }\n\n          const match = PACKAGE_NAME_REGEXP.exec(v);\n\n          if (!match) {\n            return 'invalid package name';\n          }\n\n          return true;\n        },\n      }),\n      definePackageOption({\n        name: 'description',\n        type: 'text',\n        message: 'package description',\n      }),\n      definePackageOption({\n        name: 'authorName',\n        type: 'text',\n        message: 'package author name',\n        initial: gitConfig?.user?.name,\n      }),\n      definePackageOption({\n        name: 'authorEmail',\n        type: 'text',\n        message: 'package author email',\n        initial: gitConfig?.user?.email,\n      }),\n      definePackageOption({\n        name: 'license',\n        type: 'text',\n        message: 'package license',\n        initial: 'MIT',\n        validate(v) {\n          if (!v) {\n            return 'license is required';\n          }\n\n          return true;\n        },\n      }),\n      definePackageFeature({\n        name: 'typescript',\n        initial: true,\n        optional: true,\n      }),\n      definePackageFeature({\n        name: 'eslint',\n        initial: true,\n        optional: true,\n      }),\n    ],\n    async getFiles(answers) {\n      const devDepsToInstall: string[] = [];\n      const author: string[] = [];\n      let isTypescript = false;\n\n      const files: TemplateFile[] = [];\n\n      // package.json\n      const pkgJson: PackageJson = {\n        version: '0.0.0',\n        keywords: [],\n        type: 'commonjs',\n        exports: {\n          // @ts-expect-error yup typings are a bit weak.\n          '.': {\n            require: './dist/index.js',\n            import: './dist/index.mjs',\n            source: '',\n            default: './dist/index.js',\n          },\n          './package.json': './package.json',\n        },\n        main: './dist/index.js',\n        module: './dist/index.mjs',\n        files: ['dist'],\n        scripts: {\n          check: 'pack-up check',\n          build: 'pack-up build',\n          watch: 'pack-up watch',\n        },\n        dependencies: {},\n        devDependencies: {\n          /**\n           * We set * as a default version, but further down\n           * we try to resolve each package to their latest\n           * version, failing that we leave the fallback of *.\n           */\n          '@strapi/pack-up': '*',\n          prettier: '*',\n        },\n      };\n\n      if (Array.isArray(answers)) {\n        for (const ans of answers) {\n          const { name, answer } = ans;\n\n          switch (name) {\n            case 'pkgName': {\n              pkgJson.name = String(answer);\n              break;\n            }\n            case 'description': {\n              pkgJson.description = String(answer) ?? undefined;\n              break;\n            }\n            case 'authorName': {\n              author.push(String(answer));\n              break;\n            }\n            case 'authorEmail': {\n              if (answer) {\n                author.push(`<${answer}>`);\n              }\n              break;\n            }\n            case 'license': {\n              pkgJson.license = String(answer);\n              break;\n            }\n            case 'typescript': {\n              isTypescript = Boolean(answer);\n\n              pkgJson.source = isTypescript ? './src/index.ts' : './src/index.js';\n\n              if (isRecord(pkgJson.exports['.'])) {\n                pkgJson.exports['.'].source = isTypescript ? './src/index.ts' : './src/index.js';\n              }\n\n              if (isTypescript) {\n                pkgJson.types = './dist/index.d.ts';\n\n                if (isRecord(pkgJson.exports['.'])) {\n                  pkgJson.exports['.'] = {\n                    // @ts-expect-error it won't be overwritten.\n                    types: './dist/index.d.ts',\n                    ...pkgJson.exports['.'],\n                  };\n                }\n\n                pkgJson.scripts = {\n                  ...pkgJson.scripts,\n                  'test:ts': 'tsc --build',\n                };\n\n                devDepsToInstall.push('typescript');\n\n                const { tsconfigBuildFile, tsconfigFile } = await import('./files/typescript');\n\n                files.push(tsconfigFile, tsconfigBuildFile);\n              }\n\n              // source\n              files.push({\n                name: isTypescript ? 'src/index.ts' : 'src/index.js',\n                contents: outdent`\n                  /**\n                   * @public\n                   */\n                  const main = () => {\n                    // silence is golden\n                  }\n\n                  export { main }\n                `,\n              });\n\n              break;\n            }\n            case 'eslint': {\n              if (answer) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const eslintConfig: any = {\n                  root: true,\n                  env: {\n                    browser: true,\n                    es6: true,\n                    node: true,\n                  },\n                  extends: ['eslint:recommended', 'plugin:prettier/recommended'],\n                  parserOptions: {\n                    ecmaVersion: 'latest',\n                    sourceType: 'module',\n                  },\n                  plugins: ['prettier'],\n                };\n\n                if (isTypescript) {\n                  eslintConfig.overrides = [\n                    {\n                      files: ['**/*.ts', '**/*.tsx'],\n                      parser: '@typescript-eslint/parser',\n                      parserOptions: {\n                        project: ['./tsconfig.eslint.json'],\n                      },\n                      extends: [\n                        'eslint:recommended',\n                        'plugin:prettier/recommended',\n                        'plugin:@typescript-eslint/eslint-recommended',\n                        'plugin:@typescript-eslint/recommended',\n                      ],\n                      plugins: ['@typescript-eslint', 'prettier'],\n                    },\n                  ];\n\n                  const { tsconfigEslintFile } = await import('./files/typescript');\n\n                  // tsconfig.eslint.json\n                  files.push(tsconfigEslintFile);\n                }\n\n                pkgJson.scripts = {\n                  ...pkgJson.scripts,\n                  lint: isTypescript\n                    ? 'eslint . --ext .cjs,.js,.ts,.tsx'\n                    : 'eslint . --ext .cjs,.js',\n                };\n\n                devDepsToInstall.push('eslint', 'eslint-config-prettier', 'eslint-plugin-prettier');\n\n                if (isTypescript) {\n                  devDepsToInstall.push(\n                    '@typescript-eslint/eslint-plugin',\n                    '@typescript-eslint/parser'\n                  );\n                }\n\n                const { eslintIgnoreFile } = await import('./files/eslint');\n\n                files.push(\n                  {\n                    name: '.eslintrc',\n                    contents: outdent`\n                    ${JSON.stringify(eslintConfig, null, 2)}\n                  `,\n                  },\n                  eslintIgnoreFile\n                );\n              }\n\n              break;\n            }\n            default:\n              break;\n          }\n        }\n      }\n\n      if (repo) {\n        pkgJson.repository = {\n          type: 'git',\n          url: `git+ssh://git@${repo.source}/${repo.owner}/${repo.name}.git`,\n        };\n        pkgJson.bugs = {\n          url: `https://${repo.source}/${repo.owner}/${repo.name}/issues`,\n        };\n        pkgJson.homepage = `https://${repo.source}/${repo.owner}/${repo.name}#readme`;\n      }\n\n      pkgJson.author = author.filter(Boolean).join(' ') ?? undefined;\n\n      try {\n        pkgJson.devDependencies = await resolveLatestVerisonOfDeps([\n          ...devDepsToInstall,\n          ...Object.keys(pkgJson.devDependencies),\n        ]);\n      } catch (err) {\n        if (isError(err)) {\n          logger.error(err.message);\n        } else {\n          logger.error(err);\n        }\n      }\n\n      files.push({\n        name: 'package.json',\n        contents: outdent`\n          ${JSON.stringify(pkgJson, null, 2)}\n        `,\n      });\n\n      /**\n       * PRETTIER IS INSTALLED BY DEFAULT.\n       */\n      files.push(prettierFile, prettierIgnoreFile, editorConfigFile, gitIgnoreFile);\n\n      return files;\n    },\n  };\n});\n\nconst isRecord = (value: unknown): value is Record<string, unknown> =>\n  Boolean(value) && !Array.isArray(value) && typeof value === 'object';\n\nconst resolveLatestVerisonOfDeps = async (deps: string[]): Promise<Record<string, string>> => {\n  const latestDeps: Record<string, string> = {};\n\n  for (const name of deps) {\n    try {\n      const latestVersion = await getLatestVersion(name, '*');\n      latestDeps[name] = latestVersion ? `^${latestVersion}` : '*';\n    } catch (err) {\n      latestDeps[name] = '*';\n    }\n  }\n\n  return latestDeps;\n};\n\nexport { defaultTemplate };\n","import { register } from 'esbuild-register/dist/node';\nimport { existsSync } from 'fs';\nimport { resolve } from 'path';\n\nimport type { TemplateOrTemplateResolver } from './types';\nimport type { Logger } from '../core/logger';\n\n/**\n * @internal\n *\n * @description Resolve a template from a path and return it.\n */\nconst loadTemplate = (\n  path: string,\n  { logger }: { logger: Logger }\n): TemplateOrTemplateResolver | undefined => {\n  const configPath = resolve(path);\n\n  const exists = existsSync(configPath);\n\n  if (exists) {\n    const esbuildOptions = { extensions: ['.js', '.mjs', '.ts'] };\n\n    const { unregister } = register(esbuildOptions);\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const mod = require(configPath);\n\n    unregister();\n\n    if (!mod) {\n      logger.warn(`Could not find template at: ${path}. Are you sure it exists?`);\n      return undefined;\n    }\n\n    logger.debug('Loaded user provided template from: ', path);\n\n    /**\n     * handles esm or cjs exporting.\n     */\n    return mod?.default || mod;\n  }\n\n  logger.warn(`Could not find template at: ${path}. Are you sure it exists?`);\n\n  return undefined;\n};\n\nexport { loadTemplate };\n","import { resolve } from 'path';\n\nimport { isError } from './core/errors';\nimport { ensurePackagePathIsViable } from './core/files';\nimport { createLogger } from './core/logger';\nimport { createPackageFromTemplate } from './templates/create';\nimport { defaultTemplate } from './templates/internal/default';\nimport { loadTemplate } from './templates/load';\n\nimport type { CommonCLIOptions } from '../types';\nimport type { TemplateOrTemplateResolver } from './templates/types';\n\nexport interface InitOptions extends CommonCLIOptions {\n  cwd?: string;\n  path: string;\n  template?: TemplateOrTemplateResolver | string;\n}\n\nexport const init = async (opts: InitOptions) => {\n  const { silent, debug, cwd = process.cwd(), path } = opts;\n  let { template = defaultTemplate } = opts;\n\n  const logger = createLogger({ silent, debug });\n\n  if (!path) {\n    logger.error('Path is a required option');\n    process.exit(1);\n  }\n\n  const packageRoot = resolve(cwd, path);\n\n  logger.debug('Package is: ', packageRoot);\n\n  if (typeof template === 'string') {\n    const templatePath = resolve(cwd, template);\n    const userTemplate = loadTemplate(templatePath, { logger });\n\n    if (userTemplate) {\n      template = userTemplate;\n    } else {\n      /**\n       * the loadTemplate function would have already warned the user\n       * we can't find their template, we just now ensure we don't\n       * pass the string.\n       */\n      template = defaultTemplate;\n    }\n  }\n\n  await ensurePackagePathIsViable(packageRoot).catch((err) => {\n    if (isError(err)) {\n      logger.error(err.message);\n    }\n\n    process.exit(1);\n  });\n\n  logger.debug('Package path is viable');\n\n  await createPackageFromTemplate(packageRoot, {\n    logger,\n    cwd,\n    template,\n  });\n};\n","import { init as nodeInit } from '../../node/init';\nimport { handleError } from '../errors';\n\nimport type { InitOptions } from '../../node/init';\n\nexport const init = async (options: InitOptions) => {\n  try {\n    await nodeInit(options);\n  } catch (err) {\n    handleError(err);\n  }\n};\n"],"names":["path","os","fs","ini","relative","prompts","files","resolve","mkdir","dirname","writeFile","isError","outdent","gitUrlParse","getLatestVersion","existsSync","register","init","createLogger","ensurePackagePathIsViable","nodeInit","handleError"],"mappings":"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"}
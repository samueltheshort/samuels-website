{"version":3,"file":"index.mjs","sources":["../../server/src/constants.ts","../../server/src/utils/index.ts","../../server/src/migrations/index.ts","../../server/src/migrations/database/5.0.0-document-id-in-actions.ts","../../server/src/register.ts","../../server/src/middlewares/documents.ts","../../server/src/bootstrap.ts","../../server/src/destroy.ts","../../server/src/content-types/release/schema.ts","../../server/src/content-types/release/index.ts","../../server/src/content-types/release-action/schema.ts","../../server/src/content-types/release-action/index.ts","../../server/src/content-types/index.ts","../../server/src/services/release.ts","../../server/src/services/release-action.ts","../../server/src/services/validation.ts","../../server/src/services/scheduling.ts","../../server/src/services/settings.ts","../../server/src/services/index.ts","../../server/src/controllers/validation/release.ts","../../server/src/controllers/release.ts","../../server/src/controllers/validation/release-action.ts","../../server/src/controllers/release-action.ts","../../server/src/controllers/validation/settings.ts","../../server/src/controllers/settings.ts","../../server/src/controllers/index.ts","../../server/src/routes/release.ts","../../server/src/routes/release-action.ts","../../server/src/routes/settings.ts","../../server/src/routes/index.ts","../../server/src/index.ts"],"sourcesContent":["export const RELEASE_MODEL_UID = 'plugin::content-releases.release';\nexport const RELEASE_ACTION_MODEL_UID = 'plugin::content-releases.release-action';\n\nexport const ACTIONS = [\n  {\n    section: 'plugins',\n    displayName: 'Read',\n    uid: 'read',\n    pluginName: 'content-releases',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Create',\n    uid: 'create',\n    pluginName: 'content-releases',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Edit',\n    uid: 'update',\n    pluginName: 'content-releases',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Delete',\n    uid: 'delete',\n    pluginName: 'content-releases',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Publish',\n    uid: 'publish',\n    pluginName: 'content-releases',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Remove an entry from a release',\n    uid: 'delete-action',\n    pluginName: 'content-releases',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Add an entry to a release',\n    uid: 'create-action',\n    pluginName: 'content-releases',\n  },\n\n  // Settings\n  {\n    uid: 'settings.read',\n    section: 'settings',\n    displayName: 'Read',\n    category: 'content releases',\n    subCategory: 'options',\n    pluginName: 'content-releases',\n  },\n\n  {\n    uid: 'settings.update',\n    section: 'settings',\n    displayName: 'Edit',\n    category: 'content releases',\n    subCategory: 'options',\n    pluginName: 'content-releases',\n  },\n];\n\nexport const ALLOWED_WEBHOOK_EVENTS = {\n  RELEASES_PUBLISH: 'releases.publish',\n};\n","import type { UID, Data, Core } from '@strapi/types';\n\nimport type { SettingsService } from '../services/settings';\nimport type { ReleaseService } from '../services/release';\nimport type { ReleaseActionService } from '../services/release-action';\n\ntype Services = {\n  release: ReleaseService;\n  'release-validation': any;\n  scheduling: any;\n  'release-action': ReleaseActionService;\n  'event-manager': any;\n  settings: SettingsService;\n};\n\ninterface Action {\n  contentType: UID.ContentType;\n  documentId?: Data.DocumentID;\n  locale?: string;\n}\n\nexport const getService = <TName extends keyof Services>(\n  name: TName,\n  { strapi }: { strapi: Core.Strapi }\n): Services[TName] => {\n  return strapi.plugin('content-releases').service(name);\n};\n\nexport const getDraftEntryValidStatus = async (\n  { contentType, documentId, locale }: Action,\n  { strapi }: { strapi: Core.Strapi }\n) => {\n  const populateBuilderService = strapi.plugin('content-manager').service('populate-builder');\n  // @ts-expect-error - populateBuilderService should be a function but is returning service\n  const populate = await populateBuilderService(contentType).populateDeep(Infinity).build();\n\n  const entry = await getEntry({ contentType, documentId, locale, populate }, { strapi });\n\n  return isEntryValid(contentType, entry, { strapi });\n};\n\nexport const isEntryValid = async (\n  contentTypeUid: string,\n  entry: any,\n  { strapi }: { strapi: Core.Strapi }\n) => {\n  try {\n    // @TODO: When documents service has validateEntityCreation method, use it instead\n    await strapi.entityValidator.validateEntityCreation(\n      strapi.getModel(contentTypeUid as UID.ContentType),\n      entry,\n      undefined,\n      // @ts-expect-error - FIXME: entity here is unnecessary\n      entry\n    );\n\n    const workflowsService = strapi.plugin('review-workflows').service('workflows');\n    const workflow = await workflowsService.getAssignedWorkflow(contentTypeUid, {\n      populate: 'stageRequiredToPublish',\n    });\n\n    if (workflow?.stageRequiredToPublish) {\n      return entry.strapi_stage.id === workflow.stageRequiredToPublish.id;\n    }\n\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nexport const getEntry = async (\n  {\n    contentType,\n    documentId,\n    locale,\n    populate,\n    status = 'draft',\n  }: Action & { status?: 'draft' | 'published'; populate: any },\n  { strapi }: { strapi: Core.Strapi }\n) => {\n  if (documentId) {\n    // Try to get an existing draft or published document\n    const entry = await strapi\n      .documents(contentType)\n      .findOne({ documentId, locale, populate, status });\n\n    // The document isn't published yet, but the action is to publish it, fetch the draft\n    if (status === 'published' && !entry) {\n      return strapi\n        .documents(contentType)\n        .findOne({ documentId, locale, populate, status: 'draft' });\n    }\n\n    return entry;\n  }\n\n  return strapi.documents(contentType).findFirst({ locale, populate, status });\n};\n\nexport const getEntryStatus = async (contentType: UID.ContentType, entry: Data.ContentType) => {\n  if (entry.publishedAt) {\n    return 'published';\n  }\n\n  const publishedEntry = await strapi.documents(contentType).findOne({\n    documentId: entry.documentId,\n    locale: entry.locale,\n    status: 'published',\n    fields: ['updatedAt'],\n  });\n\n  if (!publishedEntry) {\n    return 'draft';\n  }\n\n  const entryUpdatedAt = new Date(entry.updatedAt).getTime();\n  const publishedEntryUpdatedAt = new Date(publishedEntry.updatedAt).getTime();\n\n  if (entryUpdatedAt > publishedEntryUpdatedAt) {\n    return 'modified';\n  }\n\n  return 'published';\n};\n","import type { Schema, UID } from '@strapi/types';\nimport { contentTypes as contentTypesUtils, async } from '@strapi/utils';\nimport isEqual from 'lodash/isEqual';\n\nimport { difference, keys } from 'lodash';\nimport { RELEASE_ACTION_MODEL_UID, RELEASE_MODEL_UID } from '../constants';\nimport { getDraftEntryValidStatus, getService } from '../utils';\nimport { Release } from '../../../shared/contracts/releases';\nimport { ReleaseAction } from '../../../shared/contracts/release-actions';\n\ninterface Input {\n  oldContentTypes: Record<string, Schema.ContentType>;\n  contentTypes: Record<string, Schema.ContentType>;\n}\n\nexport async function deleteActionsOnDisableDraftAndPublish({\n  oldContentTypes,\n  contentTypes,\n}: Input) {\n  if (!oldContentTypes) {\n    return;\n  }\n\n  for (const uid in contentTypes) {\n    if (!oldContentTypes[uid]) {\n      continue;\n    }\n\n    const oldContentType = oldContentTypes[uid];\n    const contentType = contentTypes[uid];\n\n    if (\n      contentTypesUtils.hasDraftAndPublish(oldContentType) &&\n      !contentTypesUtils.hasDraftAndPublish(contentType)\n    ) {\n      await strapi.db\n        ?.queryBuilder(RELEASE_ACTION_MODEL_UID)\n        .delete()\n        .where({ contentType: uid })\n        .execute();\n    }\n  }\n}\n\nexport async function deleteActionsOnDeleteContentType({ oldContentTypes, contentTypes }: Input) {\n  const deletedContentTypes = difference(keys(oldContentTypes), keys(contentTypes)) ?? [];\n\n  if (deletedContentTypes.length) {\n    await async.map(deletedContentTypes, async (deletedContentTypeUID: unknown) => {\n      return strapi.db\n        ?.queryBuilder(RELEASE_ACTION_MODEL_UID)\n        .delete()\n        .where({ contentType: deletedContentTypeUID })\n        .execute();\n    });\n  }\n}\n\nexport async function migrateIsValidAndStatusReleases() {\n  const releasesWithoutStatus = (await strapi.db.query(RELEASE_MODEL_UID).findMany({\n    where: {\n      status: null,\n      releasedAt: null,\n    },\n    populate: {\n      actions: {\n        populate: {\n          entry: true,\n        },\n      },\n    },\n  })) as Release[];\n\n  async.map(releasesWithoutStatus, async (release: Release) => {\n    const actions = release.actions;\n\n    const notValidatedActions = actions.filter((action) => action.isEntryValid === null);\n\n    for (const action of notValidatedActions) {\n      // We need to check the Action is related to a valid entry because we can't assume this is gonna be always the case\n      // example: users could make changes directly to their database, or data could be lost\n      if (action.entry) {\n        const isEntryValid = getDraftEntryValidStatus(\n          {\n            contentType: action.contentType,\n            documentId: action.entryDocumentId,\n            locale: action.locale,\n          },\n          { strapi }\n        );\n\n        await strapi.db.query(RELEASE_ACTION_MODEL_UID).update({\n          where: {\n            id: action.id,\n          },\n          data: {\n            isEntryValid,\n          },\n        });\n      }\n    }\n\n    return getService('release', { strapi }).updateReleaseStatus(release.id);\n  });\n\n  const publishedReleases = await strapi.db.query(RELEASE_MODEL_UID).findMany({\n    where: {\n      status: null,\n      releasedAt: {\n        $notNull: true,\n      },\n    },\n  });\n\n  async.map(publishedReleases, async (release: Release) => {\n    return strapi.db.query(RELEASE_MODEL_UID).update({\n      where: {\n        id: release.id,\n      },\n      data: {\n        status: 'done',\n      },\n    });\n  });\n}\n\nexport async function revalidateChangedContentTypes({ oldContentTypes, contentTypes }: Input) {\n  if (oldContentTypes !== undefined && contentTypes !== undefined) {\n    const contentTypesWithDraftAndPublish = Object.keys(oldContentTypes).filter(\n      (uid) => oldContentTypes[uid]?.options?.draftAndPublish\n    );\n    const releasesAffected = new Set();\n\n    async\n      .map(contentTypesWithDraftAndPublish, async (contentTypeUID: UID.ContentType) => {\n        const oldContentType = oldContentTypes[contentTypeUID];\n        const contentType = contentTypes[contentTypeUID];\n\n        // If attributes have changed, we need to revalidate actions because maybe validations rules are different\n        if (!isEqual(oldContentType?.attributes, contentType?.attributes)) {\n          const actions = await strapi.db.query(RELEASE_ACTION_MODEL_UID).findMany({\n            where: {\n              contentType: contentTypeUID,\n            },\n            populate: {\n              entry: true,\n              release: true,\n            },\n          });\n\n          await async.map(actions, async (action: ReleaseAction) => {\n            if (action.entry && action.release && action.type === 'publish') {\n              const isEntryValid = await getDraftEntryValidStatus(\n                {\n                  contentType: contentTypeUID,\n                  documentId: action.entryDocumentId,\n                  locale: action.locale,\n                },\n                { strapi }\n              );\n\n              releasesAffected.add(action.release.id);\n\n              await strapi.db.query(RELEASE_ACTION_MODEL_UID).update({\n                where: {\n                  id: action.id,\n                },\n                data: {\n                  isEntryValid,\n                },\n              });\n            }\n          });\n        }\n      })\n      .then(() => {\n        // We need to update the status of the releases affected\n        async.map(releasesAffected, async (releaseId: Release['id']) => {\n          return getService('release', { strapi }).updateReleaseStatus(releaseId);\n        });\n      });\n  }\n}\n\nexport async function disableContentTypeLocalized({ oldContentTypes, contentTypes }: Input) {\n  if (!oldContentTypes) {\n    return;\n  }\n\n  const i18nPlugin = strapi.plugin('i18n');\n  if (!i18nPlugin) {\n    return;\n  }\n\n  for (const uid in contentTypes) {\n    if (!oldContentTypes[uid]) {\n      continue;\n    }\n\n    const oldContentType = oldContentTypes[uid];\n    const contentType = contentTypes[uid];\n\n    const { isLocalizedContentType } = i18nPlugin.service('content-types');\n\n    // if i18N is disabled remove non default locales before sync\n    if (isLocalizedContentType(oldContentType) && !isLocalizedContentType(contentType)) {\n      await strapi.db\n        .queryBuilder(RELEASE_ACTION_MODEL_UID)\n        .update({\n          locale: null,\n        })\n        .where({ contentType: uid })\n        .execute();\n    }\n  }\n}\n\nexport async function enableContentTypeLocalized({ oldContentTypes, contentTypes }: Input) {\n  if (!oldContentTypes) {\n    return;\n  }\n\n  const i18nPlugin = strapi.plugin('i18n');\n  if (!i18nPlugin) {\n    return;\n  }\n\n  for (const uid in contentTypes) {\n    if (!oldContentTypes[uid]) {\n      continue;\n    }\n\n    const oldContentType = oldContentTypes[uid];\n    const contentType = contentTypes[uid];\n\n    const { isLocalizedContentType } = i18nPlugin.service('content-types');\n    const { getDefaultLocale } = i18nPlugin.service('locales');\n\n    // if i18N is enabled remove non default locales before sync\n    if (!isLocalizedContentType(oldContentType) && isLocalizedContentType(contentType)) {\n      const defaultLocale = await getDefaultLocale();\n\n      await strapi.db\n        .queryBuilder(RELEASE_ACTION_MODEL_UID)\n        .update({\n          locale: defaultLocale,\n        })\n        .where({ contentType: uid })\n        .execute();\n    }\n  }\n}\n","import { async } from '@strapi/utils';\n\nimport type { Migration, Database } from '@strapi/database';\n\ntype Knex = Parameters<Migration['up']>[0];\n\n/**\n * On v4, release actions are linked with entries using the built in Polymorphic relations.\n *\n * On v5, we are going to save entryDocumentId on the release action and make the link manually.\n * This because entryId is not a reliable way to link documents, as it can change.\n */\nexport const addEntryDocumentToReleaseActions: Migration = {\n  name: 'content-releases::5.0.0-add-entry-document-id-to-release-actions',\n  async up(trx: Knex, db: Database) {\n    // Check if the table exists\n    const hasTable = await trx.schema.hasTable('strapi_release_actions');\n\n    if (!hasTable) {\n      return;\n    }\n\n    const hasPolymorphicColumn = await trx.schema.hasColumn('strapi_release_actions', 'target_id');\n\n    // If user has PolymorphicColumn means that is coming from v4\n    if (hasPolymorphicColumn) {\n      // First time coming from v4 user doesn't have entryDocumentId\n      // but we double check to avoid errors\n      const hasEntryDocumentIdColumn = await trx.schema.hasColumn(\n        'strapi_release_actions',\n        'entry_document_id'\n      );\n\n      if (!hasEntryDocumentIdColumn) {\n        await trx.schema.alterTable('strapi_release_actions', (table) => {\n          table.string('entry_document_id');\n        });\n      }\n\n      const releaseActions = await trx.select('*').from('strapi_release_actions');\n\n      async.map(releaseActions, async (action: any) => {\n        const { target_type, target_id } = action;\n\n        const entry = await db.query(target_type).findOne({ where: { id: target_id } });\n\n        if (entry) {\n          await trx('strapi_release_actions')\n            .update({ entry_document_id: entry.documentId })\n            .where('id', action.id);\n        }\n      });\n    }\n  },\n  async down() {\n    throw new Error('not implemented');\n  },\n};\n","/* eslint-disable @typescript-eslint/no-var-requires */\nimport type { Core } from '@strapi/types';\n\nimport { ACTIONS, RELEASE_MODEL_UID, RELEASE_ACTION_MODEL_UID } from './constants';\nimport {\n  deleteActionsOnDeleteContentType,\n  deleteActionsOnDisableDraftAndPublish,\n  migrateIsValidAndStatusReleases,\n  revalidateChangedContentTypes,\n  disableContentTypeLocalized,\n  enableContentTypeLocalized,\n} from './migrations';\nimport { addEntryDocumentToReleaseActions } from './migrations/database/5.0.0-document-id-in-actions';\n\nexport const register = async ({ strapi }: { strapi: Core.Strapi }) => {\n  if (strapi.ee.features.isEnabled('cms-content-releases')) {\n    await strapi.service('admin::permission').actionProvider.registerMany(ACTIONS);\n\n    strapi.db.migrations.providers.internal.register(addEntryDocumentToReleaseActions);\n\n    strapi\n      .hook('strapi::content-types.beforeSync')\n      .register(disableContentTypeLocalized)\n      .register(deleteActionsOnDisableDraftAndPublish);\n\n    strapi\n      .hook('strapi::content-types.afterSync')\n      .register(deleteActionsOnDeleteContentType)\n      .register(enableContentTypeLocalized)\n      .register(revalidateChangedContentTypes)\n      .register(migrateIsValidAndStatusReleases);\n  }\n\n  if (strapi.plugin('graphql')) {\n    const graphqlExtensionService = strapi.plugin('graphql').service('extension');\n    // Exclude the release and release action models from the GraphQL schema\n    graphqlExtensionService.shadowCRUD(RELEASE_MODEL_UID).disable();\n    graphqlExtensionService.shadowCRUD(RELEASE_ACTION_MODEL_UID).disable();\n  }\n};\n","import { Modules, UID } from '@strapi/types';\nimport { contentTypes } from '@strapi/utils';\nimport { RELEASE_MODEL_UID, RELEASE_ACTION_MODEL_UID } from '../constants';\nimport { getService, isEntryValid } from '../utils';\n\ntype Middleware = Modules.Documents.Middleware.Middleware;\n\ninterface ReleaseActionsParams {\n  contentType: UID.ContentType;\n  entryDocumentId?: Modules.Documents.ID;\n  locale?: string;\n}\n\nconst updateActionsStatusAndUpdateReleaseStatus = async (\n  contentType: UID.ContentType,\n  entry: Modules.Documents.AnyDocument\n) => {\n  const releases = await strapi.db.query(RELEASE_MODEL_UID).findMany({\n    where: {\n      releasedAt: null,\n      actions: {\n        contentType,\n        entryDocumentId: entry.documentId,\n        locale: entry.locale,\n      },\n    },\n  });\n\n  const entryStatus = await isEntryValid(contentType, entry, { strapi });\n\n  await strapi.db.query(RELEASE_ACTION_MODEL_UID).updateMany({\n    where: {\n      contentType,\n      entryDocumentId: entry.documentId,\n      locale: entry.locale,\n    },\n    data: {\n      isEntryValid: entryStatus,\n    },\n  });\n\n  for (const release of releases) {\n    getService('release', { strapi }).updateReleaseStatus(release.id);\n  }\n};\n\nconst deleteActionsAndUpdateReleaseStatus = async (params: ReleaseActionsParams) => {\n  const releases = await strapi.db.query(RELEASE_MODEL_UID).findMany({\n    where: {\n      actions: params,\n    },\n  });\n\n  await strapi.db.query(RELEASE_ACTION_MODEL_UID).deleteMany({\n    where: params,\n  });\n\n  for (const release of releases) {\n    getService('release', { strapi }).updateReleaseStatus(release.id);\n  }\n};\n\nconst deleteActionsOnDelete: Middleware = async (ctx, next) => {\n  if (ctx.action !== 'delete') {\n    return next();\n  }\n\n  if (!contentTypes.hasDraftAndPublish(ctx.contentType)) {\n    return next();\n  }\n\n  const contentType = ctx.contentType.uid;\n  const { documentId, locale } = ctx.params;\n\n  const result = await next();\n\n  if (!result) {\n    return result;\n  }\n\n  try {\n    deleteActionsAndUpdateReleaseStatus({\n      contentType,\n      entryDocumentId: documentId,\n      ...(locale !== '*' && { locale }),\n    });\n  } catch (error) {\n    strapi.log.error('Error while deleting release actions after delete', {\n      error,\n    });\n  }\n\n  return result;\n};\n\nconst updateActionsOnUpdate: Middleware = async (ctx, next) => {\n  if (ctx.action !== 'update') {\n    return next();\n  }\n\n  if (!contentTypes.hasDraftAndPublish(ctx.contentType)) {\n    return next();\n  }\n\n  const contentType = ctx.contentType.uid;\n\n  const result = (await next()) as Modules.Documents.AnyDocument;\n\n  if (!result) {\n    return result;\n  }\n\n  try {\n    updateActionsStatusAndUpdateReleaseStatus(contentType, result);\n  } catch (error) {\n    strapi.log.error('Error while updating release actions after update', {\n      error,\n    });\n  }\n\n  return result;\n};\n\nexport { deleteActionsOnDelete, updateActionsOnUpdate };\n","/* eslint-disable @typescript-eslint/no-var-requires */\nimport type { Core, UID, Modules } from '@strapi/types';\n\nimport { RELEASE_ACTION_MODEL_UID, RELEASE_MODEL_UID, ALLOWED_WEBHOOK_EVENTS } from './constants';\nimport { getService } from './utils';\nimport { deleteActionsOnDelete, updateActionsOnUpdate } from './middlewares/documents';\n\ninterface DeleteManyParams {\n  contentType: UID.ContentType;\n  locale: string | null;\n  entryDocumentId?: Modules.Documents.ID;\n}\n\nconst deleteReleasesActionsAndUpdateReleaseStatus = async (params: DeleteManyParams) => {\n  const releases = await strapi.db.query(RELEASE_MODEL_UID).findMany({\n    where: {\n      actions: params,\n    },\n  });\n\n  await strapi.db.query(RELEASE_ACTION_MODEL_UID).deleteMany({\n    where: params,\n  });\n\n  // We update the status of each release after delete the actions\n  for (const release of releases) {\n    getService('release', { strapi }).updateReleaseStatus(release.id);\n  }\n};\n\nexport const bootstrap = async ({ strapi }: { strapi: Core.Strapi }) => {\n  if (strapi.ee.features.isEnabled('cms-content-releases')) {\n    const contentTypesWithDraftAndPublish = Object.keys(strapi.contentTypes).filter(\n      (uid: any) => strapi.contentTypes[uid]?.options?.draftAndPublish\n    );\n\n    strapi.db.lifecycles.subscribe({\n      models: contentTypesWithDraftAndPublish,\n\n      /**\n       * deleteMany is still used outside documents service, for example when deleting a locale\n       */\n      async afterDeleteMany(event) {\n        try {\n          const model = strapi.getModel(event.model.uid as UID.Schema);\n          // @ts-expect-error TODO: lifecycles types looks like are not 100% finished\n          if (model.kind === 'collectionType' && model.options?.draftAndPublish) {\n            const { where } = event.params;\n\n            deleteReleasesActionsAndUpdateReleaseStatus({\n              contentType: model.uid,\n              locale: where?.locale ?? null,\n              ...(where?.documentId && { entryDocumentId: where.documentId }),\n            });\n          }\n        } catch (error) {\n          // If an error happens we don't want to block the delete entry flow, but we log the error\n          strapi.log.error('Error while deleting release actions after entry deleteMany', {\n            error,\n          });\n        }\n      },\n    });\n\n    // We register middleware to handle ReleaseActions when changes on documents are made\n    strapi.documents.use(deleteActionsOnDelete);\n    strapi.documents.use(updateActionsOnUpdate);\n\n    getService('scheduling', { strapi })\n      .syncFromDatabase()\n      .catch((err: Error) => {\n        strapi.log.error(\n          'Error while syncing scheduled jobs from the database in the content-releases plugin. This could lead to errors in the releases scheduling.'\n        );\n\n        throw err;\n      });\n\n    Object.entries(ALLOWED_WEBHOOK_EVENTS).forEach(([key, value]) => {\n      strapi.get('webhookStore').addAllowedEvent(key, value);\n    });\n  }\n};\n","import { Job } from 'node-schedule';\nimport { Core } from '@strapi/types';\n\nimport { Release } from '../../shared/contracts/releases';\nimport { getService } from './utils';\n\nexport const destroy = async ({ strapi }: { strapi: Core.Strapi }) => {\n  const scheduledJobs: Map<Release['id'], Job> = getService('scheduling', {\n    strapi,\n  }).getAll();\n\n  for (const [, job] of scheduledJobs) {\n    job.cancel();\n  }\n};\n","import { RELEASE_ACTION_MODEL_UID } from '../../constants';\n\nexport default {\n  collectionName: 'strapi_releases',\n  info: {\n    singularName: 'release',\n    pluralName: 'releases',\n    displayName: 'Release',\n  },\n  options: {\n    draftAndPublish: false,\n  },\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    },\n  },\n  attributes: {\n    name: {\n      type: 'string',\n      required: true,\n    },\n    releasedAt: {\n      type: 'datetime',\n    },\n    scheduledAt: {\n      type: 'datetime',\n    },\n    timezone: {\n      type: 'string',\n    },\n    status: {\n      type: 'enumeration',\n      enum: ['ready', 'blocked', 'failed', 'done', 'empty'],\n      required: true,\n    },\n    actions: {\n      type: 'relation',\n      relation: 'oneToMany',\n      target: RELEASE_ACTION_MODEL_UID,\n      mappedBy: 'release',\n    },\n  },\n};\n","import schema from './schema';\n\nexport const release = {\n  schema,\n};\n","import { RELEASE_MODEL_UID } from '../../constants';\n\nexport default {\n  collectionName: 'strapi_release_actions',\n  info: {\n    singularName: 'release-action',\n    pluralName: 'release-actions',\n    displayName: 'Release Action',\n  },\n  options: {\n    draftAndPublish: false,\n  },\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    },\n  },\n  attributes: {\n    type: {\n      type: 'enumeration',\n      enum: ['publish', 'unpublish'],\n      required: true,\n    },\n    contentType: {\n      type: 'string',\n      required: true,\n    },\n    entryDocumentId: {\n      type: 'string',\n    },\n    locale: {\n      type: 'string',\n    },\n    release: {\n      type: 'relation',\n      relation: 'manyToOne',\n      target: RELEASE_MODEL_UID,\n      inversedBy: 'actions',\n    },\n    isEntryValid: {\n      type: 'boolean',\n    },\n  },\n};\n","import schema from './schema';\n\nexport const releaseAction = {\n  schema,\n};\n","import { release } from './release';\nimport { releaseAction } from './release-action';\n\nexport const contentTypes = {\n  release,\n  'release-action': releaseAction,\n};\n","import { setCreatorFields, errors } from '@strapi/utils';\n\nimport type { Core, Struct, UID, Data } from '@strapi/types';\n\nimport { ALLOWED_WEBHOOK_EVENTS, RELEASE_ACTION_MODEL_UID, RELEASE_MODEL_UID } from '../constants';\nimport type {\n  GetReleases,\n  CreateRelease,\n  UpdateRelease,\n  PublishRelease,\n  GetRelease,\n  Release,\n  DeleteRelease,\n} from '../../../shared/contracts/releases';\nimport type { ReleaseAction } from '../../../shared/contracts/release-actions';\nimport type { UserInfo } from '../../../shared/types';\nimport { getService } from '../utils';\n\nconst createReleaseService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const dispatchWebhook = (\n    event: string,\n    { isPublished, release, error }: { isPublished: boolean; release?: any; error?: unknown }\n  ) => {\n    strapi.eventHub.emit(event, {\n      isPublished,\n      error,\n      release,\n    });\n  };\n\n  /**\n   * Given a release id, it returns the actions formatted ready to be used to publish them.\n   * We split them by contentType and type (publish/unpublish) and extract only the documentIds and locales.\n   */\n  const getFormattedActions = async (releaseId: Release['id']) => {\n    const actions = (await strapi.db.query(RELEASE_ACTION_MODEL_UID).findMany({\n      where: {\n        release: {\n          id: releaseId,\n        },\n      },\n    })) as ReleaseAction[];\n\n    if (actions.length === 0) {\n      throw new errors.ValidationError('No entries to publish');\n    }\n\n    /**\n     * We separate publish and unpublish actions, grouping them by contentType and extracting only their documentIds and locales.\n     */\n    const formattedActions: {\n      [key: UID.ContentType]: {\n        publish: { documentId: ReleaseAction['entryDocumentId']; locale?: string }[];\n        unpublish: { documentId: ReleaseAction['entryDocumentId']; locale?: string }[];\n      };\n    } = {};\n\n    for (const action of actions) {\n      const contentTypeUid: UID.ContentType = action.contentType;\n\n      if (!formattedActions[contentTypeUid]) {\n        formattedActions[contentTypeUid] = {\n          publish: [],\n          unpublish: [],\n        };\n      }\n\n      formattedActions[contentTypeUid][action.type].push({\n        documentId: action.entryDocumentId,\n        locale: action.locale,\n      });\n    }\n\n    return formattedActions;\n  };\n\n  return {\n    async create(releaseData: CreateRelease.Request['body'], { user }: { user: UserInfo }) {\n      const releaseWithCreatorFields = await setCreatorFields({ user })(releaseData);\n\n      const {\n        validatePendingReleasesLimit,\n        validateUniqueNameForPendingRelease,\n        validateScheduledAtIsLaterThanNow,\n      } = getService('release-validation', { strapi });\n\n      await Promise.all([\n        validatePendingReleasesLimit(),\n        validateUniqueNameForPendingRelease(releaseWithCreatorFields.name),\n        validateScheduledAtIsLaterThanNow(releaseWithCreatorFields.scheduledAt),\n      ]);\n\n      const release = await strapi.db.query(RELEASE_MODEL_UID).create({\n        data: {\n          ...releaseWithCreatorFields,\n          status: 'empty',\n        },\n      });\n\n      if (releaseWithCreatorFields.scheduledAt) {\n        const schedulingService = getService('scheduling', { strapi });\n\n        await schedulingService.set(release.id, release.scheduledAt);\n      }\n\n      strapi.telemetry.send('didCreateContentRelease');\n\n      return release;\n    },\n\n    async findOne(id: GetRelease.Request['params']['id'], query = {}) {\n      const dbQuery = strapi.get('query-params').transform(RELEASE_MODEL_UID, query);\n      const release = await strapi.db.query(RELEASE_MODEL_UID).findOne({\n        ...dbQuery,\n        where: { id },\n      });\n\n      return release;\n    },\n\n    findPage(query?: GetReleases.Request['query']) {\n      const dbQuery = strapi.get('query-params').transform(RELEASE_MODEL_UID, query ?? {});\n\n      return strapi.db.query(RELEASE_MODEL_UID).findPage({\n        ...dbQuery,\n        populate: {\n          actions: {\n            count: true,\n          },\n        },\n      });\n    },\n\n    findMany(query?: any) {\n      const dbQuery = strapi.get('query-params').transform(RELEASE_MODEL_UID, query ?? {});\n\n      return strapi.db.query(RELEASE_MODEL_UID).findMany({\n        ...dbQuery,\n      });\n    },\n\n    async update(\n      id: Data.ID,\n      releaseData: UpdateRelease.Request['body'],\n      { user }: { user: UserInfo }\n    ) {\n      const releaseWithCreatorFields = await setCreatorFields({ user, isEdition: true })(\n        releaseData\n      );\n\n      const { validateUniqueNameForPendingRelease, validateScheduledAtIsLaterThanNow } = getService(\n        'release-validation',\n        { strapi }\n      );\n\n      await Promise.all([\n        validateUniqueNameForPendingRelease(releaseWithCreatorFields.name, id),\n        validateScheduledAtIsLaterThanNow(releaseWithCreatorFields.scheduledAt),\n      ]);\n\n      const release = await strapi.db.query(RELEASE_MODEL_UID).findOne({ where: { id } });\n\n      if (!release) {\n        throw new errors.NotFoundError(`No release found for id ${id}`);\n      }\n\n      if (release.releasedAt) {\n        throw new errors.ValidationError('Release already published');\n      }\n\n      const updatedRelease = await strapi.db.query(RELEASE_MODEL_UID).update({\n        where: { id },\n        data: releaseWithCreatorFields,\n      });\n\n      const schedulingService = getService('scheduling', { strapi });\n\n      if (releaseData.scheduledAt) {\n        // set function always cancel the previous job if it exists, so we can call it directly\n        await schedulingService.set(id, releaseData.scheduledAt);\n      } else if (release.scheduledAt) {\n        // When user don't send a scheduledAt and we have one on the release, means that user want to unschedule it\n        schedulingService.cancel(id);\n      }\n\n      this.updateReleaseStatus(id);\n\n      strapi.telemetry.send('didUpdateContentRelease');\n\n      return updatedRelease;\n    },\n\n    async getAllComponents() {\n      const contentManagerComponentsService = strapi\n        .plugin('content-manager')\n        .service('components');\n\n      const components = await contentManagerComponentsService.findAllComponents();\n\n      const componentsMap = components.reduce(\n        (\n          acc: { [key: Struct.ComponentSchema['uid']]: Struct.ComponentSchema },\n          component: Struct.ComponentSchema\n        ) => {\n          acc[component.uid] = component;\n\n          return acc;\n        },\n        {}\n      );\n\n      return componentsMap;\n    },\n\n    async delete(releaseId: DeleteRelease.Request['params']['id']) {\n      const release: Release = await strapi.db.query(RELEASE_MODEL_UID).findOne({\n        where: { id: releaseId },\n        populate: {\n          actions: {\n            select: ['id'],\n          },\n        },\n      });\n\n      if (!release) {\n        throw new errors.NotFoundError(`No release found for id ${releaseId}`);\n      }\n\n      if (release.releasedAt) {\n        throw new errors.ValidationError('Release already published');\n      }\n\n      // Only delete the release and its actions is you in fact can delete all the actions and the release\n      // Otherwise, if the transaction fails it throws an error\n      await strapi.db.transaction(async () => {\n        await strapi.db.query(RELEASE_ACTION_MODEL_UID).deleteMany({\n          where: {\n            id: {\n              $in: release.actions.map((action) => action.id),\n            },\n          },\n        });\n\n        await strapi.db.query(RELEASE_MODEL_UID).delete({\n          where: {\n            id: releaseId,\n          },\n        });\n      });\n\n      if (release.scheduledAt) {\n        const schedulingService = getService('scheduling', { strapi });\n        await schedulingService.cancel(release.id);\n      }\n\n      strapi.telemetry.send('didDeleteContentRelease');\n\n      return release;\n    },\n\n    async publish(releaseId: PublishRelease.Request['params']['id']) {\n      const {\n        release,\n        error,\n      }: { release: Pick<Release, 'id' | 'releasedAt' | 'status'> | null; error: unknown | null } =\n        await strapi.db.transaction(async ({ trx }) => {\n          /**\n           * We lock the release in this transaction, so any other process trying to publish it will wait until this transaction is finished\n           * In this transaction we don't care about rollback, becasue we want to persist the lock until the end and if it fails we want to change the release status to failed\n           */\n          const lockedRelease = (await strapi.db\n            ?.queryBuilder(RELEASE_MODEL_UID)\n            .where({ id: releaseId })\n            .select(['id', 'name', 'releasedAt', 'status'])\n            .first()\n            .transacting(trx)\n            .forUpdate()\n            .execute()) as Pick<Release, 'id' | 'name' | 'releasedAt' | 'status'> | undefined;\n\n          if (!lockedRelease) {\n            throw new errors.NotFoundError(`No release found for id ${releaseId}`);\n          }\n\n          if (lockedRelease.releasedAt) {\n            throw new errors.ValidationError('Release already published');\n          }\n\n          if (lockedRelease.status === 'failed') {\n            throw new errors.ValidationError('Release failed to publish');\n          }\n\n          try {\n            strapi.log.info(`[Content Releases] Starting to publish release ${lockedRelease.name}`);\n\n            const formattedActions = await getFormattedActions(releaseId);\n\n            await strapi.db.transaction(async () =>\n              Promise.all(\n                Object.keys(formattedActions).map(async (contentTypeUid) => {\n                  const contentType = contentTypeUid as UID.ContentType;\n                  const { publish, unpublish } = formattedActions[contentType];\n\n                  return Promise.all([\n                    ...publish.map((params) => strapi.documents(contentType).publish(params)),\n                    ...unpublish.map((params) => strapi.documents(contentType).unpublish(params)),\n                  ]);\n                })\n              )\n            );\n\n            const release = await strapi.db.query(RELEASE_MODEL_UID).update({\n              where: {\n                id: releaseId,\n              },\n              data: {\n                status: 'done',\n                releasedAt: new Date(),\n              },\n            });\n\n            dispatchWebhook(ALLOWED_WEBHOOK_EVENTS.RELEASES_PUBLISH, {\n              isPublished: true,\n              release,\n            });\n\n            strapi.telemetry.send('didPublishContentRelease');\n\n            return { release, error: null };\n          } catch (error) {\n            dispatchWebhook(ALLOWED_WEBHOOK_EVENTS.RELEASES_PUBLISH, {\n              isPublished: false,\n              error,\n            });\n\n            // We need to run the update in the same transaction because the release is locked\n            await strapi.db\n              ?.queryBuilder(RELEASE_MODEL_UID)\n              .where({ id: releaseId })\n              .update({\n                status: 'failed',\n              })\n              .transacting(trx)\n              .execute();\n\n            // At this point, we don't want to throw the error because if that happen we rollback the change in the release status\n            // We want to throw the error after the transaction is finished, so we return the error\n            return {\n              release: null,\n              error,\n            };\n          }\n        });\n\n      // Now the first transaction is commited, we can safely throw the error if it exists\n      if (error instanceof Error) {\n        throw error;\n      }\n\n      return release;\n    },\n\n    async updateReleaseStatus(releaseId: Release['id']) {\n      const releaseActionService = getService('release-action', { strapi });\n\n      const [totalActions, invalidActions] = await Promise.all([\n        releaseActionService.countActions({\n          filters: {\n            release: releaseId,\n          },\n        }),\n        releaseActionService.countActions({\n          filters: {\n            release: releaseId,\n            isEntryValid: false,\n          },\n        }),\n      ]);\n\n      if (totalActions > 0) {\n        if (invalidActions > 0) {\n          return strapi.db.query(RELEASE_MODEL_UID).update({\n            where: {\n              id: releaseId,\n            },\n            data: {\n              status: 'blocked',\n            },\n          });\n        }\n\n        return strapi.db.query(RELEASE_MODEL_UID).update({\n          where: {\n            id: releaseId,\n          },\n          data: {\n            status: 'ready',\n          },\n        });\n      }\n\n      return strapi.db.query(RELEASE_MODEL_UID).update({\n        where: {\n          id: releaseId,\n        },\n        data: {\n          status: 'empty',\n        },\n      });\n    },\n  };\n};\n\nexport type ReleaseService = ReturnType<typeof createReleaseService>;\n\nexport default createReleaseService;\n","import { errors, async } from '@strapi/utils';\n\nimport type { Core, Internal, Modules, UID, Data } from '@strapi/types';\n\nimport _ from 'lodash/fp';\n\nimport { RELEASE_ACTION_MODEL_UID, RELEASE_MODEL_UID } from '../constants';\n\nimport type {\n  CreateReleaseAction,\n  GetReleaseActions,\n  ReleaseAction,\n  ReleaseActionGroupBy,\n  UpdateReleaseAction,\n  DeleteReleaseAction,\n} from '../../../shared/contracts/release-actions';\nimport type { Entity } from '../../../shared/types';\nimport { getService, getDraftEntryValidStatus, getEntry, getEntryStatus } from '../utils';\n\nconst getGroupName = (queryValue: string) => {\n  switch (queryValue) {\n    case 'contentType':\n      return 'contentType.displayName';\n    case 'type':\n      return 'type';\n    case 'locale':\n      return _.getOr('No locale', 'locale.name');\n    default:\n      return 'contentType.displayName';\n  }\n};\n\nexport interface Locale extends Entity {\n  name: string;\n  code: string;\n}\n\ntype LocaleDictionary = {\n  [key: Locale['code']]: Pick<Locale, 'name' | 'code'>;\n};\n\nconst createReleaseActionService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const getLocalesDataForActions = async () => {\n    if (!strapi.plugin('i18n')) {\n      return {};\n    }\n\n    const allLocales: Locale[] = (await strapi.plugin('i18n').service('locales').find()) || [];\n    return allLocales.reduce<LocaleDictionary>((acc, locale) => {\n      acc[locale.code] = { name: locale.name, code: locale.code };\n\n      return acc;\n    }, {});\n  };\n\n  const getContentTypesDataForActions = async (\n    contentTypesUids: ReleaseAction['contentType'][]\n  ) => {\n    const contentManagerContentTypeService = strapi\n      .plugin('content-manager')\n      .service('content-types');\n\n    const contentTypesData: Record<\n      Internal.UID.ContentType,\n      { mainField: string; displayName: string }\n    > = {};\n    for (const contentTypeUid of contentTypesUids) {\n      const contentTypeConfig = await contentManagerContentTypeService.findConfiguration({\n        uid: contentTypeUid,\n      });\n\n      contentTypesData[contentTypeUid] = {\n        mainField: contentTypeConfig.settings.mainField,\n        displayName: strapi.getModel(contentTypeUid).info.displayName,\n      };\n    }\n\n    return contentTypesData;\n  };\n\n  return {\n    async create(\n      releaseId: CreateReleaseAction.Request['params']['releaseId'],\n      action: CreateReleaseAction.Request['body'],\n      { disableUpdateReleaseStatus = false }: { disableUpdateReleaseStatus?: boolean } = {}\n    ) {\n      const { validateEntryData, validateUniqueEntry } = getService('release-validation', {\n        strapi,\n      });\n\n      await Promise.all([\n        validateEntryData(action.contentType, action.entryDocumentId),\n        validateUniqueEntry(releaseId, action),\n      ]);\n\n      // If we are adding a singleType, we need to append the documentId of that singleType\n      const model = strapi.contentType(action.contentType);\n      if (model.kind === 'singleType') {\n        const document = await strapi.db.query(model.uid).findOne({ select: ['documentId'] });\n\n        if (!document) {\n          throw new errors.NotFoundError(`No entry found for contentType ${action.contentType}`);\n        }\n\n        action.entryDocumentId = document.documentId;\n      }\n\n      const release = await strapi.db\n        .query(RELEASE_MODEL_UID)\n        .findOne({ where: { id: releaseId } });\n\n      if (!release) {\n        throw new errors.NotFoundError(`No release found for id ${releaseId}`);\n      }\n\n      if (release.releasedAt) {\n        throw new errors.ValidationError('Release already published');\n      }\n\n      // If the action is a publish, check if the entry is valid\n      // If the action is an unpublish, skip the validation\n      const actionStatus =\n        action.type === 'publish'\n          ? await getDraftEntryValidStatus(\n              {\n                contentType: action.contentType,\n                documentId: action.entryDocumentId,\n                locale: action.locale,\n              },\n              {\n                strapi,\n              }\n            )\n          : true;\n\n      const releaseAction = await strapi.db.query(RELEASE_ACTION_MODEL_UID).create({\n        data: {\n          ...action,\n          release: release.id,\n          isEntryValid: actionStatus,\n        },\n        populate: { release: { select: ['id'] } },\n      });\n\n      if (!disableUpdateReleaseStatus) {\n        getService('release', { strapi }).updateReleaseStatus(release.id);\n      }\n\n      return releaseAction;\n    },\n\n    async findPage(\n      releaseId: GetReleaseActions.Request['params']['releaseId'],\n      query?: GetReleaseActions.Request['query']\n    ) {\n      const release = await strapi.db.query(RELEASE_MODEL_UID).findOne({\n        where: { id: releaseId },\n        select: ['id'],\n      });\n\n      if (!release) {\n        throw new errors.NotFoundError(`No release found for id ${releaseId}`);\n      }\n\n      const dbQuery = strapi.get('query-params').transform(RELEASE_ACTION_MODEL_UID, query ?? {});\n      const { results: actions, pagination } = await strapi.db\n        .query(RELEASE_ACTION_MODEL_UID)\n        .findPage({\n          ...dbQuery,\n          where: {\n            release: releaseId,\n          },\n        });\n\n      // For each contentType on the release, we create a custom populate object for nested relations\n      const populateBuilderService = strapi.plugin('content-manager').service('populate-builder');\n\n      const actionsWithEntry = await async.map(actions, async (action: ReleaseAction) => {\n        // @ts-expect-error - Core.Service type is not a function\n        const populate = await populateBuilderService(action.contentType)\n          .populateDeep(Infinity)\n          .build();\n\n        const entry = await getEntry(\n          {\n            contentType: action.contentType,\n            documentId: action.entryDocumentId,\n            locale: action.locale,\n            populate,\n            status: action.type === 'publish' ? 'draft' : 'published',\n          },\n          { strapi }\n        );\n\n        return {\n          ...action,\n          entry,\n          status: entry ? await getEntryStatus(action.contentType, entry) : null,\n        };\n      });\n\n      return {\n        results: actionsWithEntry,\n        pagination,\n      };\n    },\n\n    async groupActions(actions: ReleaseAction[], groupBy: ReleaseActionGroupBy) {\n      const contentTypeUids = actions.reduce<ReleaseAction['contentType'][]>((acc, action) => {\n        if (!acc.includes(action.contentType)) {\n          acc.push(action.contentType);\n        }\n\n        return acc;\n      }, []);\n      const allReleaseContentTypesDictionary = await getContentTypesDataForActions(contentTypeUids);\n      const allLocalesDictionary = await getLocalesDataForActions();\n\n      const formattedData = actions.map((action: ReleaseAction) => {\n        const { mainField, displayName } = allReleaseContentTypesDictionary[action.contentType];\n\n        return {\n          ...action,\n          locale: action.locale ? allLocalesDictionary[action.locale] : null,\n          contentType: {\n            displayName,\n            mainFieldValue: action.entry[mainField],\n            uid: action.contentType,\n          },\n        };\n      });\n\n      const groupName = getGroupName(groupBy);\n      return _.groupBy(groupName)(formattedData);\n    },\n\n    async getContentTypeModelsFromActions(actions: ReleaseAction[]) {\n      const contentTypeUids = actions.reduce<ReleaseAction['contentType'][]>((acc, action) => {\n        if (!acc.includes(action.contentType)) {\n          acc.push(action.contentType);\n        }\n\n        return acc;\n      }, []);\n\n      const workflowsService = strapi.plugin('review-workflows').service('workflows');\n\n      const contentTypeModelsMap = await async.reduce(contentTypeUids)(\n        async (\n          accPromise: Promise<GetReleaseActions.Response['meta']['contentTypes']>,\n          contentTypeUid: ReleaseAction['contentType']\n        ) => {\n          const acc = await accPromise;\n          const contentTypeModel = strapi.getModel(contentTypeUid);\n\n          const workflow = await workflowsService.getAssignedWorkflow(contentTypeUid, {\n            populate: 'stageRequiredToPublish',\n          });\n\n          acc[contentTypeUid] = {\n            ...contentTypeModel,\n            hasReviewWorkflow: !!workflow,\n            stageRequiredToPublish: workflow?.stageRequiredToPublish,\n          };\n\n          return acc;\n        },\n        {}\n      );\n\n      return contentTypeModelsMap;\n    },\n\n    async countActions(\n      query: Modules.EntityService.Params.Pick<typeof RELEASE_ACTION_MODEL_UID, 'filters'>\n    ) {\n      const dbQuery = strapi.get('query-params').transform(RELEASE_ACTION_MODEL_UID, query ?? {});\n\n      return strapi.db.query(RELEASE_ACTION_MODEL_UID).count(dbQuery);\n    },\n\n    async update(\n      actionId: UpdateReleaseAction.Request['params']['actionId'],\n      releaseId: UpdateReleaseAction.Request['params']['releaseId'],\n      update: UpdateReleaseAction.Request['body']\n    ) {\n      const action = await strapi.db.query(RELEASE_ACTION_MODEL_UID).findOne({\n        where: {\n          id: actionId,\n          release: {\n            id: releaseId,\n            releasedAt: {\n              $null: true,\n            },\n          },\n        },\n      });\n\n      if (!action) {\n        throw new errors.NotFoundError(\n          `Action with id ${actionId} not found in release with id ${releaseId} or it is already published`\n        );\n      }\n\n      const actionStatus =\n        update.type === 'publish'\n          ? await getDraftEntryValidStatus(\n              {\n                contentType: action.contentType,\n                documentId: action.entryDocumentId,\n                locale: action.locale,\n              },\n              {\n                strapi,\n              }\n            )\n          : true;\n\n      const updatedAction = await strapi.db.query(RELEASE_ACTION_MODEL_UID).update({\n        where: {\n          id: actionId,\n          release: {\n            id: releaseId,\n            releasedAt: {\n              $null: true,\n            },\n          },\n        },\n        data: {\n          ...update,\n          isEntryValid: actionStatus,\n        },\n      });\n\n      getService('release', { strapi }).updateReleaseStatus(releaseId);\n\n      return updatedAction;\n    },\n\n    async delete(\n      actionId: DeleteReleaseAction.Request['params']['actionId'],\n      releaseId: DeleteReleaseAction.Request['params']['releaseId']\n    ) {\n      const deletedAction = await strapi.db.query(RELEASE_ACTION_MODEL_UID).delete({\n        where: {\n          id: actionId,\n          release: {\n            id: releaseId,\n            releasedAt: {\n              $null: true,\n            },\n          },\n        },\n      });\n\n      if (!deletedAction) {\n        throw new errors.NotFoundError(\n          `Action with id ${actionId} not found in release with id ${releaseId} or it is already published`\n        );\n      }\n\n      getService('release', { strapi }).updateReleaseStatus(releaseId);\n\n      return deletedAction;\n    },\n\n    async validateActionsByContentTypes(contentTypeUids: UID.ContentType[]) {\n      const actions = await strapi.db.query(RELEASE_ACTION_MODEL_UID).findMany({\n        where: {\n          contentType: {\n            $in: contentTypeUids,\n          },\n          // We only want to validate actions that are going to be published\n          type: 'publish',\n          release: {\n            releasedAt: {\n              $null: true,\n            },\n          },\n        },\n        populate: { release: true },\n      });\n\n      const releasesUpdated: Data.ID[] = [];\n\n      await async.map(actions, async (action: ReleaseAction) => {\n        const isValid = await getDraftEntryValidStatus(\n          {\n            contentType: action.contentType,\n            documentId: action.entryDocumentId,\n            locale: action.locale,\n          },\n          { strapi }\n        );\n\n        await strapi.db.query(RELEASE_ACTION_MODEL_UID).update({\n          where: {\n            id: action.id,\n          },\n          data: {\n            isEntryValid: isValid,\n          },\n        });\n\n        if (!releasesUpdated.includes(action.release.id)) {\n          releasesUpdated.push(action.release.id);\n        }\n\n        return {\n          id: action.id,\n          isEntryValid: isValid,\n        };\n      });\n\n      if (releasesUpdated.length > 0) {\n        await async.map(releasesUpdated, async (releaseId: number) => {\n          await getService('release', { strapi }).updateReleaseStatus(releaseId);\n        });\n      }\n    },\n  };\n};\n\nexport type ReleaseActionService = ReturnType<typeof createReleaseActionService>;\n\nexport default createReleaseActionService;\n","import { errors, contentTypes } from '@strapi/utils';\nimport { Core, UID } from '@strapi/types';\nimport type { Release, CreateRelease, UpdateRelease } from '../../../shared/contracts/releases';\nimport type { CreateReleaseAction } from '../../../shared/contracts/release-actions';\nimport { RELEASE_MODEL_UID } from '../constants';\n\nexport class AlreadyOnReleaseError extends errors.ApplicationError<'AlreadyOnReleaseError'> {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyOnReleaseError';\n  }\n}\n\nconst createReleaseValidationService = ({ strapi }: { strapi: Core.Strapi }) => ({\n  async validateUniqueEntry(\n    releaseId: CreateReleaseAction.Request['params']['releaseId'],\n    releaseActionArgs: CreateReleaseAction.Request['body']\n  ) {\n    /**\n     * Asserting the type, otherwise TS complains: 'release.actions' is of type 'unknown', even though the types come through for non-populated fields...\n     * Possibly related to the comment on GetValues: https://github.com/strapi/strapi/blob/main/packages/core/types/src/modules/entity-service/result.ts\n     */\n    const release = (await strapi.db.query(RELEASE_MODEL_UID).findOne({\n      where: {\n        id: releaseId,\n      },\n      populate: {\n        actions: true,\n      },\n    })) as Release | null;\n\n    if (!release) {\n      throw new errors.NotFoundError(`No release found for id ${releaseId}`);\n    }\n\n    const isEntryInRelease = release.actions.some(\n      (action) =>\n        action.entryDocumentId === releaseActionArgs.entryDocumentId &&\n        action.contentType === releaseActionArgs.contentType &&\n        (releaseActionArgs.locale ? action.locale === releaseActionArgs.locale : true)\n    );\n\n    if (isEntryInRelease) {\n      throw new AlreadyOnReleaseError(\n        `Entry with documentId ${releaseActionArgs.entryDocumentId}${releaseActionArgs.locale ? `( ${releaseActionArgs.locale})` : ''} and contentType ${releaseActionArgs.contentType} already exists in release with id ${releaseId}`\n      );\n    }\n  },\n  validateEntryData(\n    contentTypeUid: CreateReleaseAction.Request['body']['contentType'],\n    entryDocumentId: CreateReleaseAction.Request['body']['entryDocumentId']\n  ) {\n    const contentType = strapi.contentType(contentTypeUid as UID.ContentType);\n\n    if (!contentType) {\n      throw new errors.NotFoundError(`No content type found for uid ${contentTypeUid}`);\n    }\n\n    if (!contentTypes.hasDraftAndPublish(contentType)) {\n      throw new errors.ValidationError(\n        `Content type with uid ${contentTypeUid} does not have draftAndPublish enabled`\n      );\n    }\n\n    if (contentType.kind === 'collectionType' && !entryDocumentId) {\n      throw new errors.ValidationError('Document id is required for collection type');\n    }\n  },\n  async validatePendingReleasesLimit() {\n    // Use the maximum releases option if it exists, otherwise default to 3\n    const featureCfg = strapi.ee.features.get('cms-content-releases');\n\n    const maximumPendingReleases =\n      (typeof featureCfg === 'object' && featureCfg?.options?.maximumReleases) || 3;\n\n    const [, pendingReleasesCount] = await strapi.db.query(RELEASE_MODEL_UID).findWithCount({\n      filters: {\n        releasedAt: {\n          $null: true,\n        },\n      },\n    });\n\n    // Unlimited is a number that will never be reached like 9999\n    if (pendingReleasesCount >= maximumPendingReleases) {\n      throw new errors.ValidationError('You have reached the maximum number of pending releases');\n    }\n  },\n  async validateUniqueNameForPendingRelease(\n    name: CreateRelease.Request['body']['name'],\n    id?: UpdateRelease.Request['params']['id']\n  ) {\n    const pendingReleases = (await strapi.db.query(RELEASE_MODEL_UID).findMany({\n      where: {\n        releasedAt: {\n          $null: true,\n        },\n        name,\n        ...(id && { id: { $ne: id } }),\n      },\n    })) as Release[];\n\n    const isNameUnique = pendingReleases.length === 0;\n\n    if (!isNameUnique) {\n      throw new errors.ValidationError(`Release with name ${name} already exists`);\n    }\n  },\n  async validateScheduledAtIsLaterThanNow(\n    scheduledAt: CreateRelease.Request['body']['scheduledAt']\n  ) {\n    if (scheduledAt && new Date(scheduledAt) <= new Date()) {\n      throw new errors.ValidationError('Scheduled at must be later than now');\n    }\n  },\n});\n\nexport default createReleaseValidationService;\n","import { scheduleJob, Job } from 'node-schedule';\nimport { Core } from '@strapi/types';\n\nimport { errors } from '@strapi/utils';\nimport { Release } from '../../../shared/contracts/releases';\nimport { getService } from '../utils';\nimport { RELEASE_MODEL_UID } from '../constants';\n\nconst createSchedulingService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const scheduledJobs = new Map<Release['id'], Job>();\n\n  return {\n    async set(releaseId: Release['id'], scheduleDate: Date) {\n      const release = await strapi.db\n        .query(RELEASE_MODEL_UID)\n        .findOne({ where: { id: releaseId, releasedAt: null } });\n\n      if (!release) {\n        throw new errors.NotFoundError(`No release found for id ${releaseId}`);\n      }\n\n      const job = scheduleJob(scheduleDate, async () => {\n        try {\n          await getService('release', { strapi }).publish(releaseId);\n          // @TODO: Trigger webhook with success message\n        } catch (error) {\n          // @TODO: Trigger webhook with error message\n        }\n\n        this.cancel(releaseId);\n      });\n\n      if (scheduledJobs.has(releaseId)) {\n        this.cancel(releaseId);\n      }\n\n      scheduledJobs.set(releaseId, job);\n\n      return scheduledJobs;\n    },\n\n    cancel(releaseId: Release['id']) {\n      if (scheduledJobs.has(releaseId)) {\n        scheduledJobs.get(releaseId)!.cancel();\n        scheduledJobs.delete(releaseId);\n      }\n\n      return scheduledJobs;\n    },\n\n    getAll() {\n      return scheduledJobs;\n    },\n\n    /**\n     * On bootstrap, we can use this function to make sure to sync the scheduled jobs from the database that are not yet released\n     * This is useful in case the server was restarted and the scheduled jobs were lost\n     * This also could be used to sync different Strapi instances in case of a cluster\n     */\n    async syncFromDatabase() {\n      const releases = await strapi.db.query(RELEASE_MODEL_UID).findMany({\n        where: {\n          scheduledAt: {\n            $gte: new Date(),\n          },\n          releasedAt: null,\n        },\n      });\n\n      for (const release of releases) {\n        this.set(release.id, release.scheduledAt);\n      }\n\n      return scheduledJobs;\n    },\n  };\n};\n\nexport default createSchedulingService;\n","import type { Core } from '@strapi/types';\n\nimport type { Settings } from '../../../shared/contracts/settings';\n\nconst DEFAULT_SETTINGS = {\n  defaultTimezone: null,\n} satisfies Settings;\n\nconst createSettingsService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const getStore = async () => strapi.store({ type: 'core', name: 'content-releases' });\n\n  return {\n    async update({ settings }: { settings: Settings }): Promise<Settings> {\n      const store = await getStore();\n      store.set({ key: 'settings', value: settings });\n      return settings;\n    },\n    async find(): Promise<Settings> {\n      const store = await getStore();\n      const settings = (await store.get({ key: 'settings' })) as Settings | undefined;\n\n      return {\n        ...DEFAULT_SETTINGS,\n        ...(settings || {}),\n      };\n    },\n  };\n};\n\nexport type SettingsService = ReturnType<typeof createSettingsService>;\n\nexport default createSettingsService;\n","import release from './release';\nimport releaseAction from './release-action';\nimport releaseValidation from './validation';\nimport scheduling from './scheduling';\nimport settings from './settings';\n\nexport const services = {\n  release,\n  'release-action': releaseAction,\n  'release-validation': releaseValidation,\n  scheduling,\n  settings,\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nexport const RELEASE_SCHEMA = yup\n  .object()\n  .shape({\n    name: yup.string().trim().required(),\n    scheduledAt: yup.string().nullable(),\n    timezone: yup.string().when('scheduledAt', {\n      is: (value: any) => value !== null && value !== undefined,\n      then: yup.string().required(),\n      otherwise: yup.string().nullable(),\n    }),\n  })\n  .required()\n  .noUnknown();\n\nconst FIND_BY_DOCUMENT_ATTACHED_PARAMS_SCHEMA = yup\n  .object()\n  .shape({\n    contentType: yup.string().required(),\n    entryDocumentId: yup.string().nullable(),\n    hasEntryAttached: yup.string().nullable(),\n    locale: yup.string().nullable(),\n  })\n  .required()\n  .noUnknown();\n\nexport const validateRelease = validateYupSchema(RELEASE_SCHEMA);\n\nexport const validatefindByDocumentAttachedParams = validateYupSchema(\n  FIND_BY_DOCUMENT_ATTACHED_PARAMS_SCHEMA\n);\n","import type Koa from 'koa';\nimport { errors } from '@strapi/utils';\nimport type { Schema } from '@strapi/types';\nimport { RELEASE_MODEL_UID } from '../constants';\nimport { validateRelease, validatefindByDocumentAttachedParams } from './validation/release';\nimport type {\n  CreateRelease,\n  UpdateRelease,\n  PublishRelease,\n  GetRelease,\n  Release,\n  DeleteRelease,\n  GetReleases,\n  MapEntriesToReleases,\n} from '../../../shared/contracts/releases';\nimport type { UserInfo } from '../../../shared/types';\nimport { getService } from '../utils';\n\ntype ReleaseWithPopulatedActions = Release & { actions: { count: number } };\n\nconst releaseController = {\n  /**\n   * Find releases based on documents attached or not to the release.\n   * If `hasEntryAttached` is true, it will return all releases that have the entry attached.\n   * If `hasEntryAttached` is false, it will return all releases that don't have the entry attached.\n   */\n  async findByDocumentAttached(ctx: Koa.Context) {\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: RELEASE_MODEL_UID,\n    });\n    await permissionsManager.validateQuery(ctx.query);\n    const releaseService = getService('release', { strapi });\n    const query = await permissionsManager.sanitizeQuery(ctx.query);\n\n    await validatefindByDocumentAttachedParams(query);\n\n    // If entry is a singleType, we need to manually add the entryDocumentId to the query\n    const model = strapi.getModel(query.contentType) as Schema.ContentType;\n    if (model.kind && model.kind === 'singleType') {\n      const document = await strapi.db.query(model.uid).findOne({ select: ['documentId'] });\n\n      if (!document) {\n        throw new errors.NotFoundError(`No entry found for contentType ${query.contentType}`);\n      }\n\n      query.entryDocumentId = document.documentId;\n    }\n\n    const { contentType, hasEntryAttached, entryDocumentId, locale } = query;\n    const isEntryAttached =\n      typeof hasEntryAttached === 'string' ? Boolean(JSON.parse(hasEntryAttached)) : false;\n\n    if (isEntryAttached) {\n      const releases = await releaseService.findMany({\n        where: {\n          releasedAt: null,\n          actions: {\n            contentType,\n            entryDocumentId: entryDocumentId ?? null,\n            locale: locale ?? null,\n          },\n        },\n        populate: {\n          actions: {\n            fields: ['type'],\n            filters: {\n              contentType,\n              entryDocumentId: entryDocumentId ?? null,\n              locale: locale ?? null,\n            },\n          },\n        },\n      });\n\n      ctx.body = { data: releases };\n    } else {\n      const relatedReleases = await releaseService.findMany({\n        where: {\n          releasedAt: null,\n          actions: {\n            contentType,\n            entryDocumentId: entryDocumentId ?? null,\n            locale: locale ?? null,\n          },\n        },\n      });\n\n      const releases = await releaseService.findMany({\n        where: {\n          $or: [\n            {\n              id: {\n                $notIn: relatedReleases.map((release: any) => release.id),\n              },\n            },\n            {\n              actions: null,\n            },\n          ],\n          releasedAt: null,\n        },\n      });\n      ctx.body = { data: releases };\n    }\n  },\n\n  async findPage(ctx: Koa.Context) {\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: RELEASE_MODEL_UID,\n    });\n\n    await permissionsManager.validateQuery(ctx.query);\n\n    const releaseService = getService('release', { strapi });\n\n    const query: GetReleases.Request['query'] = await permissionsManager.sanitizeQuery(ctx.query);\n    const { results, pagination } = await releaseService.findPage(query);\n\n    const data = results.map((release: ReleaseWithPopulatedActions) => {\n      const { actions, ...releaseData } = release;\n\n      return {\n        ...releaseData,\n        actions: {\n          meta: {\n            count: actions.count,\n          },\n        },\n      };\n    });\n\n    const pendingReleasesCount = await strapi.db.query(RELEASE_MODEL_UID).count({\n      where: {\n        releasedAt: null,\n      },\n    });\n\n    ctx.body = { data, meta: { pagination, pendingReleasesCount } };\n  },\n\n  async findOne(ctx: Koa.Context) {\n    const id: GetRelease.Request['params']['id'] = ctx.params.id;\n\n    const releaseService = getService('release', { strapi });\n    const releaseActionService = getService('release-action', { strapi });\n    const release = await releaseService.findOne(id, { populate: ['createdBy'] });\n    if (!release) {\n      throw new errors.NotFoundError(`Release not found for id: ${id}`);\n    }\n\n    const count = await releaseActionService.countActions({\n      filters: {\n        release: id,\n      },\n    });\n    const sanitizedRelease = {\n      ...release,\n      createdBy: release.createdBy\n        ? strapi.service('admin::user').sanitizeUser(release.createdBy)\n        : null,\n    };\n\n    // Format the data object\n    const data = {\n      ...sanitizedRelease,\n      actions: {\n        meta: {\n          count,\n        },\n      },\n    };\n\n    ctx.body = { data };\n  },\n\n  async mapEntriesToReleases(ctx: Koa.Context) {\n    const { contentTypeUid, documentIds, locale } = ctx.query;\n\n    if (!contentTypeUid || !documentIds) {\n      throw new errors.ValidationError('Missing required query parameters');\n    }\n\n    const releaseService = getService('release', { strapi });\n\n    const releasesWithActions = await releaseService.findMany({\n      where: {\n        releasedAt: null,\n        actions: {\n          contentType: contentTypeUid,\n          entryDocumentId: {\n            $in: documentIds,\n          },\n          locale,\n        },\n      },\n      populate: {\n        actions: true,\n      },\n    });\n\n    const mappedEntriesInReleases = releasesWithActions.reduce(\n      (acc: MapEntriesToReleases.Response['data'], release: Release) => {\n        release.actions.forEach((action) => {\n          if (action.contentType !== contentTypeUid) {\n            return;\n          }\n\n          if (locale && action.locale !== locale) {\n            return;\n          }\n\n          if (!acc[action.entryDocumentId]) {\n            acc[action.entryDocumentId] = [{ id: release.id, name: release.name }];\n          } else {\n            acc[action.entryDocumentId].push({ id: release.id, name: release.name });\n          }\n        });\n\n        return acc;\n      },\n      {} as MapEntriesToReleases.Response['data']\n    );\n\n    ctx.body = {\n      data: mappedEntriesInReleases,\n    };\n  },\n\n  async create(ctx: Koa.Context) {\n    const user: UserInfo = ctx.state.user;\n    const releaseArgs = ctx.request.body as CreateRelease.Request['body'];\n\n    await validateRelease(releaseArgs);\n\n    const releaseService = getService('release', { strapi });\n    const release = await releaseService.create(releaseArgs, { user });\n\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: RELEASE_MODEL_UID,\n    });\n\n    ctx.created({\n      data: await permissionsManager.sanitizeOutput(release),\n    });\n  },\n\n  async update(ctx: Koa.Context) {\n    const user: UserInfo = ctx.state.user;\n    const releaseArgs = ctx.request.body as UpdateRelease.Request['body'];\n    const id: UpdateRelease.Request['params']['id'] = ctx.params.id;\n\n    await validateRelease(releaseArgs);\n\n    const releaseService = getService('release', { strapi });\n    const release = await releaseService.update(id, releaseArgs, { user });\n\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: RELEASE_MODEL_UID,\n    });\n\n    ctx.body = {\n      data: await permissionsManager.sanitizeOutput(release),\n    };\n  },\n\n  async delete(ctx: Koa.Context) {\n    const id: DeleteRelease.Request['params']['id'] = ctx.params.id;\n\n    const releaseService = getService('release', { strapi });\n    const release = await releaseService.delete(id);\n\n    ctx.body = {\n      data: release,\n    };\n  },\n\n  async publish(ctx: Koa.Context) {\n    const id: PublishRelease.Request['params']['id'] = ctx.params.id;\n\n    const releaseService = getService('release', { strapi });\n    const releaseActionService = getService('release-action', { strapi });\n    const release = await releaseService.publish(id);\n\n    const [countPublishActions, countUnpublishActions] = await Promise.all([\n      releaseActionService.countActions({\n        filters: {\n          release: id,\n          type: 'publish',\n        },\n      }),\n      releaseActionService.countActions({\n        filters: {\n          release: id,\n          type: 'unpublish',\n        },\n      }),\n    ]);\n\n    ctx.body = {\n      data: release,\n      meta: {\n        totalEntries: countPublishActions + countUnpublishActions,\n        totalPublishedEntries: countPublishActions,\n        totalUnpublishedEntries: countUnpublishActions,\n      },\n    };\n  },\n};\n\nexport default releaseController;\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nconst RELEASE_ACTION_SCHEMA = yup.object().shape({\n  contentType: yup.string().required(),\n  entryDocumentId: yup.strapiID(),\n  locale: yup.string(),\n  type: yup.string().oneOf(['publish', 'unpublish']).required(),\n});\n\nconst RELEASE_ACTION_UPDATE_SCHEMA = yup.object().shape({\n  type: yup.string().oneOf(['publish', 'unpublish']).required(),\n});\n\nconst FIND_MANY_ACTIONS_PARAMS = yup.object().shape({\n  groupBy: yup.string().oneOf(['action', 'contentType', 'locale']),\n});\n\nexport const validateReleaseAction = validateYupSchema(RELEASE_ACTION_SCHEMA);\nexport const validateReleaseActionUpdateSchema = validateYupSchema(RELEASE_ACTION_UPDATE_SCHEMA);\nexport const validateFindManyActionsParams = validateYupSchema(FIND_MANY_ACTIONS_PARAMS);\n","import type Koa from 'koa';\n\nimport { async } from '@strapi/utils';\nimport {\n  validateReleaseAction,\n  validateReleaseActionUpdateSchema,\n  validateFindManyActionsParams,\n} from './validation/release-action';\nimport type {\n  CreateReleaseAction,\n  CreateManyReleaseActions,\n  GetReleaseActions,\n  UpdateReleaseAction,\n  DeleteReleaseAction,\n} from '../../../shared/contracts/release-actions';\nimport { getService } from '../utils';\nimport { RELEASE_ACTION_MODEL_UID } from '../constants';\nimport { AlreadyOnReleaseError } from '../services/validation';\n\nconst releaseActionController = {\n  async create(ctx: Koa.Context) {\n    const releaseId: CreateReleaseAction.Request['params']['releaseId'] = ctx.params.releaseId;\n    const releaseActionArgs = ctx.request.body as CreateReleaseAction.Request['body'];\n\n    await validateReleaseAction(releaseActionArgs);\n\n    const releaseActionService = getService('release-action', { strapi });\n    const releaseAction = await releaseActionService.create(releaseId, releaseActionArgs);\n\n    ctx.created({\n      data: releaseAction,\n    });\n  },\n\n  async createMany(ctx: Koa.Context) {\n    const releaseId: CreateManyReleaseActions.Request['params']['releaseId'] = ctx.params.releaseId;\n    const releaseActionsArgs = ctx.request.body as CreateManyReleaseActions.Request['body'];\n\n    await Promise.all(\n      releaseActionsArgs.map((releaseActionArgs) => validateReleaseAction(releaseActionArgs))\n    );\n\n    const releaseActionService = getService('release-action', { strapi });\n    const releaseService = getService('release', { strapi });\n\n    const releaseActions = await strapi.db.transaction(async () => {\n      const releaseActions = await Promise.all(\n        releaseActionsArgs.map(async (releaseActionArgs) => {\n          try {\n            const action = await releaseActionService.create(releaseId, releaseActionArgs, {\n              disableUpdateReleaseStatus: true,\n            });\n            return action;\n          } catch (error) {\n            // If the entry is already in the release, we don't want to throw an error, so we catch and ignore it\n            if (error instanceof AlreadyOnReleaseError) {\n              return null;\n            }\n            throw error;\n          }\n        })\n      );\n      return releaseActions;\n    });\n\n    const newReleaseActions = releaseActions.filter((action) => action !== null);\n\n    if (newReleaseActions.length > 0) {\n      releaseService.updateReleaseStatus(releaseId);\n    }\n\n    ctx.created({\n      data: newReleaseActions,\n      meta: {\n        entriesAlreadyInRelease: releaseActions.length - newReleaseActions.length,\n        totalEntries: releaseActions.length,\n      },\n    });\n  },\n\n  async findMany(ctx: Koa.Context) {\n    const releaseId: GetReleaseActions.Request['params']['releaseId'] = ctx.params.releaseId;\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: RELEASE_ACTION_MODEL_UID,\n    });\n\n    await validateFindManyActionsParams(ctx.query);\n\n    if (ctx.query.groupBy) {\n      if (!['action', 'contentType', 'locale'].includes(ctx.query.groupBy as string)) {\n        ctx.badRequest('Invalid groupBy parameter');\n      }\n    }\n\n    ctx.query.sort = ctx.query.groupBy === 'action' ? 'type' : ctx.query.groupBy;\n    delete ctx.query.groupBy;\n\n    const query = await permissionsManager.sanitizeQuery(ctx.query);\n\n    const releaseActionService = getService('release-action', { strapi });\n    const { results, pagination } = await releaseActionService.findPage(releaseId, {\n      ...query,\n    });\n\n    /**\n     * Release actions can be related to entries of different content types.\n     * We need to sanitize the entry output according to that content type.\n     * So, we group the sanitized output function by content type.\n     */\n    const contentTypeOutputSanitizers = results.reduce((acc: Record<string, any>, action: any) => {\n      if (acc[action.contentType]) {\n        return acc;\n      }\n\n      const contentTypePermissionsManager = strapi\n        .service('admin::permission')\n        .createPermissionsManager({\n          ability: ctx.state.userAbility,\n          model: action.contentType,\n        });\n\n      acc[action.contentType] = contentTypePermissionsManager.sanitizeOutput;\n\n      return acc;\n    }, {});\n\n    /**\n     * sanitizeOutput doesn't work if you use it directly on the Release Action model, it doesn't sanitize the entries\n     * So, we need to sanitize manually each entry inside a Release Action\n     */\n    const sanitizedResults = await async.map(results, async (action: any) => ({\n      ...action,\n      entry: action.entry\n        ? await contentTypeOutputSanitizers[action.contentType](action.entry)\n        : {},\n    }));\n\n    const groupedData = await releaseActionService.groupActions(sanitizedResults, query.sort);\n\n    const contentTypes = await releaseActionService.getContentTypeModelsFromActions(results);\n\n    const releaseService = getService('release', { strapi });\n    const components = await releaseService.getAllComponents();\n\n    ctx.body = {\n      data: groupedData,\n      meta: {\n        pagination,\n        contentTypes,\n        components,\n      },\n    };\n  },\n\n  async update(ctx: Koa.Context) {\n    const actionId: UpdateReleaseAction.Request['params']['actionId'] = ctx.params.actionId;\n    const releaseId: UpdateReleaseAction.Request['params']['releaseId'] = ctx.params.releaseId;\n    const releaseActionUpdateArgs = ctx.request.body as UpdateReleaseAction.Request['body'];\n\n    await validateReleaseActionUpdateSchema(releaseActionUpdateArgs);\n\n    const releaseActionService = getService('release-action', { strapi });\n\n    const updatedAction = await releaseActionService.update(\n      actionId,\n      releaseId,\n      releaseActionUpdateArgs\n    );\n\n    ctx.body = {\n      data: updatedAction,\n    };\n  },\n\n  async delete(ctx: Koa.Context) {\n    const actionId: DeleteReleaseAction.Request['params']['actionId'] = ctx.params.actionId;\n    const releaseId: DeleteReleaseAction.Request['params']['releaseId'] = ctx.params.releaseId;\n\n    const releaseActionService = getService('release-action', { strapi });\n\n    const deletedReleaseAction = await releaseActionService.delete(actionId, releaseId);\n\n    ctx.body = {\n      data: deletedReleaseAction,\n    };\n  },\n};\n\nexport default releaseActionController;\n","import { validateYupSchema } from '@strapi/utils';\nimport * as yup from 'yup';\n\nexport const SETTINGS_SCHEMA = yup\n  .object()\n  .shape({\n    defaultTimezone: yup.string().nullable().default(null),\n  })\n  .required()\n  .noUnknown();\n\nexport const validateSettings = validateYupSchema(SETTINGS_SCHEMA);\n","/**\n * Used to store user configurations related to releases.\n * E.g the default timezone for the release schedule.\n */\nimport type Koa from 'koa';\n\nimport type { GetSettings, UpdateSettings, Settings } from '../../../shared/contracts/settings';\nimport { getService } from '../utils';\nimport { validateSettings } from './validation/settings';\n\nconst settingsController = {\n  async find(ctx: Koa.Context) {\n    // Get settings\n    const settingsService = getService('settings', { strapi });\n    const settings = await settingsService.find();\n\n    // Response\n    ctx.body = { data: settings } satisfies GetSettings.Response;\n  },\n\n  async update(ctx: Koa.Context) {\n    // Data validation\n    const settingsBody = ctx.request.body;\n    const settings = (await validateSettings(settingsBody)) as Settings;\n\n    // Update\n    const settingsService = getService('settings', { strapi });\n    const updatedSettings = await settingsService.update({ settings });\n\n    // Response\n    ctx.body = { data: updatedSettings } satisfies UpdateSettings.Response;\n  },\n};\n\nexport default settingsController;\n","import release from './release';\nimport releaseAction from './release-action';\nimport settings from './settings';\n\nexport const controllers = {\n  release,\n  'release-action': releaseAction,\n  settings,\n};\n","export default {\n  type: 'admin',\n  routes: [\n    {\n      method: 'GET',\n      path: '/mapEntriesToReleases',\n      handler: 'release.mapEntriesToReleases',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/getByDocumentAttached',\n      handler: 'release.findByDocumentAttached',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/',\n      handler: 'release.create',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.create'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/',\n      handler: 'release.findPage',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/:id',\n      handler: 'release.findOne',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/:id',\n      handler: 'release.update',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.update'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'DELETE',\n      path: '/:id',\n      handler: 'release.delete',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.delete'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/:id/publish',\n      handler: 'release.publish',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.publish'],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n","export default {\n  type: 'admin',\n  routes: [\n    {\n      method: 'POST',\n      path: '/:releaseId/actions',\n      handler: 'release-action.create',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.create-action'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/:releaseId/actions/bulk',\n      handler: 'release-action.createMany',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.create-action'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/:releaseId/actions',\n      handler: 'release-action.findMany',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/:releaseId/actions/:actionId',\n      handler: 'release-action.update',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.update'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'DELETE',\n      path: '/:releaseId/actions/:actionId',\n      handler: 'release-action.delete',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.delete-action'],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n","export default {\n  type: 'admin',\n  routes: [\n    {\n      method: 'GET',\n      path: '/settings',\n      handler: 'settings.find',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.settings.read'],\n            },\n          },\n        ],\n      },\n    },\n\n    {\n      method: 'PUT',\n      path: '/settings',\n      handler: 'settings.update',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.settings.update'],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n","import release from './release';\nimport releaseAction from './release-action';\nimport settings from './settings';\n\nexport const routes = {\n  settings,\n  release,\n  'release-action': releaseAction,\n};\n","/* eslint-disable @typescript-eslint/no-var-requires */\nimport { register } from './register';\nimport { bootstrap } from './bootstrap';\nimport { destroy } from './destroy';\nimport { contentTypes } from './content-types';\nimport { services } from './services';\nimport { controllers } from './controllers';\nimport { routes } from './routes';\n\nconst getPlugin = () => {\n  if (strapi.ee.features.isEnabled('cms-content-releases')) {\n    return {\n      register,\n      bootstrap,\n      destroy,\n      contentTypes,\n      services,\n      controllers,\n      routes,\n    };\n  }\n\n  return {\n    // Always return register, it handles its own feature check\n    register,\n    // Always return contentTypes to avoid losing data when the feature is disabled\n    contentTypes,\n  };\n};\n\nexport default getPlugin();\n"],"names":["strapi","contentTypes","contentTypesUtils","release","isEntryValid","schema","releaseAction","error","settings","releaseValidation","scheduling","yup","releaseActions"],"mappings":"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"}
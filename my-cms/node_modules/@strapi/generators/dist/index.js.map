{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { join } from 'node:path';\nimport nodePlop from 'node-plop';\n\n// Starts the Plop CLI programmatically\nexport const runCLI = async () => {\n  const { Plop, run } = await import('plop');\n\n  Plop.prepare(\n    {\n      configPath: join(__dirname, 'plopfile.js'),\n    },\n    (env) => {\n      const argv = process.argv.slice(2); // Extract command-line arguments\n      Plop.execute(env, argv, (env, argv) => {\n        const options = {\n          ...env,\n          dest: join(process.cwd(), 'src'), // this will make the destination path to be based on the cwd when calling the wrapper\n        };\n        return run(options, argv, true); // Pass the third argument 'true' for passArgsBeforeDashes\n      });\n    }\n  );\n};\n\n// Runs a generator programmatically without prompts\nexport const generate = async <T extends Record<string, any>>(\n  generatorName: string,\n  options: T,\n  { dir = process.cwd(), plopFile = 'plopfile.js' } = {}\n) => {\n  const plop = nodePlop(join(__dirname, plopFile), {\n    destBasePath: join(dir, 'src'),\n    force: false,\n  });\n\n  const generator = plop.getGenerator(generatorName);\n  await generator.runActions(options satisfies T, {\n    onSuccess() {},\n    onFailure() {},\n    onComment() {},\n  });\n};\n"],"names":["join","env","argv","nodePlop"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO,MAAM,SAAS,YAAY;AAChC,QAAM,EAAE,MAAM,QAAQ,MAAM,OAAO,MAAM;AAEpC,OAAA;AAAA,IACH;AAAA,MACE,YAAYA,UAAAA,KAAK,WAAW,aAAa;AAAA,IAC3C;AAAA,IACA,CAAC,QAAQ;AACP,YAAM,OAAO,QAAQ,KAAK,MAAM,CAAC;AACjC,WAAK,QAAQ,KAAK,MAAM,CAACC,MAAKC,UAAS;AACrC,cAAM,UAAU;AAAA,UACd,GAAGD;AAAAA,UACH,MAAMD,UAAA,KAAK,QAAQ,OAAO,KAAK;AAAA;AAAA,QACjC;AACO,eAAA,IAAI,SAASE,OAAM,IAAI;AAAA,MAAA,CAC/B;AAAA,IAAA;AAAA,EAEL;AACF;AAGO,MAAM,WAAW,OACtB,eACA,SACA,EAAE,MAAM,QAAQ,OAAO,WAAW,cAAc,IAAI,CAAA,MACjD;AACH,QAAM,OAAOC,kBAAA,QAASH,UAAK,KAAA,WAAW,QAAQ,GAAG;AAAA,IAC/C,cAAcA,UAAAA,KAAK,KAAK,KAAK;AAAA,IAC7B,OAAO;AAAA,EAAA,CACR;AAEK,QAAA,YAAY,KAAK,aAAa,aAAa;AAC3C,QAAA,UAAU,WAAW,SAAqB;AAAA,IAC9C,YAAY;AAAA,IAAC;AAAA,IACb,YAAY;AAAA,IAAC;AAAA,IACb,YAAY;AAAA,IAAA;AAAA,EAAC,CACd;AACH;;;"}
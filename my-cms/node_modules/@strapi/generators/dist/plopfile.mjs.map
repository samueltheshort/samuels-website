{"version":3,"file":"plopfile.mjs","sources":["../src/plops/utils/validate-input.ts","../src/plops/api.ts","../src/plops/prompts/get-destination-prompts.ts","../src/plops/utils/get-file-path.ts","../src/plops/controller.ts","../src/plops/prompts/ct-names-prompts.ts","../src/plops/prompts/kind-prompts.ts","../src/plops/utils/validate-attribute-input.ts","../src/plops/prompts/get-attributes-prompts.ts","../src/plops/prompts/bootstrap-api-prompts.ts","../src/plops/content-type.ts","../src/plops/policy.ts","../src/plops/middleware.ts","../src/plops/utils/validate-file-name-input.ts","../src/plops/utils/get-formatted-date.ts","../src/plops/migration.ts","../src/plops/service.ts","../src/plopfile.ts"],"sourcesContent":["export default (input: string) => {\n  const regex = /^[A-Za-z-]+$/g;\n\n  if (!input) {\n    return 'You must provide an input';\n  }\n\n  return regex.test(input) || \"Please use only letters, '-' and no spaces\";\n};\n","import { join } from 'path';\nimport type { NodePlopAPI } from 'plop';\nimport fs from 'fs-extra';\nimport tsUtils from '@strapi/typescript-utils';\n\nimport validateInput from './utils/validate-input';\n\nexport default (plop: NodePlopAPI) => {\n  // API generator\n  plop.setGenerator('api', {\n    description: 'Generate a basic API',\n    prompts: [\n      {\n        type: 'input',\n        name: 'id',\n        message: 'API name',\n        validate: (input) => validateInput(input),\n      },\n      {\n        type: 'confirm',\n        name: 'isPluginApi',\n        message: 'Is this API for a plugin?',\n      },\n      {\n        when: (answers) => answers.isPluginApi,\n        type: 'list',\n        name: 'plugin',\n        message: 'Plugin name',\n        async choices() {\n          const pluginsPath = join(plop.getDestBasePath(), 'plugins');\n          const exists = await fs.pathExists(pluginsPath);\n          if (!exists) {\n            throw Error('Couldn\\'t find a \"plugins\" directory');\n          }\n\n          const pluginsDir = await fs.readdir(pluginsPath, { withFileTypes: true });\n          const pluginsDirContent = pluginsDir.filter((fd) => fd.isDirectory());\n\n          if (pluginsDirContent.length === 0) {\n            throw Error('The \"plugins\" directory is empty');\n          }\n\n          return pluginsDirContent;\n        },\n      },\n    ],\n    actions(answers) {\n      if (!answers) {\n        return [];\n      }\n\n      const filePath =\n        answers.isPluginApi && answers.plugin ? 'plugins/{{ plugin }}/server' : 'api/{{ id }}';\n      const currentDir = process.cwd();\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n\n      const baseActions = [\n        {\n          type: 'add',\n          path: `${filePath}/controllers/{{ id }}.${language}`,\n          templateFile: `templates/${language}/controller.${language}.hbs`,\n        },\n        {\n          type: 'add',\n          path: `${filePath}/services/{{ id }}.${language}`,\n          templateFile: `templates/${language}/service.${language}.hbs`,\n        },\n      ];\n\n      if (answers.isPluginApi) {\n        return baseActions;\n      }\n\n      return [\n        {\n          type: 'add',\n          path: `${filePath}/routes/{{ id }}.${language}`,\n          templateFile: `templates/${language}/single-route.${language}.hbs`,\n        },\n        ...baseActions,\n      ];\n    },\n  });\n};\n","import { join } from 'path';\nimport fs from 'fs-extra';\n\nimport type { PromptQuestion } from 'node-plop';\n\nexport default (\n  action: string,\n  basePath: string,\n  { rootFolder = false } = {}\n): Array<PromptQuestion> => {\n  return [\n    {\n      type: 'list',\n      name: 'destination',\n      message: `Where do you want to add this ${action}?`,\n      choices: [\n        ...(rootFolder\n          ? [\n              {\n                name: `Add ${action} to root of project`,\n                value: 'root',\n              },\n            ]\n          : [\n              {\n                name: `Add ${action} to new API`,\n                value: 'new',\n              },\n            ]),\n        { name: `Add ${action} to an existing API`, value: 'api' },\n        { name: `Add ${action} to an existing plugin`, value: 'plugin' },\n      ],\n    },\n    {\n      when: (answers) => answers.destination === 'api',\n      type: 'list',\n      message: 'Which API is this for?',\n      name: 'api',\n      async choices() {\n        const apiPath = join(basePath, 'api');\n        const exists = await fs.pathExists(apiPath);\n\n        if (!exists) {\n          throw Error('Couldn\\'t find an \"api\" directory');\n        }\n\n        const apiDir = await fs.readdir(apiPath, { withFileTypes: true });\n        const apiDirContent = apiDir.filter((fd) => fd.isDirectory());\n\n        if (apiDirContent.length === 0) {\n          throw Error('The \"api\" directory is empty');\n        }\n\n        return apiDirContent;\n      },\n    },\n    {\n      when: (answers) => answers.destination === 'plugin',\n      type: 'list',\n      message: 'Which plugin is this for?',\n      name: 'plugin',\n      async choices() {\n        const pluginsPath = join(basePath, 'plugins');\n        const exists = await fs.pathExists(pluginsPath);\n\n        if (!exists) {\n          throw Error('Couldn\\'t find a \"plugins\" directory');\n        }\n\n        const pluginsDir = await fs.readdir(pluginsPath);\n        const pluginsDirContent = pluginsDir.filter((api) =>\n          fs.lstatSync(join(pluginsPath, api)).isDirectory()\n        );\n\n        if (pluginsDirContent.length === 0) {\n          throw Error('The \"plugins\" directory is empty');\n        }\n\n        return pluginsDirContent;\n      },\n    },\n  ];\n};\n","export default (destination: string) => {\n  if (destination === 'api') {\n    return `api/{{ api }}`;\n  }\n\n  if (destination === 'plugin') {\n    return `plugins/{{ plugin }}/server`;\n  }\n\n  if (destination === 'root') {\n    return './';\n  }\n\n  return `api/{{ id }}`;\n};\n","import type { NodePlopAPI } from 'plop';\nimport tsUtils from '@strapi/typescript-utils';\n\nimport getDestinationPrompts from './prompts/get-destination-prompts';\nimport getFilePath from './utils/get-file-path';\nimport validateInput from './utils/validate-input';\n\nexport default (plop: NodePlopAPI) => {\n  // Controller generator\n  plop.setGenerator('controller', {\n    description: 'Generate a controller for an API',\n    prompts: [\n      {\n        type: 'input',\n        name: 'id',\n        message: 'Controller name',\n        validate: (input) => validateInput(input),\n      },\n      ...getDestinationPrompts('controller', plop.getDestBasePath()),\n    ],\n    actions(answers) {\n      if (!answers) {\n        return [];\n      }\n\n      const filePath = getFilePath(answers.destination);\n      const currentDir = process.cwd();\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n\n      return [\n        {\n          type: 'add',\n          path: `${filePath}/controllers/{{ id }}.${language}`,\n          templateFile: `templates/${language}/controller.${language}.hbs`,\n        },\n      ];\n    },\n  });\n};\n","import pluralize from 'pluralize';\nimport slugify from '@sindresorhus/slugify';\nimport { strings } from '@strapi/utils';\n\nimport type { PromptQuestion } from 'node-plop';\n\ninterface Answers {\n  displayName: string;\n  singularName: string;\n  pluralName: string;\n}\n\nconst questions: Array<PromptQuestion> = [\n  {\n    type: 'input',\n    name: 'displayName',\n    message: 'Content type display name',\n    validate: (input: string) => !!input,\n  },\n  {\n    type: 'input',\n    name: 'singularName',\n    message: 'Content type singular name',\n    default: (answers: Answers) => slugify(answers.displayName),\n    validate(input) {\n      if (!strings.isKebabCase(input)) {\n        return 'Value must be in kebab-case';\n      }\n\n      return true;\n    },\n  },\n  {\n    type: 'input',\n    name: 'pluralName',\n    message: 'Content type plural name',\n    default: (answers: Answers) => pluralize(answers.singularName),\n    validate(input: string, answers: Answers) {\n      if (answers.singularName === input) {\n        return 'Singular and plural names cannot be the same';\n      }\n\n      if (!strings.isKebabCase(input)) {\n        return 'Value must be in kebab-case';\n      }\n\n      return true;\n    },\n  },\n];\n\nexport default questions;\n","import type { PromptQuestion } from 'node-plop';\n\nimport validateInput from '../utils/validate-input';\n\nconst questions: Array<PromptQuestion> = [\n  {\n    type: 'list',\n    name: 'kind',\n    message: 'Please choose the model type',\n    default: 'collectionType',\n    choices: [\n      { name: 'Collection Type', value: 'collectionType' },\n      { name: 'Single Type', value: 'singleType' },\n    ],\n    validate: (input: string) => validateInput(input),\n  },\n];\n\nexport default questions;\n","export default (input: string) => {\n  const regex = /^[A-Za-z-|_]+$/g;\n\n  if (!input) {\n    return 'You must provide an input';\n  }\n\n  return regex.test(input) || \"Please use only letters, '-', '_',  and no spaces\";\n};\n","import type { DynamicPromptsFunction } from 'node-plop';\n\nimport validateAttributeInput from '../utils/validate-attribute-input';\n\ninterface AttributeAnswer {\n  attributeName: string;\n  attributeType: typeof DEFAULT_TYPES;\n  enum?: string;\n  multiple?: boolean;\n}\n\nconst DEFAULT_TYPES = [\n  // advanced types\n  'media',\n\n  // scalar types\n  'string',\n  'text',\n  'richtext',\n  'json',\n  'enumeration',\n  'password',\n  'email',\n  'integer',\n  'biginteger',\n  'float',\n  'decimal',\n  'date',\n  'time',\n  'datetime',\n  'timestamp',\n  'boolean',\n] as const;\n\nconst getAttributesPrompts: DynamicPromptsFunction = async (inquirer) => {\n  const { addAttributes } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'addAttributes',\n      message: 'Do you want to add attributes?',\n    },\n  ]);\n\n  const attributes: Array<AttributeAnswer> = [];\n\n  /**\n   * @param {import('inquirer').Inquirer} inquirer\n   * @returns {Promise<void>}\n   */\n  const createNewAttributes = async (inquirer: Parameters<DynamicPromptsFunction>[0]) => {\n    const answers = await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'attributeName',\n        message: 'Name of attribute',\n        validate: (input: string) => validateAttributeInput(input),\n      },\n      {\n        type: 'list',\n        name: 'attributeType',\n        message: 'What type of attribute',\n        pageSize: DEFAULT_TYPES.length,\n        choices: DEFAULT_TYPES.map((type) => {\n          return { name: type, value: type };\n        }),\n      },\n      {\n        when: (answers) => answers.attributeType === 'enumeration',\n        type: 'input',\n        name: 'enum',\n        message: 'Add values separated by a comma',\n      },\n      {\n        when: (answers) => answers.attributeType === 'media',\n        type: 'list',\n        name: 'multiple',\n        message: 'Choose media type',\n        choices: [\n          { name: 'Multiple', value: true },\n          { name: 'Single', value: false },\n        ],\n      },\n      {\n        type: 'confirm',\n        name: 'addAttributes',\n        message: 'Do you want to add another attribute?',\n      },\n    ]);\n\n    attributes.push(answers);\n\n    if (!answers.addAttributes) {\n      return;\n    }\n\n    await createNewAttributes(inquirer);\n  };\n\n  if (addAttributes) {\n    await createNewAttributes(inquirer);\n  } else {\n    console.warn(\n      `You won't be able to manage entries from the admin, you can still add attributes later from the content type builder.`\n    );\n  }\n\n  return attributes;\n};\n\nexport default getAttributesPrompts;\n","import type { PromptQuestion } from 'node-plop';\n\nconst questions: Array<PromptQuestion> = [\n  {\n    type: 'confirm',\n    name: 'bootstrapApi',\n    default: true,\n    message: 'Bootstrap API related files?',\n  },\n];\n\nexport default questions;\n","import { join } from 'path';\nimport type { NodePlopAPI, ActionType } from 'plop';\nimport slugify from '@sindresorhus/slugify';\nimport fs from 'fs-extra';\nimport { strings } from '@strapi/utils';\nimport tsUtils from '@strapi/typescript-utils';\n\nimport getDestinationPrompts from './prompts/get-destination-prompts';\nimport getFilePath from './utils/get-file-path';\nimport ctNamesPrompts from './prompts/ct-names-prompts';\nimport kindPrompts from './prompts/kind-prompts';\nimport getAttributesPrompts from './prompts/get-attributes-prompts';\nimport bootstrapApiPrompts from './prompts/bootstrap-api-prompts';\n\nexport default (plop: NodePlopAPI) => {\n  // Model generator\n  plop.setGenerator('content-type', {\n    description: 'Generate a content type for an API',\n    async prompts(inquirer) {\n      const config = await inquirer.prompt([...ctNamesPrompts, ...kindPrompts]);\n      // @ts-expect-error issue with deprecated inquirer.prompts attribute to fix with ugprade to inquirer\n      const attributes = await getAttributesPrompts(inquirer);\n\n      const api = await inquirer.prompt([\n        ...getDestinationPrompts('model', plop.getDestBasePath()),\n        {\n          when: (answers) => answers.destination === 'new',\n          type: 'input',\n          name: 'id',\n          default: config.singularName,\n          message: 'Name of the new API?',\n          async validate(input) {\n            if (!strings.isKebabCase(input)) {\n              return 'Value must be in kebab-case';\n            }\n\n            const apiPath = join(plop.getDestBasePath(), 'api');\n            const exists = await fs.pathExists(apiPath);\n\n            if (!exists) {\n              return true;\n            }\n\n            const apiDir = await fs.readdir(apiPath, { withFileTypes: true });\n            const apiDirContent = apiDir.filter((fd) => fd.isDirectory());\n\n            if (apiDirContent.findIndex((dir) => dir.name === input) !== -1) {\n              throw new Error('This name is already taken.');\n            }\n\n            return true;\n          },\n        },\n        ...bootstrapApiPrompts,\n      ]);\n\n      return {\n        ...config,\n        ...api,\n        attributes,\n      };\n    },\n    actions(answers) {\n      if (!answers) {\n        return [];\n      }\n\n      const attributes = answers.attributes.reduce((object: any, answer: any) => {\n        const val: any = { type: answer.attributeType };\n\n        if (answer.attributeType === 'enumeration') {\n          val.enum = answer.enum.split(',').map((item: string) => item.trim());\n        }\n\n        if (answer.attributeType === 'media') {\n          val.allowedTypes = ['images', 'files', 'videos', 'audios'];\n          val.multiple = answer.multiple;\n        }\n\n        return Object.assign(object, { [answer.attributeName]: val }, {});\n      }, {});\n\n      const filePath = getFilePath(answers.destination);\n      const currentDir = process.cwd();\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n\n      const baseActions: Array<ActionType> = [\n        {\n          type: 'add',\n          path: `${filePath}/content-types/{{ singularName }}/schema.json`,\n          templateFile: `templates/${language}/content-type.schema.json.hbs`,\n          data: {\n            collectionName: slugify(answers.pluralName, { separator: '_' }),\n          },\n        },\n      ];\n\n      if (Object.entries(attributes).length > 0) {\n        baseActions.push({\n          type: 'modify',\n          path: `${filePath}/content-types/{{ singularName }}/schema.json`,\n          transform(template: string) {\n            const parsedTemplate = JSON.parse(template);\n            parsedTemplate.attributes = attributes;\n            return JSON.stringify(parsedTemplate, null, 2);\n          },\n        });\n      }\n\n      if (answers.bootstrapApi) {\n        const { singularName } = answers;\n\n        let uid;\n        if (answers.destination === 'new') {\n          uid = `api::${answers.id}.${singularName}`;\n        } else if (answers.api) {\n          uid = `api::${answers.api}.${singularName}`;\n        } else if (answers.plugin) {\n          uid = `plugin::${answers.plugin}.${singularName}`;\n        }\n\n        baseActions.push(\n          {\n            type: 'add',\n            path: `${filePath}/controllers/{{ singularName }}.${language}`,\n            templateFile: `templates/${language}/core-controller.${language}.hbs`,\n            data: { uid },\n          },\n          {\n            type: 'add',\n            path: `${filePath}/services/{{ singularName }}.${language}`,\n            templateFile: `templates/${language}/core-service.${language}.hbs`,\n            data: { uid },\n          },\n          {\n            type: 'add',\n            path: `${filePath}/routes/{{ singularName }}.${language}`,\n            templateFile: `templates/${language}/core-router.${language}.hbs`,\n            data: { uid },\n          }\n        );\n      }\n\n      return baseActions;\n    },\n  });\n};\n","import type { NodePlopAPI } from 'plop';\nimport tsUtils from '@strapi/typescript-utils';\n\nimport getDestinationPrompts from './prompts/get-destination-prompts';\nimport validateInput from './utils/validate-input';\nimport getFilePath from './utils/get-file-path';\n\nexport default (plop: NodePlopAPI) => {\n  // Policy generator\n  plop.setGenerator('policy', {\n    description: 'Generate a policy for an API',\n    prompts: [\n      {\n        type: 'input',\n        name: 'id',\n        message: 'Policy name',\n        validate: (input) => validateInput(input),\n      },\n      ...getDestinationPrompts('policy', plop.getDestBasePath(), { rootFolder: true }),\n    ],\n    actions(answers) {\n      if (!answers) {\n        return [];\n      }\n\n      const currentDir = process.cwd();\n      const filePath = getFilePath(answers.destination);\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n\n      return [\n        {\n          type: 'add',\n          path: `${filePath}/policies/{{ id }}.${language}`,\n          templateFile: `templates/${language}/policy.${language}.hbs`,\n        },\n      ];\n    },\n  });\n};\n","import type { NodePlopAPI } from 'plop';\nimport tsUtils from '@strapi/typescript-utils';\n\nimport getDestinationPrompts from './prompts/get-destination-prompts';\nimport validateInput from './utils/validate-input';\nimport getFilePath from './utils/get-file-path';\n\nexport default (plop: NodePlopAPI) => {\n  // middleware generator\n  plop.setGenerator('middleware', {\n    description: 'Generate a middleware for an API',\n    prompts: [\n      {\n        type: 'input',\n        name: 'name',\n        message: 'Middleware name',\n        validate: (input) => validateInput(input),\n      },\n      ...getDestinationPrompts('middleware', plop.getDestBasePath(), { rootFolder: true }),\n    ],\n    actions(answers) {\n      if (!answers) {\n        return [];\n      }\n\n      const filePath = getFilePath(answers.destination);\n      const currentDir = process.cwd();\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n\n      return [\n        {\n          type: 'add',\n          path: `${filePath}/middlewares/{{ name }}.${language}`,\n          templateFile: `templates/${language}/middleware.${language}.hbs`,\n        },\n      ];\n    },\n  });\n};\n","export default (input: string) => {\n  const regex = /^[A-Za-z-_0-9]+$/g;\n\n  if (!input) {\n    return 'You must provide an input';\n  }\n\n  return regex.test(input) || \"Please use only letters and number, '-' or '_' and no spaces\";\n};\n","export default (date: Date = new Date()) => {\n  return new Date(date.getTime() - date.getTimezoneOffset() * 60000)\n    .toJSON()\n    .replace(/[-:]/g, '.')\n    .replace(/\\....Z/, '');\n};\n","import type { NodePlopAPI } from 'plop';\nimport tsUtils from '@strapi/typescript-utils';\nimport validateFileNameInput from './utils/validate-file-name-input';\nimport getFormattedDate from './utils/get-formatted-date';\n\nexport default (plop: NodePlopAPI) => {\n  // Migration generator\n  plop.setGenerator('migration', {\n    description: 'Generate a migration',\n    prompts: [\n      {\n        type: 'input',\n        name: 'name',\n        message: 'Migration name',\n        validate: (input) => validateFileNameInput(input),\n      },\n    ],\n    actions() {\n      const currentDir = process.cwd();\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n      const timestamp = getFormattedDate();\n\n      return [\n        {\n          type: 'add',\n          path: `${currentDir}/database/migrations/${timestamp}.{{ name }}.${language}`,\n          templateFile: `templates/${language}/migration.${language}.hbs`,\n        },\n      ];\n    },\n  });\n};\n","import type { NodePlopAPI } from 'plop';\nimport tsUtils from '@strapi/typescript-utils';\n\nimport getDestinationPrompts from './prompts/get-destination-prompts';\nimport getFilePath from './utils/get-file-path';\n\nexport default (plop: NodePlopAPI) => {\n  // Service generator\n  plop.setGenerator('service', {\n    description: 'Generate a service for an API',\n    prompts: [\n      {\n        type: 'input',\n        name: 'id',\n        message: 'Service name',\n      },\n      ...getDestinationPrompts('service', plop.getDestBasePath()),\n    ],\n    actions(answers) {\n      if (!answers) {\n        return [];\n      }\n\n      const filePath = getFilePath(answers?.destination);\n      const currentDir = process.cwd();\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n\n      return [\n        {\n          type: 'add',\n          path: `${filePath}/services/{{ id }}.${language}`,\n          templateFile: `templates/${language}/service.${language}.hbs`,\n        },\n      ];\n    },\n  });\n};\n","import pluralize from 'pluralize';\nimport type { NodePlopAPI } from 'plop';\n\nimport generateApi from './plops/api';\nimport generateController from './plops/controller';\nimport generateContentType from './plops/content-type';\nimport generatePolicy from './plops/policy';\nimport generateMiddleware from './plops/middleware';\nimport generateMigration from './plops/migration';\nimport generateService from './plops/service';\n\nexport default (plop: NodePlopAPI) => {\n  // Plop config\n  plop.setWelcomeMessage('Strapi Generators');\n  plop.setHelper('pluralize', (text: string) => pluralize(text));\n\n  // Generators\n  generateApi(plop);\n  generateController(plop);\n  generateContentType(plop);\n  generatePolicy(plop);\n  generateMiddleware(plop);\n  generateMigration(plop);\n  generateService(plop);\n};\n"],"names":["questions","inquirer","answers","ctNamesPrompts","kindPrompts","bootstrapApiPrompts"],"mappings":"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"}
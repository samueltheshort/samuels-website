{"version":3,"file":"index-DS-ZCPvz.js","sources":["../../admin/src/pages/EmailTemplates/utils/schema.js","../../admin/src/pages/EmailTemplates/components/EmailForm.jsx","../../admin/src/pages/EmailTemplates/components/EmailTable.jsx","../../admin/src/pages/EmailTemplates/index.jsx"],"sourcesContent":["import { translatedErrors } from '@strapi/strapi/admin';\nimport * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  options: yup\n    .object()\n    .shape({\n      from: yup\n        .object()\n        .shape({\n          name: yup.string().required({\n            id: translatedErrors.required.id,\n            defaultMessage: 'This field is required',\n          }),\n          email: yup.string().email(translatedErrors.email).required({\n            id: translatedErrors.required.id,\n            defaultMessage: 'This field is required',\n          }),\n        })\n        .required(),\n      response_email: yup.string().email(translatedErrors.email),\n      object: yup.string().required({\n        id: translatedErrors.required.id,\n        defaultMessage: 'This field is required',\n      }),\n      message: yup.string().required({\n        id: translatedErrors.required.id,\n        defaultMessage: 'This field is required',\n      }),\n    })\n    .required(translatedErrors.required.id),\n});\n\nexport default schema;\n","import React from 'react';\n\nimport { Button, Grid, Modal, Breadcrumbs, Crumb, VisuallyHidden } from '@strapi/design-system';\nimport { Form, InputRenderer } from '@strapi/strapi/admin';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../utils';\nimport schema from '../utils/schema';\n\nconst EmailForm = ({ template = {}, onToggle, open, onSubmit }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Modal.Root open={open} onOpenChange={onToggle}>\n      <Modal.Content>\n        <Modal.Header>\n          <Breadcrumbs\n            label={`${formatMessage({\n              id: getTrad('PopUpForm.header.edit.email-templates'),\n              defaultMessage: 'Edit email template',\n            })}, ${\n              template.display\n                ? formatMessage({\n                    id: getTrad(template.display),\n                    defaultMessage: template.display,\n                  })\n                : ''\n            }`}\n          >\n            <Crumb>\n              {formatMessage({\n                id: getTrad('PopUpForm.header.edit.email-templates'),\n                defaultMessage: 'Edit email template',\n              })}\n            </Crumb>\n            <Crumb isCurrent>\n              {template.display\n                ? formatMessage({ id: getTrad(template.display), defaultMessage: template.display })\n                : ''}\n            </Crumb>\n          </Breadcrumbs>\n          <VisuallyHidden>\n            <Modal.Title>\n              {`${formatMessage({\n                id: getTrad('PopUpForm.header.edit.email-templates'),\n                defaultMessage: 'Edit email template',\n              })}, ${template.display ? formatMessage({ id: getTrad(template.display), defaultMessage: template.display }) : ''}`}\n            </Modal.Title>\n          </VisuallyHidden>\n        </Modal.Header>\n        <Form onSubmit={onSubmit} initialValues={template} validationSchema={schema}>\n          {({ isSubmitting }) => {\n            return (\n              <>\n                <Modal.Body>\n                  <Grid.Root gap={5}>\n                    {[\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.from.name.label'),\n                          defaultMessage: 'Shipper name',\n                        }),\n                        name: 'options.from.name',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.from.email.label'),\n                          defaultMessage: 'Shipper email',\n                        }),\n                        name: 'options.from.email',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.response_email.label'),\n                          defaultMessage: 'Response email',\n                        }),\n                        name: 'options.response_email',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.object.label'),\n                          defaultMessage: 'Subject',\n                        }),\n                        name: 'options.object',\n                        size: 6,\n                        type: 'string',\n                      },\n                      {\n                        label: formatMessage({\n                          id: getTrad('PopUpForm.Email.options.message.label'),\n                          defaultMessage: 'Message',\n                        }),\n                        name: 'options.message',\n                        size: 12,\n                        type: 'text',\n                      },\n                    ].map(({ size, ...field }) => (\n                      <Grid.Item\n                        key={field.name}\n                        col={size}\n                        direction=\"column\"\n                        alignItems=\"stretch\"\n                      >\n                        <InputRenderer {...field} />\n                      </Grid.Item>\n                    ))}\n                  </Grid.Root>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Modal.Close>\n                    <Button variant=\"tertiary\">Cancel</Button>\n                  </Modal.Close>\n                  <Button loading={isSubmitting} type=\"submit\">\n                    Finish\n                  </Button>\n                </Modal.Footer>\n              </>\n            );\n          }}\n        </Form>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\nEmailForm.defaultProps = {\n  template: {},\n};\n\nEmailForm.propTypes = {\n  template: PropTypes.shape({\n    display: PropTypes.string,\n    icon: PropTypes.string,\n    options: PropTypes.shape({\n      from: PropTypes.shape({\n        name: PropTypes.string,\n        email: PropTypes.string,\n      }),\n      message: PropTypes.string,\n      object: PropTypes.string,\n      response_email: PropTypes.string,\n    }),\n  }),\n  open: PropTypes.bool.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n};\n\nexport default EmailForm;\n","import React from 'react';\n\nimport {\n  IconButton,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n  Box,\n} from '@strapi/design-system';\nimport { Check, Pencil, ArrowClockwise as Refresh } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../../utils';\n\nconst EmailTable = ({ canUpdate, onEditClick }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Table colCount={3} rowCount={3}>\n      <Thead>\n        <Tr>\n          <Th width=\"1%\">\n            <VisuallyHidden>\n              {formatMessage({\n                id: getTrad('Email.template.table.icon.label'),\n                defaultMessage: 'icon',\n              })}\n            </VisuallyHidden>\n          </Th>\n          <Th>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {formatMessage({\n                id: getTrad('Email.template.table.name.label'),\n                defaultMessage: 'name',\n              })}\n            </Typography>\n          </Th>\n          <Th width=\"1%\">\n            <VisuallyHidden>\n              {formatMessage({\n                id: getTrad('Email.template.table.action.label'),\n                defaultMessage: 'action',\n              })}\n            </VisuallyHidden>\n          </Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        <Tr cursor=\"pointer\" onClick={() => onEditClick('reset_password')}>\n          <Td>\n            <Box width=\"3.2rem\" height=\"3.2rem\" padding=\"0.8rem\">\n              <Refresh\n                aria-label={formatMessage({\n                  id: 'global.reset-password',\n                  defaultMessage: 'Reset password',\n                })}\n              />\n            </Box>\n          </Td>\n          <Td>\n            <Typography>\n              {formatMessage({\n                id: 'global.reset-password',\n                defaultMessage: 'Reset password',\n              })}\n            </Typography>\n          </Td>\n          <Td onClick={(e) => e.stopPropagation()}>\n            <IconButton\n              onClick={() => onEditClick('reset_password')}\n              label={formatMessage({\n                id: getTrad('Email.template.form.edit.label'),\n                defaultMessage: 'Edit a template',\n              })}\n              variant=\"ghost\"\n              disabled={!canUpdate}\n            >\n              <Pencil />\n            </IconButton>\n          </Td>\n        </Tr>\n        <Tr cursor=\"pointer\" onClick={() => onEditClick('email_confirmation')}>\n          <Td>\n            <Box width=\"3.2rem\" height=\"3.2rem\" padding=\"0.8rem\">\n              <Check\n                aria-label={formatMessage({\n                  id: getTrad('Email.template.email_confirmation'),\n                  defaultMessage: 'Email address confirmation',\n                })}\n              />\n            </Box>\n          </Td>\n          <Td>\n            <Typography>\n              {formatMessage({\n                id: getTrad('Email.template.email_confirmation'),\n                defaultMessage: 'Email address confirmation',\n              })}\n            </Typography>\n          </Td>\n          <Td onClick={(e) => e.stopPropagation()}>\n            <IconButton\n              onClick={() => onEditClick('email_confirmation')}\n              label={formatMessage({\n                id: getTrad('Email.template.form.edit.label'),\n                defaultMessage: 'Edit a template',\n              })}\n              variant=\"ghost\"\n              disabled={!canUpdate}\n            >\n              <Pencil />\n            </IconButton>\n          </Td>\n        </Tr>\n      </Tbody>\n    </Table>\n  );\n};\n\nEmailTable.propTypes = {\n  canUpdate: PropTypes.bool.isRequired,\n  onEditClick: PropTypes.func.isRequired,\n};\n\nexport default EmailTable;\n","import * as React from 'react';\n\nimport { useTracking } from '@strapi/admin/strapi-admin';\nimport { useNotifyAT } from '@strapi/design-system';\nimport {\n  Page,\n  useAPIErrorHandler,\n  useNotification,\n  useFetchClient,\n  useRBAC,\n  Layouts,\n} from '@strapi/strapi/admin';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\n\nimport { PERMISSIONS } from '../../constants';\nimport { getTrad } from '../../utils';\n\nimport EmailForm from './components/EmailForm';\nimport EmailTable from './components/EmailTable';\n\nconst ProtectedEmailTemplatesPage = () => (\n  <Page.Protect permissions={PERMISSIONS.readEmailTemplates}>\n    <EmailTemplatesPage />\n  </Page.Protect>\n);\nconst EmailTemplatesPage = () => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { notifyStatus } = useNotifyAT();\n  const { toggleNotification } = useNotification();\n  const queryClient = useQueryClient();\n  const { get, put } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const [templateToEdit, setTemplateToEdit] = React.useState(null);\n\n  const {\n    isLoading: isLoadingForPermissions,\n    allowedActions: { canUpdate },\n  } = useRBAC({ update: PERMISSIONS.updateEmailTemplates });\n\n  const { isLoading: isLoadingData, data } = useQuery(\n    ['users-permissions', 'email-templates'],\n    async () => {\n      const { data } = await get('/users-permissions/email-templates');\n\n      return data;\n    },\n    {\n      onSuccess() {\n        notifyStatus(\n          formatMessage({\n            id: getTrad('Email.template.data.loaded'),\n            defaultMessage: 'Email templates has been loaded',\n          })\n        );\n      },\n      onError(error) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(error),\n        });\n      },\n    }\n  );\n\n  const isLoading = isLoadingForPermissions || isLoadingData;\n\n  const handleToggle = () => {\n    setIsModalOpen((prev) => !prev);\n  };\n\n  const handleEditClick = (template) => {\n    setTemplateToEdit(template);\n    handleToggle();\n  };\n\n  const submitMutation = useMutation(\n    (body) => put('/users-permissions/email-templates', { 'email-templates': body }),\n    {\n      async onSuccess() {\n        await queryClient.invalidateQueries(['users-permissions', 'email-templates']);\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\n        });\n\n        trackUsage('didEditEmailTemplates');\n\n        handleToggle();\n      },\n      onError(error) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(error),\n        });\n      },\n      refetchActive: true,\n    }\n  );\n\n  const handleSubmit = (body) => {\n    trackUsage('willEditEmailTemplates');\n\n    const editedTemplates = { ...data, [templateToEdit]: body };\n    submitMutation.mutate(editedTemplates);\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main aria-busy={submitMutation.isLoading}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: formatMessage({\n              id: getTrad('HeaderNav.link.emailTemplates'),\n              defaultMessage: 'Email templates',\n            }),\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        title={formatMessage({\n          id: getTrad('HeaderNav.link.emailTemplates'),\n          defaultMessage: 'Email templates',\n        })}\n      />\n      <Layouts.Content>\n        <EmailTable onEditClick={handleEditClick} canUpdate={canUpdate} />\n        <EmailForm\n          template={data[templateToEdit]}\n          onToggle={handleToggle}\n          open={isModalOpen}\n          onSubmit={handleSubmit}\n        />\n      </Layouts.Content>\n    </Page.Main>\n  );\n};\n\nexport { ProtectedEmailTemplatesPage, EmailTemplatesPage };\n"],"names":["yup","translatedErrors","useIntl","jsx","Modal","jsxs","Breadcrumbs","getTrad","Crumb","VisuallyHidden","Form","Fragment","Grid","InputRenderer","Button","PropTypes","Table","Thead","Tr","Th","Typography","Tbody","Td","Box","Refresh","IconButton","Pencil","Check","Page","PERMISSIONS","useTracking","useNotifyAT","useNotification","useQueryClient","useFetchClient","useAPIErrorHandler","React","useRBAC","useQuery","data","useMutation","Layouts"],"mappings":"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"}
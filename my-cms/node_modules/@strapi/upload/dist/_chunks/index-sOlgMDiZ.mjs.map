{"version":3,"file":"index-sOlgMDiZ.mjs","sources":["../../server/src/middlewares/upload.ts","../../server/src/register.ts","../../server/src/utils/index.ts","../../server/src/constants.ts","../../server/src/bootstrap.ts","../../server/src/content-types/file.ts","../../server/src/content-types/folder.ts","../../server/src/content-types/index.ts","../../server/src/services/provider.ts","../../server/src/services/upload.ts","../../server/src/services/image-manipulation.ts","../../server/src/services/folder.ts","../../server/src/services/file.ts","../../server/src/utils/cron.ts","../../server/src/services/weekly-metrics.ts","../../server/src/services/metrics.ts","../../server/src/services/api-upload-folder.ts","../../server/src/services/extensions/utils.ts","../../server/src/services/extensions/index.ts","../../server/src/services/index.ts","../../server/src/routes/admin.ts","../../server/src/routes/content-api.ts","../../server/src/routes/view-configuration.ts","../../server/src/routes/index.ts","../../server/src/config.ts","../../server/src/controllers/utils/find-entity-and-check-permissions.ts","../../server/src/controllers/admin-file.ts","../../server/src/controllers/validation/admin/utils.ts","../../server/src/controllers/utils/folders.ts","../../server/src/controllers/validation/admin/folder.ts","../../server/src/controllers/admin-folder.ts","../../server/src/controllers/validation/admin/folder-file.ts","../../server/src/controllers/admin-folder-file.ts","../../server/src/controllers/validation/admin/settings.ts","../../server/src/controllers/admin-settings.ts","../../server/src/controllers/validation/admin/upload.ts","../../server/src/controllers/admin-upload.ts","../../server/src/controllers/validation/content-api/upload.ts","../../server/src/controllers/content-api.ts","../../server/src/controllers/validation/admin/configureView.ts","../../server/src/controllers/view-configuration.ts","../../server/src/controllers/index.ts","../../server/src/index.ts"],"sourcesContent":["import range from 'koa-range';\nimport koaStatic from 'koa-static';\n\nimport type { Core } from '@strapi/types';\n\n/**\n * Programmatic upload middleware. We do not want to expose it in the plugin\n */\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  strapi.server.app.on('error', (err) => {\n    if (err.code === 'EPIPE') {\n      // when serving audio or video the browsers sometimes close the connection to go to range requests instead.\n      // This causes koa to emit a write EPIPE error. We can ignore it.\n      // Right now this ignores it globally and we cannot do much more because it is how koa handles it.\n      return;\n    }\n\n    strapi.server.app.onerror(err);\n  });\n\n  const localServerConfig = strapi.config.get('plugin::upload.providerOptions.localServer', {});\n\n  strapi.server.routes([\n    {\n      method: 'GET',\n      path: '/uploads/(.*)',\n      handler: [range, koaStatic(strapi.dirs.static.public, { defer: true, ...localServerConfig })],\n      config: { auth: false },\n    },\n  ]);\n};\n","import _ from 'lodash';\n\nimport { errors, file } from '@strapi/utils';\nimport type { Core } from '@strapi/types';\n\nimport registerUploadMiddleware from './middlewares/upload';\nimport spec from '../../documentation/content-api.json';\nimport type { Config, File, InputFile } from './types';\n\nconst { PayloadTooLargeError } = errors;\nconst { bytesToHumanReadable, kbytesToBytes } = file;\n\n/**\n * Register upload plugin\n */\nexport async function register({ strapi }: { strapi: Core.Strapi }) {\n  strapi.plugin('upload').provider = createProvider(strapi.config.get<Config>('plugin::upload'));\n\n  await registerUploadMiddleware({ strapi });\n\n  if (strapi.plugin('graphql')) {\n    const { installGraphqlExtension } = await import('./graphql.js');\n    installGraphqlExtension({ strapi });\n  }\n\n  if (strapi.plugin('documentation')) {\n    strapi\n      .plugin('documentation')\n      .service('override')\n      .registerOverride(spec, {\n        pluginOrigin: 'upload',\n        excludeFromGeneration: ['upload'],\n      });\n  }\n}\n\nconst createProvider = (config: Config) => {\n  const { providerOptions, actionOptions = {} } = config;\n\n  const providerName = _.toLower(config.provider);\n  let provider;\n\n  let modulePath;\n  try {\n    modulePath = require.resolve(`@strapi/provider-upload-${providerName}`);\n  } catch (error) {\n    if (\n      typeof error === 'object' &&\n      error !== null &&\n      'code' in error &&\n      error.code === 'MODULE_NOT_FOUND'\n    ) {\n      modulePath = providerName;\n    } else {\n      throw error;\n    }\n  }\n\n  try {\n    provider = require(modulePath);\n  } catch (err) {\n    const newError = new Error(`Could not load upload provider \"${providerName}\".`);\n\n    if (err instanceof Error) {\n      newError.stack = err.stack;\n    }\n\n    throw newError;\n  }\n\n  const providerInstance = provider.init(providerOptions);\n\n  if (!providerInstance.delete) {\n    throw new Error(`The upload provider \"${providerName}\" doesn't implement the delete method.`);\n  }\n\n  if (!providerInstance.upload && !providerInstance.uploadStream) {\n    throw new Error(\n      `The upload provider \"${providerName}\" doesn't implement the uploadStream nor the upload method.`\n    );\n  }\n\n  if (!providerInstance.uploadStream) {\n    process.emitWarning(\n      `The upload provider \"${providerName}\" doesn't implement the uploadStream function. Strapi will fallback on the upload method. Some performance issues may occur.`\n    );\n  }\n\n  const wrappedProvider = _.mapValues(providerInstance, (method, methodName) => {\n    return async (file: File, options = actionOptions[methodName]) =>\n      providerInstance[methodName](file, options);\n  });\n\n  return Object.assign(Object.create(baseProvider), wrappedProvider);\n};\n\nconst baseProvider = {\n  extend(obj: unknown) {\n    Object.assign(this, obj);\n  },\n  checkFileSize(file: InputFile, { sizeLimit }: { sizeLimit: number }) {\n    if (sizeLimit && kbytesToBytes(file.size) > sizeLimit) {\n      throw new PayloadTooLargeError(\n        `${file.originalFilename} exceeds size limit of ${bytesToHumanReadable(sizeLimit)}.`\n      );\n    }\n  },\n  getSignedUrl(file: File) {\n    return file;\n  },\n  isPrivate() {\n    return false;\n  },\n};\n","import type upload from '../services/upload';\nimport type imageManipulation from '../services/image-manipulation';\nimport type apiUploadFolder from '../services/api-upload-folder';\nimport type provider from '../services/provider';\nimport type folder from '../services/folder';\nimport type file from '../services/file';\nimport type weeklyMetrics from '../services/weekly-metrics';\nimport type metrics from '../services/metrics';\nimport type extensions from '../services/extensions';\n\ntype Services = {\n  upload: ReturnType<typeof upload>;\n  'image-manipulation': typeof imageManipulation;\n  provider: ReturnType<typeof provider>;\n  folder: typeof folder;\n  file: typeof file;\n  weeklyMetrics: ReturnType<typeof weeklyMetrics>;\n  metrics: ReturnType<typeof metrics>;\n  'api-upload-folder': typeof apiUploadFolder;\n  extensions: typeof extensions;\n};\n\nexport const getService = <TName extends keyof Services>(name: TName): Services[TName] => {\n  return strapi.plugin('upload').service<Services[TName]>(name);\n};\n","const ACTIONS = {\n  read: 'plugin::upload.read',\n  readSettings: 'plugin::upload.settings.read',\n  create: 'plugin::upload.assets.create',\n  update: 'plugin::upload.assets.update',\n  download: 'plugin::upload.assets.download',\n  copyLink: 'plugin::upload.assets.copy-link',\n  configureView: 'plugin::upload.configure-view',\n};\n\nconst ALLOWED_SORT_STRINGS = [\n  'createdAt:DESC',\n  'createdAt:ASC',\n  'name:ASC',\n  'name:DESC',\n  'updatedAt:DESC',\n  'updatedAt:ASC',\n];\n\nconst ALLOWED_WEBHOOK_EVENTS = {\n  MEDIA_CREATE: 'media.create',\n  MEDIA_UPDATE: 'media.update',\n  MEDIA_DELETE: 'media.delete',\n};\n\nconst FOLDER_MODEL_UID = 'plugin::upload.folder';\nconst FILE_MODEL_UID = 'plugin::upload.file';\nconst API_UPLOAD_FOLDER_BASE_NAME = 'API Uploads';\n\nexport {\n  ACTIONS,\n  FOLDER_MODEL_UID,\n  FILE_MODEL_UID,\n  API_UPLOAD_FOLDER_BASE_NAME,\n  ALLOWED_SORT_STRINGS,\n  ALLOWED_WEBHOOK_EVENTS,\n};\n","import type { Core } from '@strapi/types';\n\nimport { getService } from './utils';\nimport { ALLOWED_SORT_STRINGS, ALLOWED_WEBHOOK_EVENTS } from './constants';\n\nexport async function bootstrap({ strapi }: { strapi: Core.Strapi }) {\n  const defaultConfig = {\n    settings: {\n      sizeOptimization: true,\n      responsiveDimensions: true,\n      autoOrientation: false,\n    },\n    view_configuration: {\n      pageSize: 10,\n      sort: ALLOWED_SORT_STRINGS[0],\n    },\n  };\n\n  for (const [key, defaultValue] of Object.entries(defaultConfig)) {\n    // set plugin store\n    const configurator = strapi.store!({ type: 'plugin', name: 'upload', key });\n\n    const config = await configurator.get({});\n    if (\n      config &&\n      Object.keys(defaultValue).every((key) => Object.prototype.hasOwnProperty.call(config, key))\n    ) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    // if the config does not exist or does not have all the required keys\n    // set from the defaultValue ensuring all required settings are present\n    await configurator.set({\n      value: Object.assign(defaultValue, config || {}),\n    });\n  }\n\n  await registerPermissionActions();\n  await registerWebhookEvents();\n\n  await getService('weeklyMetrics').registerCron();\n  getService('metrics').sendUploadPluginMetrics();\n\n  getService('extensions').signFileUrlsOnDocumentService();\n}\n\nconst registerWebhookEvents = async () =>\n  Object.entries(ALLOWED_WEBHOOK_EVENTS).forEach(([key, value]) => {\n    strapi.get('webhookStore').addAllowedEvent(key, value);\n  });\n\nconst registerPermissionActions = async () => {\n  const actions = [\n    {\n      section: 'plugins',\n      displayName: 'Access the Media Library',\n      uid: 'read',\n      pluginName: 'upload',\n    },\n    {\n      section: 'plugins',\n      displayName: 'Create (upload)',\n      uid: 'assets.create',\n      subCategory: 'assets',\n      pluginName: 'upload',\n    },\n    {\n      section: 'plugins',\n      displayName: 'Update (crop, details, replace) + delete',\n      uid: 'assets.update',\n      subCategory: 'assets',\n      pluginName: 'upload',\n    },\n    {\n      section: 'plugins',\n      displayName: 'Download',\n      uid: 'assets.download',\n      subCategory: 'assets',\n      pluginName: 'upload',\n    },\n    {\n      section: 'plugins',\n      displayName: 'Copy link',\n      uid: 'assets.copy-link',\n      subCategory: 'assets',\n      pluginName: 'upload',\n    },\n    {\n      section: 'plugins',\n      displayName: 'Configure view',\n      uid: 'configure-view',\n      pluginName: 'upload',\n    },\n    {\n      section: 'settings',\n      displayName: 'Access the Media Library settings page',\n      uid: 'settings.read',\n      category: 'media library',\n      pluginName: 'upload',\n    },\n  ];\n\n  await strapi.service('admin::permission').actionProvider.registerMany(actions);\n};\n","import type { Struct } from '@strapi/types';\n\nimport { FOLDER_MODEL_UID } from '../constants';\n\nexport default {\n  schema: {\n    collectionName: 'files',\n    info: {\n      singularName: 'file',\n      pluralName: 'files',\n      displayName: 'File',\n      description: '',\n    },\n    options: {},\n    pluginOptions: {\n      'content-manager': {\n        visible: false,\n      },\n      'content-type-builder': {\n        visible: false,\n      },\n    },\n    attributes: {\n      name: {\n        type: 'string',\n        configurable: false,\n        required: true,\n      },\n      alternativeText: {\n        type: 'string',\n        configurable: false,\n      },\n      caption: {\n        type: 'string',\n        configurable: false,\n      },\n      width: {\n        type: 'integer',\n        configurable: false,\n      },\n      height: {\n        type: 'integer',\n        configurable: false,\n      },\n      formats: {\n        type: 'json',\n        configurable: false,\n      },\n      hash: {\n        type: 'string',\n        configurable: false,\n        required: true,\n      },\n      ext: {\n        type: 'string',\n        configurable: false,\n      },\n      mime: {\n        type: 'string',\n        configurable: false,\n        required: true,\n      },\n      size: {\n        type: 'decimal',\n        configurable: false,\n        required: true,\n      },\n      url: {\n        type: 'string',\n        configurable: false,\n        required: true,\n      },\n      previewUrl: {\n        type: 'string',\n        configurable: false,\n      },\n      provider: {\n        type: 'string',\n        configurable: false,\n        required: true,\n      },\n      provider_metadata: {\n        type: 'json',\n        configurable: false,\n      },\n      related: {\n        type: 'relation',\n        relation: 'morphToMany',\n        configurable: false,\n      },\n      folder: {\n        type: 'relation',\n        relation: 'manyToOne',\n        target: FOLDER_MODEL_UID,\n        inversedBy: 'files',\n        private: true,\n      },\n      folderPath: {\n        type: 'string',\n        minLength: 1,\n        required: true,\n        private: true,\n        searchable: false,\n      },\n    },\n    // experimental feature:\n    indexes: [\n      {\n        name: 'upload_files_folder_path_index',\n        columns: ['folder_path'],\n        type: null,\n      },\n      {\n        name: `upload_files_created_at_index`,\n        columns: ['created_at'],\n        type: null,\n      },\n      {\n        name: `upload_files_updated_at_index`,\n        columns: ['updated_at'],\n        type: null,\n      },\n      {\n        name: `upload_files_name_index`,\n        columns: ['name'],\n        type: null,\n      },\n      {\n        name: `upload_files_size_index`,\n        columns: ['size'],\n        type: null,\n      },\n      {\n        name: `upload_files_ext_index`,\n        columns: ['ext'],\n        type: null,\n      },\n    ],\n  } satisfies Partial<Struct.CollectionTypeSchema>,\n};\n","import type { Struct } from '@strapi/types';\n\nimport { FOLDER_MODEL_UID, FILE_MODEL_UID } from '../constants';\n\nexport default {\n  schema: {\n    collectionName: 'upload_folders',\n    info: {\n      singularName: 'folder',\n      pluralName: 'folders',\n      displayName: 'Folder',\n    },\n    options: {},\n    pluginOptions: {\n      'content-manager': {\n        visible: false,\n      },\n      'content-type-builder': {\n        visible: false,\n      },\n    },\n    attributes: {\n      name: {\n        type: 'string',\n        minLength: 1,\n        required: true,\n      },\n      pathId: {\n        type: 'integer',\n        unique: true,\n        required: true,\n      },\n      parent: {\n        type: 'relation',\n        relation: 'manyToOne',\n        target: FOLDER_MODEL_UID,\n        inversedBy: 'children',\n      },\n      children: {\n        type: 'relation',\n        relation: 'oneToMany',\n        target: FOLDER_MODEL_UID,\n        mappedBy: 'parent',\n      },\n      files: {\n        type: 'relation',\n        relation: 'oneToMany',\n        target: FILE_MODEL_UID,\n        mappedBy: 'folder',\n      },\n      path: {\n        type: 'string',\n        minLength: 1,\n        required: true,\n      },\n    },\n    // experimental feature:\n    indexes: [\n      {\n        name: 'upload_folders_path_id_index',\n        columns: ['path_id'],\n        type: 'unique',\n      },\n      {\n        name: 'upload_folders_path_index',\n        columns: ['path'],\n        type: 'unique',\n      },\n    ],\n  } satisfies Partial<Struct.CollectionTypeSchema>,\n};\n","import file from './file';\nimport folder from './folder';\n\nexport const contentTypes = {\n  file,\n  folder,\n};\n","import { isFunction } from 'lodash/fp';\nimport { file as fileUtils } from '@strapi/utils';\nimport type { Core } from '@strapi/types';\n\nimport { Config, UploadableFile } from '../types';\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n  async checkFileSize(file: UploadableFile) {\n    const { sizeLimit } = strapi.config.get<Config>('plugin::upload');\n    await strapi.plugin('upload').provider.checkFileSize(file, { sizeLimit });\n  },\n\n  async upload(file: UploadableFile) {\n    if (isFunction(strapi.plugin('upload').provider.uploadStream)) {\n      file.stream = file.getStream();\n      await strapi.plugin('upload').provider.uploadStream(file);\n\n      delete file.stream;\n\n      if ('filepath' in file) {\n        delete file.filepath;\n      }\n    } else {\n      file.buffer = await fileUtils.streamToBuffer(file.getStream());\n      await strapi.plugin('upload').provider.upload(file);\n\n      delete file.buffer;\n\n      if ('filepath' in file) {\n        delete file.filepath;\n      }\n    }\n  },\n});\n","import os from 'os';\nimport path from 'path';\nimport crypto from 'crypto';\nimport fs from 'fs';\nimport fse from 'fs-extra';\nimport _ from 'lodash';\nimport { extension } from 'mime-types';\nimport {\n  sanitize,\n  strings,\n  contentTypes as contentTypesUtils,\n  errors,\n  file as fileUtils,\n} from '@strapi/utils';\n\nimport type { Core, UID } from '@strapi/types';\n\nimport { FILE_MODEL_UID, ALLOWED_WEBHOOK_EVENTS } from '../constants';\nimport { getService } from '../utils';\n\nimport type { Config, File, InputFile, UploadableFile, FileInfo } from '../types';\nimport type { ViewConfiguration } from '../controllers/validation/admin/configureView';\nimport type { Settings } from '../controllers/validation/admin/settings';\n\ntype User = {\n  id: string | number;\n};\n\ntype ID = string | number;\n\ntype CommonOptions = {\n  user?: User;\n};\n\ntype Metas = {\n  refId?: ID;\n  ref?: string;\n  field?: string;\n  path?: string;\n  tmpWorkingDirectory?: string;\n};\n\nconst { UPDATED_BY_ATTRIBUTE, CREATED_BY_ATTRIBUTE } = contentTypesUtils.constants;\nconst { MEDIA_CREATE, MEDIA_UPDATE, MEDIA_DELETE } = ALLOWED_WEBHOOK_EVENTS;\n\nconst { ApplicationError, NotFoundError } = errors;\nconst { bytesToKbytes } = fileUtils;\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const randomSuffix = () => crypto.randomBytes(5).toString('hex');\n\n  const generateFileName = (name: string) => {\n    const baseName = strings.nameToSlug(name, { separator: '_', lowercase: false });\n\n    return `${baseName}_${randomSuffix()}`;\n  };\n\n  const sendMediaMetrics = (data: Pick<File, 'caption' | 'alternativeText'>) => {\n    if (_.has(data, 'caption') && !_.isEmpty(data.caption)) {\n      strapi.telemetry.send('didSaveMediaWithCaption');\n    }\n\n    if (_.has(data, 'alternativeText') && !_.isEmpty(data.alternativeText)) {\n      strapi.telemetry.send('didSaveMediaWithAlternativeText');\n    }\n  };\n\n  const createAndAssignTmpWorkingDirectoryToFiles = async (\n    files: InputFile | InputFile[]\n  ): Promise<string> => {\n    const tmpWorkingDirectory = await fse.mkdtemp(path.join(os.tmpdir(), 'strapi-upload-'));\n\n    if (Array.isArray(files)) {\n      files.forEach((file) => {\n        file.tmpWorkingDirectory = tmpWorkingDirectory;\n      });\n    } else {\n      files.tmpWorkingDirectory = tmpWorkingDirectory;\n    }\n\n    return tmpWorkingDirectory;\n  };\n\n  function filenameReservedRegex() {\n    // eslint-disable-next-line no-control-regex\n    return /[<>:\"/\\\\|?*\\u0000-\\u001F]/g;\n  }\n\n  function windowsReservedNameRegex() {\n    return /^(con|prn|aux|nul|com\\d|lpt\\d)$/i;\n  }\n\n  /**\n   * Copied from https://github.com/sindresorhus/valid-filename package\n   */\n  function isValidFilename(string: string) {\n    if (!string || string.length > 255) {\n      return false;\n    }\n    if (filenameReservedRegex().test(string) || windowsReservedNameRegex().test(string)) {\n      return false;\n    }\n    if (string === '.' || string === '..') {\n      return false;\n    }\n    return true;\n  }\n\n  async function emitEvent(event: string, data: Record<string, any>) {\n    const modelDef = strapi.getModel(FILE_MODEL_UID);\n    const sanitizedData = await sanitize.sanitizers.defaultSanitizeOutput(\n      {\n        schema: modelDef,\n        getModel(uid: string) {\n          return strapi.getModel(uid as UID.Schema);\n        },\n      },\n      data\n    );\n\n    strapi.eventHub.emit(event, { media: sanitizedData });\n  }\n\n  async function formatFileInfo(\n    { filename, type, size }: { filename: string; type: string; size: number },\n    fileInfo: Partial<FileInfo> = {},\n    metas: {\n      refId?: ID;\n      ref?: string;\n      field?: string;\n      path?: string;\n      tmpWorkingDirectory?: string;\n    } = {}\n  ): Promise<Omit<UploadableFile, 'getStream'>> {\n    const fileService = getService('file');\n\n    if (!isValidFilename(filename)) {\n      throw new ApplicationError('File name contains invalid characters');\n    }\n\n    let ext = path.extname(filename);\n    if (!ext) {\n      ext = `.${extension(type)}`;\n    }\n    const usedName = (fileInfo.name || filename).normalize();\n    const basename = path.basename(usedName, ext);\n\n    // Prevent null characters in file name\n    if (!isValidFilename(filename)) {\n      throw new ApplicationError('File name contains invalid characters');\n    }\n\n    const entity: Omit<UploadableFile, 'getStream'> = {\n      name: usedName,\n      alternativeText: fileInfo.alternativeText,\n      caption: fileInfo.caption,\n      folder: fileInfo.folder,\n      folderPath: await fileService.getFolderPath(fileInfo.folder),\n      hash: generateFileName(basename),\n      ext,\n      mime: type,\n      size: bytesToKbytes(size),\n      sizeInBytes: size,\n    };\n\n    const { refId, ref, field } = metas;\n\n    if (refId && ref && field) {\n      entity.related = [\n        {\n          id: refId,\n          __type: ref,\n          __pivot: { field },\n        },\n      ];\n    }\n\n    if (metas.path) {\n      entity.path = metas.path;\n    }\n\n    if (metas.tmpWorkingDirectory) {\n      entity.tmpWorkingDirectory = metas.tmpWorkingDirectory;\n    }\n\n    return entity;\n  }\n\n  async function enhanceAndValidateFile(\n    file: InputFile,\n    fileInfo: FileInfo,\n    metas?: Metas\n  ): Promise<UploadableFile> {\n    const currentFile = (await formatFileInfo(\n      {\n        filename: file.originalFilename ?? 'unamed',\n        type: file.mimetype ?? 'application/octet-stream',\n        size: file.size,\n      },\n      fileInfo,\n      {\n        ...metas,\n        tmpWorkingDirectory: file.tmpWorkingDirectory,\n      }\n    )) as UploadableFile;\n\n    currentFile.filepath = file.filepath;\n    currentFile.getStream = () => fs.createReadStream(file.filepath);\n\n    const { optimize, isImage, isFaultyImage, isOptimizableImage } = strapi\n      .plugin('upload')\n      .service('image-manipulation');\n\n    if (await isImage(currentFile)) {\n      if (await isFaultyImage(currentFile)) {\n        throw new ApplicationError('File is not a valid image');\n      }\n      if (await isOptimizableImage(currentFile)) {\n        return optimize(currentFile);\n      }\n    }\n\n    return currentFile;\n  }\n\n  async function upload(\n    {\n      data,\n      files,\n    }: {\n      data: Record<string, unknown>;\n      files: InputFile | InputFile[];\n    },\n    opts?: CommonOptions\n  ) {\n    const { user } = opts ?? {};\n    // create temporary folder to store files for stream manipulation\n    const tmpWorkingDirectory = await createAndAssignTmpWorkingDirectoryToFiles(files);\n\n    let uploadedFiles: any[] = [];\n\n    try {\n      const { fileInfo, ...metas } = data;\n\n      const fileArray = Array.isArray(files) ? files : [files];\n      const fileInfoArray = Array.isArray(fileInfo) ? fileInfo : [fileInfo];\n\n      const doUpload = async (file: InputFile, fileInfo: FileInfo) => {\n        const fileData = await enhanceAndValidateFile(file, fileInfo, metas);\n        return uploadFileAndPersist(fileData, { user });\n      };\n\n      uploadedFiles = await Promise.all(\n        fileArray.map((file, idx) => doUpload(file, fileInfoArray[idx] || {}))\n      );\n    } finally {\n      // delete temporary folder\n      await fse.remove(tmpWorkingDirectory);\n    }\n\n    return uploadedFiles;\n  }\n\n  /**\n   * When uploading an image, an additional thumbnail is generated.\n   * Also, if there are responsive formats defined, another set of images will be generated too.\n   *\n   * @param {*} fileData\n   */\n  async function uploadImage(fileData: UploadableFile) {\n    const { getDimensions, generateThumbnail, generateResponsiveFormats, isResizableImage } =\n      getService('image-manipulation');\n\n    // Store width and height of the original image\n    const { width, height } = await getDimensions(fileData);\n\n    // Make sure this is assigned before calling any upload\n    // That way it can mutate the width and height\n    _.assign(fileData, {\n      width,\n      height,\n    });\n\n    // For performance reasons, all uploads are wrapped in a single Promise.all\n    const uploadThumbnail = async (thumbnailFile: UploadableFile) => {\n      await getService('provider').upload(thumbnailFile);\n      _.set(fileData, 'formats.thumbnail', thumbnailFile);\n    };\n\n    // Generate thumbnail and responsive formats\n    const uploadResponsiveFormat = async (format: { key: string; file: UploadableFile }) => {\n      const { key, file } = format;\n      await getService('provider').upload(file);\n      _.set(fileData, ['formats', key], file);\n    };\n\n    const uploadPromises: Promise<void>[] = [];\n\n    // Upload image\n    uploadPromises.push(getService('provider').upload(fileData));\n\n    // Generate & Upload thumbnail and responsive formats\n    if (await isResizableImage(fileData)) {\n      const thumbnailFile = await generateThumbnail(fileData);\n      if (thumbnailFile) {\n        uploadPromises.push(uploadThumbnail(thumbnailFile));\n      }\n\n      const formats = await generateResponsiveFormats(fileData);\n      if (Array.isArray(formats) && formats.length > 0) {\n        for (const format of formats) {\n          // eslint-disable-next-line no-continue\n          if (!format) continue;\n          uploadPromises.push(uploadResponsiveFormat(format));\n        }\n      }\n    }\n    // Wait for all uploads to finish\n    await Promise.all(uploadPromises);\n  }\n\n  /**\n   * Upload a file. If it is an image it will generate a thumbnail\n   * and responsive formats (if enabled).\n   */\n  async function uploadFileAndPersist(fileData: UploadableFile, opts?: CommonOptions) {\n    const { user } = opts ?? {};\n\n    const config = strapi.config.get<Config>('plugin::upload');\n    const { isImage } = getService('image-manipulation');\n\n    await getService('provider').checkFileSize(fileData);\n\n    if (await isImage(fileData)) {\n      await uploadImage(fileData);\n    } else {\n      await getService('provider').upload(fileData);\n    }\n\n    _.set(fileData, 'provider', config.provider);\n\n    // Persist file(s)\n    return add(fileData, { user });\n  }\n\n  async function updateFileInfo(\n    id: ID,\n    { name, alternativeText, caption, folder }: FileInfo,\n    opts?: CommonOptions\n  ) {\n    const { user } = opts ?? {};\n\n    const dbFile = await findOne(id);\n\n    if (!dbFile) {\n      throw new NotFoundError();\n    }\n\n    const fileService = getService('file');\n\n    const newName = _.isNil(name) ? dbFile.name : name;\n    const newInfos = {\n      name: newName,\n      alternativeText: _.isNil(alternativeText) ? dbFile.alternativeText : alternativeText,\n      caption: _.isNil(caption) ? dbFile.caption : caption,\n      folder: _.isUndefined(folder) ? dbFile.folder : folder,\n      folderPath: _.isUndefined(folder) ? dbFile.path : await fileService.getFolderPath(folder),\n    };\n\n    return update(id, newInfos, { user });\n  }\n\n  async function replace(\n    id: ID,\n    { data, file }: { data: { fileInfo: FileInfo }; file: InputFile },\n    opts?: CommonOptions\n  ) {\n    const { user } = opts ?? {};\n\n    const config = strapi.config.get<Config>('plugin::upload');\n\n    const { isImage } = getService('image-manipulation');\n\n    const dbFile = await findOne(id);\n    if (!dbFile) {\n      throw new NotFoundError();\n    }\n\n    // create temporary folder to store files for stream manipulation\n    const tmpWorkingDirectory = await createAndAssignTmpWorkingDirectoryToFiles(file);\n\n    let fileData: UploadableFile;\n\n    try {\n      const { fileInfo } = data;\n      fileData = await enhanceAndValidateFile(file, fileInfo);\n\n      // keep a constant hash and extension so the file url doesn't change when the file is replaced\n      _.assign(fileData, {\n        hash: dbFile.hash,\n        ext: dbFile.ext,\n      });\n\n      // execute delete function of the provider\n      if (dbFile.provider === config.provider) {\n        await strapi.plugin('upload').provider.delete(dbFile);\n\n        if (dbFile.formats) {\n          await Promise.all(\n            Object.keys(dbFile.formats).map((key) => {\n              return strapi.plugin('upload').provider.delete(dbFile.formats[key]);\n            })\n          );\n        }\n      }\n\n      // clear old formats\n      _.set(fileData, 'formats', {});\n\n      if (await isImage(fileData)) {\n        await uploadImage(fileData);\n      } else {\n        await getService('provider').upload(fileData);\n      }\n\n      _.set(fileData, 'provider', config.provider);\n    } finally {\n      // delete temporary folder\n      await fse.remove(tmpWorkingDirectory);\n    }\n\n    return update(id, fileData, { user });\n  }\n\n  async function update(id: ID, values: Partial<File>, opts?: CommonOptions) {\n    const { user } = opts ?? {};\n\n    const fileValues = { ...values };\n    if (user) {\n      Object.assign(fileValues, {\n        [UPDATED_BY_ATTRIBUTE]: user.id,\n      });\n    }\n\n    sendMediaMetrics(fileValues);\n\n    const res = await strapi.db.query(FILE_MODEL_UID).update({ where: { id }, data: fileValues });\n\n    await emitEvent(MEDIA_UPDATE, res);\n\n    return res;\n  }\n\n  async function add(values: any, opts?: CommonOptions) {\n    const { user } = opts ?? {};\n\n    const fileValues = { ...values };\n    if (user) {\n      Object.assign(fileValues, {\n        [UPDATED_BY_ATTRIBUTE]: user.id,\n        [CREATED_BY_ATTRIBUTE]: user.id,\n      });\n    }\n\n    sendMediaMetrics(fileValues);\n\n    const res = await strapi.db.query(FILE_MODEL_UID).create({ data: fileValues });\n\n    await emitEvent(MEDIA_CREATE, res);\n\n    return res;\n  }\n\n  function findOne(id: ID, populate = {}) {\n    const query = strapi.get('query-params').transform(FILE_MODEL_UID, {\n      populate,\n    });\n\n    return strapi.db.query(FILE_MODEL_UID).findOne({\n      where: { id },\n      ...query,\n    });\n  }\n\n  function findMany(query: any = {}): Promise<File[]> {\n    return strapi.db\n      .query(FILE_MODEL_UID)\n      .findMany(strapi.get('query-params').transform(FILE_MODEL_UID, query));\n  }\n\n  function findPage(query: any = {}) {\n    return strapi.db\n      .query(FILE_MODEL_UID)\n      .findPage(strapi.get('query-params').transform(FILE_MODEL_UID, query));\n  }\n\n  async function remove(file: File) {\n    const config = strapi.config.get<Config>('plugin::upload');\n\n    // execute delete function of the provider\n    if (file.provider === config.provider) {\n      await strapi.plugin('upload').provider.delete(file);\n\n      if (file.formats) {\n        const keys = Object.keys(file.formats);\n\n        await Promise.all(\n          keys.map((key) => {\n            return strapi.plugin('upload').provider.delete(file.formats![key]);\n          })\n        );\n      }\n    }\n\n    const media = await strapi.db.query(FILE_MODEL_UID).findOne({\n      where: { id: file.id },\n    });\n\n    await emitEvent(MEDIA_DELETE, media);\n\n    return strapi.db.query(FILE_MODEL_UID).delete({ where: { id: file.id } });\n  }\n\n  async function getSettings() {\n    const res = await strapi.store!({ type: 'plugin', name: 'upload', key: 'settings' }).get({});\n\n    return res as Settings | null;\n  }\n\n  function setSettings(value: Settings) {\n    if (value.responsiveDimensions === true) {\n      strapi.telemetry.send('didEnableResponsiveDimensions');\n    } else {\n      strapi.telemetry.send('didDisableResponsiveDimensions');\n    }\n\n    return strapi.store!({ type: 'plugin', name: 'upload', key: 'settings' }).set({ value });\n  }\n\n  async function getConfiguration() {\n    const res = await strapi.store!({\n      type: 'plugin',\n      name: 'upload',\n      key: 'view_configuration',\n    }).get({});\n\n    return res as ViewConfiguration | null;\n  }\n\n  function setConfiguration(value: ViewConfiguration) {\n    return strapi.store!({ type: 'plugin', name: 'upload', key: 'view_configuration' }).set({\n      value,\n    });\n  }\n\n  return {\n    formatFileInfo,\n    upload,\n    updateFileInfo,\n    replace,\n    findOne,\n    findMany,\n    findPage,\n    remove,\n    getSettings,\n    setSettings,\n    getConfiguration,\n    setConfiguration,\n\n    /**\n     * exposed for testing only\n     * @internal\n     */\n    _uploadImage: uploadImage,\n  };\n};\n","import fs from 'fs';\nimport { join } from 'path';\nimport sharp from 'sharp';\nimport { file as fileUtils } from '@strapi/utils';\n\nimport { getService } from '../utils';\n\nimport type { UploadableFile } from '../types';\n\ntype Dimensions = {\n  width: number | null;\n  height: number | null;\n};\n\nconst { bytesToKbytes } = fileUtils;\n\nconst FORMATS_TO_RESIZE = ['jpeg', 'png', 'webp', 'tiff', 'gif'];\nconst FORMATS_TO_PROCESS = ['jpeg', 'png', 'webp', 'tiff', 'svg', 'gif', 'avif'];\nconst FORMATS_TO_OPTIMIZE = ['jpeg', 'png', 'webp', 'tiff', 'avif'];\n\nconst isOptimizableFormat = (\n  format: string | undefined\n): format is 'jpeg' | 'png' | 'webp' | 'tiff' | 'avif' =>\n  format !== undefined && FORMATS_TO_OPTIMIZE.includes(format);\n\nconst writeStreamToFile = (stream: NodeJS.ReadWriteStream, path: string) =>\n  new Promise((resolve, reject) => {\n    const writeStream = fs.createWriteStream(path);\n    // Reject promise if there is an error with the provided stream\n    stream.on('error', reject);\n    stream.pipe(writeStream);\n    writeStream.on('close', resolve);\n    writeStream.on('error', reject);\n  });\n\nconst getMetadata = (file: UploadableFile): Promise<sharp.Metadata> => {\n  if (!file.filepath) {\n    return new Promise((resolve, reject) => {\n      const pipeline = sharp();\n      pipeline.metadata().then(resolve).catch(reject);\n      file.getStream().pipe(pipeline);\n    });\n  }\n\n  return sharp(file.filepath).metadata();\n};\n\nconst getDimensions = async (file: UploadableFile): Promise<Dimensions> => {\n  const { width = null, height = null } = await getMetadata(file);\n\n  return { width, height };\n};\n\nconst THUMBNAIL_RESIZE_OPTIONS = {\n  width: 245,\n  height: 156,\n  fit: 'inside',\n} satisfies sharp.ResizeOptions;\n\nconst resizeFileTo = async (\n  file: UploadableFile,\n  options: sharp.ResizeOptions,\n  {\n    name,\n    hash,\n  }: {\n    name: string;\n    hash: string;\n  }\n) => {\n  const filePath = file.tmpWorkingDirectory ? join(file.tmpWorkingDirectory, hash) : hash;\n\n  let newInfo;\n  if (!file.filepath) {\n    const transform = sharp()\n      .resize(options)\n      .on('info', (info) => {\n        newInfo = info;\n      });\n\n    await writeStreamToFile(file.getStream().pipe(transform), filePath);\n  } else {\n    newInfo = await sharp(file.filepath).resize(options).toFile(filePath);\n  }\n\n  const { width, height, size } = newInfo ?? {};\n\n  const newFile: UploadableFile = {\n    name,\n    hash,\n    ext: file.ext,\n    mime: file.mime,\n    filepath: filePath,\n    path: file.path || null,\n    getStream: () => fs.createReadStream(filePath),\n  };\n\n  Object.assign(newFile, {\n    width,\n    height,\n    size: size ? bytesToKbytes(size) : 0,\n    sizeInBytes: size,\n  });\n  return newFile;\n};\n\nconst generateThumbnail = async (file: UploadableFile) => {\n  if (\n    file.width &&\n    file.height &&\n    (file.width > THUMBNAIL_RESIZE_OPTIONS.width || file.height > THUMBNAIL_RESIZE_OPTIONS.height)\n  ) {\n    return resizeFileTo(file, THUMBNAIL_RESIZE_OPTIONS, {\n      name: `thumbnail_${file.name}`,\n      hash: `thumbnail_${file.hash}`,\n    });\n  }\n\n  return null;\n};\n\n/**\n * Optimize image by:\n *    - auto orienting image based on EXIF data\n *    - reduce image quality\n *\n */\nconst optimize = async (file: UploadableFile) => {\n  const { sizeOptimization = false, autoOrientation = false } =\n    (await getService('upload').getSettings()) ?? {};\n\n  const { format, size } = await getMetadata(file);\n\n  if ((sizeOptimization || autoOrientation) && isOptimizableFormat(format)) {\n    let transformer;\n    if (!file.filepath) {\n      transformer = sharp();\n    } else {\n      transformer = sharp(file.filepath);\n    }\n    // reduce image quality\n    transformer[format]({ quality: sizeOptimization ? 80 : 100 });\n    // rotate image based on EXIF data\n    if (autoOrientation) {\n      transformer.rotate();\n    }\n    const filePath = file.tmpWorkingDirectory\n      ? join(file.tmpWorkingDirectory, `optimized-${file.hash}`)\n      : `optimized-${file.hash}`;\n\n    let newInfo;\n    if (!file.filepath) {\n      transformer.on('info', (info) => {\n        newInfo = info;\n      });\n\n      await writeStreamToFile(file.getStream().pipe(transformer), filePath);\n    } else {\n      newInfo = await transformer.toFile(filePath);\n    }\n\n    const { width: newWidth, height: newHeight, size: newSize } = newInfo ?? {};\n\n    const newFile = { ...file };\n\n    newFile.getStream = () => fs.createReadStream(filePath);\n    newFile.filepath = filePath;\n\n    if (newSize && size && newSize > size) {\n      // Ignore optimization if output is bigger than original\n      return file;\n    }\n\n    return Object.assign(newFile, {\n      width: newWidth,\n      height: newHeight,\n      size: newSize ? bytesToKbytes(newSize) : 0,\n      sizeInBytes: newSize,\n    });\n  }\n\n  return file;\n};\n\nconst DEFAULT_BREAKPOINTS = {\n  large: 1000,\n  medium: 750,\n  small: 500,\n};\n\nconst getBreakpoints = () =>\n  strapi.config.get<Record<string, number>>('plugin::upload.breakpoints', DEFAULT_BREAKPOINTS);\n\nconst generateResponsiveFormats = async (file: UploadableFile) => {\n  const { responsiveDimensions = false } = (await getService('upload').getSettings()) ?? {};\n\n  if (!responsiveDimensions) return [];\n\n  const originalDimensions = await getDimensions(file);\n\n  const breakpoints = getBreakpoints();\n  return Promise.all(\n    Object.keys(breakpoints).map((key) => {\n      const breakpoint = breakpoints[key];\n\n      if (breakpointSmallerThan(breakpoint, originalDimensions)) {\n        return generateBreakpoint(key, { file, breakpoint });\n      }\n\n      return undefined;\n    })\n  );\n};\n\nconst generateBreakpoint = async (\n  key: string,\n  { file, breakpoint }: { file: UploadableFile; breakpoint: number }\n) => {\n  const newFile = await resizeFileTo(\n    file,\n    {\n      width: breakpoint,\n      height: breakpoint,\n      fit: 'inside',\n    },\n    {\n      name: `${key}_${file.name}`,\n      hash: `${key}_${file.hash}`,\n    }\n  );\n  return {\n    key,\n    file: newFile,\n  };\n};\n\nconst breakpointSmallerThan = (breakpoint: number, { width, height }: Dimensions) => {\n  return breakpoint < (width ?? 0) || breakpoint < (height ?? 0);\n};\n\n/**\n *  Applies a simple image transformation to see if the image is faulty/corrupted.\n */\nconst isFaultyImage = async (file: UploadableFile) => {\n  if (!file.filepath) {\n    return new Promise((resolve, reject) => {\n      const pipeline = sharp();\n      pipeline.stats().then(resolve).catch(reject);\n      file.getStream().pipe(pipeline);\n    });\n  }\n\n  try {\n    await sharp(file.filepath).stats();\n    return false;\n  } catch (e) {\n    return true;\n  }\n};\n\nconst isOptimizableImage = async (file: UploadableFile) => {\n  let format;\n  try {\n    const metadata = await getMetadata(file);\n    format = metadata.format;\n  } catch (e) {\n    // throw when the file is not a supported image\n    return false;\n  }\n  return format && FORMATS_TO_OPTIMIZE.includes(format);\n};\n\nconst isResizableImage = async (file: UploadableFile) => {\n  let format;\n  try {\n    const metadata = await getMetadata(file);\n    format = metadata.format;\n  } catch (e) {\n    // throw when the file is not a supported image\n    return false;\n  }\n  return format && FORMATS_TO_RESIZE.includes(format);\n};\n\nconst isImage = async (file: UploadableFile) => {\n  let format;\n  try {\n    const metadata = await getMetadata(file);\n    format = metadata.format;\n  } catch (e) {\n    // throw when the file is not a supported image\n    return false;\n  }\n  return format && FORMATS_TO_PROCESS.includes(format);\n};\n\nexport default {\n  isFaultyImage,\n  isOptimizableImage,\n  isResizableImage,\n  isImage,\n  getDimensions,\n  generateResponsiveFormats,\n  generateThumbnail,\n  optimize,\n};\n","import { sortBy, map, isUndefined } from 'lodash/fp';\nimport { strings, setCreatorFields } from '@strapi/utils';\nimport { FOLDER_MODEL_UID, FILE_MODEL_UID } from '../constants';\nimport { getService } from '../utils';\n\nimport type { File, Folder } from '../types';\n\ntype FolderMap = {\n  [key: string]: Partial<Folder> & {\n    children: FolderNode[];\n  };\n};\n\ntype FolderNode = Partial<Folder> & {\n  children: FolderNode[];\n};\n\nconst setPathIdAndPath = async (folder: Pick<Folder, 'parent'>) => {\n  const { max } = await strapi.db\n    .queryBuilder(FOLDER_MODEL_UID)\n    .max('pathId')\n    .first()\n    .execute<{ max: number }>();\n\n  const pathId = max + 1;\n  let parentPath = '/';\n  if (folder.parent) {\n    const parentFolder = await strapi.db\n      .query(FOLDER_MODEL_UID)\n      .findOne({ where: { id: folder.parent } });\n\n    parentPath = parentFolder.path;\n  }\n\n  return Object.assign(folder, {\n    pathId,\n    path: strings.joinBy('/', parentPath, `${pathId}`),\n  });\n};\n\nconst create = async (\n  folderData: Pick<Folder, 'name' | 'parent'>,\n  opts?: { user: { id: string | number } }\n) => {\n  const folderService = getService('folder');\n\n  const { user } = opts || {};\n\n  let enrichedFolder = await folderService.setPathIdAndPath(folderData);\n  if (user) {\n    enrichedFolder = await setCreatorFields({ user })(enrichedFolder);\n  }\n\n  const folder = await strapi.db.query(FOLDER_MODEL_UID).create({ data: enrichedFolder });\n\n  strapi.eventHub.emit('media-folder.create', { folder });\n\n  return folder;\n};\n\n/**\n * Recursively delete folders and included files\n * @param ids ids of the folders to delete\n * @returns {Promise<Object[]>}\n */\nconst deleteByIds = async (ids = []) => {\n  const folders = await strapi.db.query(FOLDER_MODEL_UID).findMany({ where: { id: { $in: ids } } });\n  if (folders.length === 0) {\n    return {\n      folders: [],\n      totalFolderNumber: 0,\n      totalFileNumber: 0,\n    };\n  }\n\n  const pathsToDelete = map('path', folders);\n\n  // delete files\n  const filesToDelete = await strapi.db.query(FILE_MODEL_UID).findMany({\n    where: {\n      $or: pathsToDelete.flatMap((path) => [\n        { folderPath: { $eq: path } },\n        { folderPath: { $startsWith: `${path}/` } },\n      ]),\n    },\n  });\n\n  await Promise.all(filesToDelete.map((file: File) => getService('upload').remove(file)));\n\n  // delete folders and subfolders\n  const { count: totalFolderNumber } = await strapi.db.query(FOLDER_MODEL_UID).deleteMany({\n    where: {\n      $or: pathsToDelete.flatMap((path) => [\n        { path: { $eq: path } },\n        { path: { $startsWith: `${path}/` } },\n      ]),\n    },\n  });\n\n  strapi.eventHub.emit('media-folder.delete', { folders });\n\n  return {\n    folders,\n    totalFolderNumber,\n    totalFileNumber: filesToDelete.length,\n  };\n};\n\n/**\n * Update name and location of a folder and its belonging folders and files\n */\nconst update = async (\n  id: number,\n  {\n    name,\n    parent,\n  }: {\n    name: string;\n    parent: number | null;\n  },\n  { user }: { user: { id: string | number } }\n) => {\n  // only name is updated\n  if (isUndefined(parent)) {\n    const existingFolder = await strapi.db.query(FOLDER_MODEL_UID).findOne({ where: { id } });\n\n    if (!existingFolder) {\n      return undefined;\n    }\n\n    const newFolder = setCreatorFields({ user, isEdition: true })({ name, parent });\n\n    if (isUndefined(parent)) {\n      const folder = await strapi.db\n        .query(FOLDER_MODEL_UID)\n        .update({ where: { id }, data: newFolder });\n\n      return folder;\n    }\n    // location is updated => using transaction\n  } else {\n    const trx = await strapi.db.transaction();\n    try {\n      // fetch existing folder\n      const existingFolder = await strapi.db\n        .queryBuilder(FOLDER_MODEL_UID)\n        .select(['pathId', 'path'])\n        .where({ id })\n        .transacting(trx.get())\n        .forUpdate()\n        .first()\n        .execute<Folder>();\n\n      // update parent folder (delete + insert; upsert not possible)\n      // @ts-expect-error - no dynamic types\n      const { joinTable } = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.parent;\n      await strapi.db\n        .queryBuilder(joinTable.name)\n        .transacting(trx.get())\n        .delete()\n        .where({ [joinTable.joinColumn.name]: id })\n        .execute();\n\n      if (parent !== null) {\n        await strapi.db\n          .queryBuilder(joinTable.name)\n          .transacting(trx.get())\n          .insert({ [joinTable.inverseJoinColumn.name]: parent, [joinTable.joinColumn.name]: id })\n          .where({ [joinTable.joinColumn.name]: id })\n          .execute();\n      }\n\n      // fetch destinationFolder path\n      let destinationFolderPath = '/';\n      if (parent !== null) {\n        const destinationFolder = await strapi.db\n          .queryBuilder(FOLDER_MODEL_UID)\n          .select('path')\n          .where({ id: parent })\n          .transacting(trx.get())\n          .first()\n          .execute<Folder>();\n        destinationFolderPath = destinationFolder.path;\n      }\n\n      const folderTable = strapi.getModel(FOLDER_MODEL_UID).collectionName;\n      const fileTable = strapi.getModel(FILE_MODEL_UID).collectionName;\n      const folderPathColumnName =\n        // @ts-expect-error - no dynamic types\n        strapi.db.metadata.get(FILE_MODEL_UID).attributes.folderPath.columnName;\n      // @ts-expect-error - no dynamic types\n      const pathColumnName = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.path.columnName;\n\n      // update folders below\n      await strapi.db\n        .getConnection(folderTable)\n        .transacting(trx.get())\n        .where(pathColumnName, existingFolder.path)\n        .orWhere(pathColumnName, 'like', `${existingFolder.path}/%`)\n        .update(\n          pathColumnName,\n          strapi.db.connection.raw('REPLACE(??, ?, ?)', [\n            pathColumnName,\n            existingFolder.path,\n            strings.joinBy('/', destinationFolderPath, `${existingFolder.pathId}`),\n          ])\n        );\n\n      // update files below\n      await strapi.db\n        .getConnection(fileTable)\n        .transacting(trx.get())\n        .where(folderPathColumnName, existingFolder.path)\n        .orWhere(folderPathColumnName, 'like', `${existingFolder.path}/%`)\n        .update(\n          folderPathColumnName,\n          strapi.db.connection.raw('REPLACE(??, ?, ?)', [\n            folderPathColumnName,\n            existingFolder.path,\n            strings.joinBy('/', destinationFolderPath, `${existingFolder.pathId}`),\n          ])\n        );\n\n      await trx.commit();\n    } catch (e) {\n      await trx.rollback();\n      throw e;\n    }\n\n    // update less critical information (name + updatedBy)\n    const newFolder = setCreatorFields({ user, isEdition: true })({ name });\n\n    const folder = await strapi.db\n      .query(FOLDER_MODEL_UID)\n      .update({ where: { id }, data: newFolder });\n\n    strapi.eventHub.emit('media-folder.update', { folder });\n    return folder;\n  }\n};\n\n/**\n * Check if a folder exists in database\n * @param params query params to find the folder\n * @returns {Promise<boolean>}\n */\nconst exists = async (params = {}) => {\n  const count = await strapi.db.query(FOLDER_MODEL_UID).count({ where: params });\n  return count > 0;\n};\n\n/**\n * Returns the nested structure of folders\n * @returns {Promise<array>}\n */\nconst getStructure = async () => {\n  // @ts-expect-error - no dynamic types\n  const { joinTable } = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.parent;\n  const qb = strapi.db.queryBuilder(FOLDER_MODEL_UID);\n  const alias = qb.getAlias();\n  const folders = (await qb\n    .select(['id', 'name', `${alias}.${joinTable.inverseJoinColumn.name} as parent`])\n    .join({\n      alias,\n      referencedTable: joinTable.name,\n      referencedColumn: joinTable.joinColumn.name,\n      rootColumn: joinTable.joinColumn.referencedColumn,\n      rootTable: qb.alias,\n    })\n    .execute({ mapResults: false })) as Folder[];\n\n  const folderMap: FolderMap = {\n    null: { children: [] },\n  };\n\n  folders.forEach((f) => {\n    folderMap[f.id] = { ...f, children: [] };\n  });\n\n  folders.forEach((f) => {\n    const parentId = f.parent || 'null';\n\n    if (!folderMap[parentId]) {\n      folderMap[parentId] = { children: [] };\n    }\n\n    folderMap[parentId].children.push(folderMap[f.id]);\n    folderMap[parentId].children = sortBy('name', folderMap[parentId].children);\n    delete folderMap[f.id].parent;\n  });\n\n  return folderMap.null.children;\n};\n\nexport default {\n  create,\n  exists,\n  deleteByIds,\n  update,\n  setPathIdAndPath,\n  getStructure,\n};\n","import { cloneDeep } from 'lodash/fp';\nimport { async } from '@strapi/utils';\n\nimport { FOLDER_MODEL_UID, FILE_MODEL_UID } from '../constants';\nimport { getService } from '../utils';\n\nimport { Config, type File } from '../types';\n\nconst getFolderPath = async (folderId?: number | null) => {\n  if (!folderId) return '/';\n\n  const parentFolder = await strapi.db.query(FOLDER_MODEL_UID).findOne({ where: { id: folderId } });\n\n  return parentFolder.path;\n};\n\nconst deleteByIds = async (ids: number[] = []) => {\n  const filesToDelete = await strapi.db\n    .query(FILE_MODEL_UID)\n    .findMany({ where: { id: { $in: ids } } });\n\n  await Promise.all(filesToDelete.map((file: File) => getService('upload').remove(file)));\n\n  return filesToDelete;\n};\n\nconst signFileUrls = async (file: File) => {\n  const { provider } = strapi.plugins.upload;\n  const { provider: providerConfig } = strapi.config.get<Config>('plugin::upload');\n  const isPrivate = await provider.isPrivate();\n  file.isUrlSigned = false;\n\n  // Check file provider and if provider is private\n  if (file.provider !== providerConfig || !isPrivate) {\n    return file;\n  }\n\n  const signUrl = async (file: File) => {\n    const signedUrl = await provider.getSignedUrl(file);\n    file.url = signedUrl.url;\n    file.isUrlSigned = true;\n  };\n\n  const signedFile = cloneDeep(file);\n\n  // Sign each file format\n  await signUrl(signedFile);\n  if (file.formats) {\n    await async.map(Object.values(signedFile.formats ?? {}), signUrl);\n  }\n\n  return signedFile;\n};\n\nexport default { getFolderPath, deleteByIds, signFileUrls };\n","const getWeeklyCronScheduleAt = (date: Date) =>\n  `${date.getSeconds()} ${date.getMinutes()} ${date.getHours()} * * ${date.getDay()}`;\n\nexport { getWeeklyCronScheduleAt };\n","import { defaultTo } from 'lodash/fp';\nimport { add } from 'date-fns';\n\nimport type { Core } from '@strapi/types';\n\nimport { getWeeklyCronScheduleAt } from '../utils/cron';\nimport { FOLDER_MODEL_UID, FILE_MODEL_UID } from '../constants';\n\ntype MetricStoreValue = {\n  lastWeeklyUpdate?: number;\n  weeklySchedule?: string;\n};\n\nconst ONE_WEEK = 7 * 24 * 60 * 60 * 1000;\n\nconst getMetricsStoreValue = async (): Promise<MetricStoreValue> => {\n  const value = await strapi.store.get({ type: 'plugin', name: 'upload', key: 'metrics' });\n  return defaultTo({}, value) as MetricStoreValue;\n};\nconst setMetricsStoreValue = (value: MetricStoreValue) =>\n  strapi.store.set({ type: 'plugin', name: 'upload', key: 'metrics', value });\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n  async computeMetrics() {\n    // Folder metrics\n    // @ts-expect-error - no dynamic types for the metadata\n    const pathColName = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.path.columnName;\n    const folderTable = strapi.getModel(FOLDER_MODEL_UID).collectionName;\n\n    let keepOnlySlashesSQLString = '??';\n    const queryParams = [pathColName];\n    for (let i = 0; i < 10; i += 1) {\n      keepOnlySlashesSQLString = `REPLACE(${keepOnlySlashesSQLString}, ?, ?)`;\n      queryParams.push(String(i), '');\n    }\n\n    /*\n      The following query goal is to count the number of folders with depth 1, depth 2 etc.\n      The query returns :\n      [\n        { depth: 1, occurence: 4 },\n        { depth: 2, occurence: 2 },\n        { depth: 3, occurence: 5 },\n      ]\n\n      The query is built as follow:\n      1. In order to get the depth level of a folder:\n        - we take their path\n        - remove all numbers (by replacing 0123456789 by '', thus the 10 REPLACE in the query)\n        - count the remaining `/`, which correspond to their depth (by using LENGTH)\n        We now have, for each folder, its depth.\n      2. In order to get the number of folders for each depth:\n        - we group them by their depth and use COUNT(*)\n    */\n\n    const res = (await strapi.db\n      .getConnection(folderTable)\n      .select(\n        strapi.db.connection.raw(\n          `LENGTH(${keepOnlySlashesSQLString}) AS depth, COUNT(*) AS occurence`,\n          queryParams\n        )\n      )\n      .groupBy('depth')) as Array<{ depth: string; occurence: string }>;\n\n    const folderLevelsArray = res.map((map) => ({\n      depth: Number(map.depth),\n      occurence: Number(map.occurence),\n    })); // values can be strings depending on the database\n\n    let product = 0;\n    let folderNumber = 0;\n    let maxDepth = 0;\n    for (const folderLevel of folderLevelsArray) {\n      product += folderLevel.depth * folderLevel.occurence;\n      folderNumber += folderLevel.occurence;\n      if (folderLevel.depth > maxDepth) {\n        maxDepth = folderLevel.depth;\n      }\n    }\n    const averageDepth = folderNumber !== 0 ? product / folderNumber : 0;\n\n    let sumOfDeviation = 0;\n    for (const folderLevel of folderLevelsArray) {\n      sumOfDeviation += Math.abs(folderLevel.depth - averageDepth) * folderLevel.occurence;\n    }\n\n    const averageDeviationDepth = folderNumber !== 0 ? sumOfDeviation / folderNumber : 0;\n\n    // File metrics\n    const assetNumber = await strapi.db.query(FILE_MODEL_UID).count();\n\n    return {\n      assetNumber,\n      folderNumber,\n      averageDepth,\n      maxDepth,\n      averageDeviationDepth,\n    };\n  },\n\n  async sendMetrics() {\n    const metrics = await this.computeMetrics();\n    strapi.telemetry.send('didSendUploadPropertiesOnceAWeek', {\n      groupProperties: { metrics },\n    });\n\n    const metricsInfoStored = await getMetricsStoreValue();\n    await setMetricsStoreValue({ ...metricsInfoStored, lastWeeklyUpdate: new Date().getTime() });\n  },\n\n  async ensureWeeklyStoredCronSchedule(): Promise<string> {\n    const metricsInfoStored = await getMetricsStoreValue();\n    const { weeklySchedule: currentSchedule, lastWeeklyUpdate } = metricsInfoStored;\n\n    const now = new Date();\n    let weeklySchedule = currentSchedule;\n\n    if (!weeklySchedule || !lastWeeklyUpdate || lastWeeklyUpdate + ONE_WEEK < now.getTime()) {\n      weeklySchedule = getWeeklyCronScheduleAt(add(now, { minutes: 5 }));\n      await setMetricsStoreValue({ ...metricsInfoStored, weeklySchedule });\n\n      return weeklySchedule;\n    }\n\n    return weeklySchedule;\n  },\n\n  async registerCron() {\n    const weeklySchedule = await this.ensureWeeklyStoredCronSchedule();\n\n    strapi.cron.add({\n      uploadWeekly: {\n        task: this.sendMetrics.bind(this),\n        options: weeklySchedule,\n      },\n    });\n  },\n});\n","import type { Core } from '@strapi/types';\n\nconst getProviderName = () => strapi.config.get('plugin::upload.provider', 'local');\nconst isProviderPrivate = async () => strapi.plugin('upload').provider.isPrivate();\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n  async sendUploadPluginMetrics() {\n    const uploadProvider = getProviderName();\n    const privateProvider = await isProviderPrivate();\n\n    strapi.telemetry.send('didInitializePluginUpload', {\n      groupProperties: {\n        uploadProvider,\n        privateProvider,\n      },\n    });\n  },\n});\n","import { isNil, get } from 'lodash/fp';\nimport { getService } from '../utils';\nimport { FOLDER_MODEL_UID, API_UPLOAD_FOLDER_BASE_NAME } from '../constants';\n\nconst getStore = () => strapi.store({ type: 'plugin', name: 'upload', key: 'api-folder' });\n\nconst createApiUploadFolder = async () => {\n  let name = API_UPLOAD_FOLDER_BASE_NAME;\n  const folderService = getService('folder');\n\n  let exists = true;\n  let index = 1;\n  while (exists) {\n    exists = await folderService.exists({ name, parent: null });\n    if (exists) {\n      name = `${API_UPLOAD_FOLDER_BASE_NAME} (${index})`;\n      index += 1;\n    }\n  }\n\n  const folder = await folderService.create({ name });\n\n  await getStore().set({ value: { id: folder.id } });\n\n  return folder;\n};\n\nconst getAPIUploadFolder = async () => {\n  const storeValue = await getStore().get({});\n  const folderId = get('id', storeValue);\n\n  const folder = folderId\n    ? await strapi.db.query(FOLDER_MODEL_UID).findOne({ where: { id: folderId } })\n    : null;\n\n  return isNil(folder) ? createApiUploadFolder() : folder;\n};\n\nexport default {\n  getAPIUploadFolder,\n};\n","import { async, traverseEntity } from '@strapi/utils';\n\nimport type { Schema, UID } from '@strapi/types';\n\nimport { getService } from '../../utils';\n\nimport type { File } from '../../types';\n\ntype SignEntityMediaVisitor = (\n  args: {\n    key: string;\n    value: unknown;\n    attribute: Schema.Attribute.AnyAttribute;\n  },\n  utils: {\n    set: (key: string, value: unknown) => void;\n  }\n) => Promise<void>;\n\nfunction isFile(value: unknown, attribute: Schema.Attribute.AnyAttribute): value is File {\n  if (!value || attribute.type !== 'media') {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Visitor function to sign media URLs\n */\nconst signEntityMediaVisitor: SignEntityMediaVisitor = async (\n  { key, value, attribute },\n  { set }\n) => {\n  const { signFileUrls } = getService('file');\n\n  if (!attribute) {\n    return;\n  }\n\n  if (attribute.type !== 'media') {\n    return;\n  }\n\n  if (isFile(value, attribute)) {\n    // If the attribute is repeatable sign each file\n    if (attribute.multiple) {\n      const signedFiles = await async.map(value, signFileUrls);\n      set(key, signedFiles);\n      return;\n    }\n\n    // If the attribute is not repeatable only sign a single file\n    const signedFile = await signFileUrls(value);\n    set(key, signedFile);\n  }\n};\n\n/**\n *\n * Iterate through an entity manager result\n * Check which modelAttributes are media and pre sign the image URLs\n * if they are from the current upload provider\n *\n * @param {Object} entity\n * @param {Object} modelAttributes\n * @returns\n */\nconst signEntityMedia = async (entity: any, uid: UID.Schema) => {\n  const model = strapi.getModel(uid);\n  return traverseEntity(\n    // @ts-expect-error - FIXME: fix traverseEntity using wrong types\n    signEntityMediaVisitor,\n    { schema: model, getModel: strapi.getModel.bind(strapi) },\n    entity\n  );\n};\n\nexport { signEntityMedia };\n","import { async } from '@strapi/utils';\nimport { signEntityMedia } from './utils';\n\nconst signFileUrlsOnDocumentService = async () => {\n  const { provider } = strapi.plugins.upload;\n  const isPrivate = await provider.isPrivate();\n\n  // We only need to sign the file urls if the provider is private\n  if (!isPrivate) {\n    return;\n  }\n\n  strapi.documents.use(async (ctx, next) => {\n    const uid = ctx.uid;\n    const result: any = await next();\n\n    if (ctx.action === 'findMany') {\n      // Shape: [ entry ]\n      return async.map(result, (entry: any) => signEntityMedia(entry, uid));\n    }\n\n    if (\n      ctx.action === 'findFirst' ||\n      ctx.action === 'findOne' ||\n      ctx.action === 'create' ||\n      ctx.action === 'update'\n    ) {\n      // Shape: entry\n      return signEntityMedia(result, uid);\n    }\n\n    if (\n      ctx.action === 'delete' ||\n      ctx.action === 'clone' ||\n      ctx.action === 'publish' ||\n      ctx.action === 'unpublish' ||\n      ctx.action === 'discardDraft'\n    ) {\n      // Shape: { entries: [ entry ] }\n      // ...\n      return {\n        ...result,\n        entries: await async.map(result.entries, (entry: any) => signEntityMedia(entry, uid)),\n      };\n    }\n\n    return result;\n  });\n};\n\nexport default {\n  signFileUrlsOnDocumentService,\n};\n","import provider from './provider';\nimport upload from './upload';\nimport imageManipulation from './image-manipulation';\nimport folder from './folder';\nimport file from './file';\nimport weeklyMetrics from './weekly-metrics';\nimport metrics from './metrics';\nimport apiUploadFolder from './api-upload-folder';\nimport extensions from './extensions';\n\nexport const services = {\n  provider,\n  upload,\n  folder,\n  file,\n  weeklyMetrics,\n  metrics,\n  'image-manipulation': imageManipulation,\n  'api-upload-folder': apiUploadFolder,\n  extensions,\n};\n","export const routes = {\n  type: 'admin',\n  routes: [\n    {\n      method: 'GET',\n      path: '/settings',\n      handler: 'admin-settings.getSettings',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::upload.settings.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/settings',\n      handler: 'admin-settings.updateSettings',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::upload.settings.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/',\n      handler: 'admin-upload.upload',\n      config: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/files',\n      handler: 'admin-file.find',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::upload.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/files/:id',\n      handler: 'admin-file.findOne',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::upload.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'DELETE',\n      path: '/files/:id',\n      handler: 'admin-file.destroy',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::upload.assets.update'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/folders/:id',\n      handler: 'admin-folder.findOne',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::upload.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/folders',\n      handler: 'admin-folder.find',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::upload.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/folders',\n      handler: 'admin-folder.create',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::upload.assets.create'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/folders/:id',\n      handler: 'admin-folder.update',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::upload.assets.update'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/folder-structure',\n      handler: 'admin-folder.getStructure',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::upload.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/actions/bulk-delete',\n      handler: 'admin-folder-file.deleteMany',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::upload.assets.update'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/actions/bulk-move',\n      handler: 'admin-folder-file.moveMany',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::upload.assets.update'],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n","export const routes = {\n  type: 'content-api',\n  routes: [\n    {\n      method: 'POST',\n      path: '/',\n      handler: 'content-api.upload',\n    },\n    {\n      method: 'GET',\n      path: '/files',\n      handler: 'content-api.find',\n    },\n    {\n      method: 'GET',\n      path: '/files/:id',\n      handler: 'content-api.findOne',\n    },\n    {\n      method: 'DELETE',\n      path: '/files/:id',\n      handler: 'content-api.destroy',\n    },\n  ],\n};\n","import { ACTIONS } from '../constants';\n\nexport const routes = {\n  type: 'admin',\n  routes: [\n    {\n      method: 'GET',\n      path: '/configuration',\n      handler: 'view-configuration.findViewConfiguration',\n      config: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/configuration',\n      handler: 'view-configuration.updateViewConfiguration',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: [ACTIONS.configureView],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n","import { routes as admin } from './admin';\nimport { routes as contentApi } from './content-api';\nimport { routes as viewConfiguration } from './view-configuration';\n\nexport const routes = {\n  admin,\n  'content-api': contentApi,\n  viewConfiguration,\n};\n","export const config = {\n  default: {\n    enabled: true,\n    provider: 'local',\n    sizeLimit: 1000000000, // 1GB\n    actionOptions: {},\n  },\n  validator() {},\n};\n","import _ from 'lodash';\nimport { errors, contentTypes as contentTypesUtils } from '@strapi/utils';\nimport { getService } from '../../utils';\n\nconst findEntityAndCheckPermissions = async (\n  ability: unknown,\n  action: string,\n  model: string,\n  id: string | number\n) => {\n  const file = await getService('upload').findOne(id, [\n    contentTypesUtils.constants.CREATED_BY_ATTRIBUTE,\n    'folder',\n  ]);\n\n  if (_.isNil(file)) {\n    throw new errors.NotFoundError();\n  }\n\n  const pm = strapi\n    .service('admin::permission')\n    .createPermissionsManager({ ability, action, model });\n\n  const creatorId = _.get(file, [contentTypesUtils.constants.CREATED_BY_ATTRIBUTE, 'id']);\n  const author = creatorId\n    ? await strapi.service('admin::user').findOne(creatorId, ['roles'])\n    : null;\n\n  const fileWithRoles = _.set(_.cloneDeep(file), 'createdBy', author);\n\n  if (pm.ability.cannot(pm.action, pm.toSubject(fileWithRoles))) {\n    throw new errors.ForbiddenError();\n  }\n\n  return { pm, file };\n};\n\nexport { findEntityAndCheckPermissions };\n","import { merge } from 'lodash/fp';\nimport { async } from '@strapi/utils';\n\nimport type { Context } from 'koa';\n\nimport { getService } from '../utils';\nimport { ACTIONS, FILE_MODEL_UID } from '../constants';\nimport { findEntityAndCheckPermissions } from './utils/find-entity-and-check-permissions';\n\nexport default {\n  async find(ctx: Context) {\n    const {\n      state: { userAbility },\n    } = ctx;\n\n    const defaultQuery = { populate: { folder: true } };\n\n    const pm = strapi.service('admin::permission').createPermissionsManager({\n      ability: userAbility,\n      action: ACTIONS.read,\n      model: FILE_MODEL_UID,\n    });\n\n    if (!pm.isAllowed) {\n      return ctx.forbidden();\n    }\n\n    // validate the incoming user query params\n    await pm.validateQuery(ctx.query);\n\n    const query = await async.pipe(\n      // Start by sanitizing the incoming query\n      (q) => pm.sanitizeQuery(q),\n      // Add the default query which should not be validated or sanitized\n      (q) => merge(defaultQuery, q),\n      // Add the dynamic filters based on permissions' conditions\n      (q) => pm.addPermissionsQueryTo(q)\n    )(ctx.query);\n\n    const { results: files, pagination } = await getService('upload').findPage(query);\n\n    // Sign file urls for private providers\n    const signedFiles = await async.map(files, getService('file').signFileUrls);\n\n    const sanitizedFiles = await pm.sanitizeOutput(signedFiles);\n\n    return { results: sanitizedFiles, pagination };\n  },\n\n  async findOne(ctx: Context) {\n    const {\n      state: { userAbility },\n      params: { id },\n    } = ctx;\n\n    const { pm, file } = await findEntityAndCheckPermissions(\n      userAbility,\n      ACTIONS.read,\n      FILE_MODEL_UID,\n      id\n    );\n\n    const signedFile = await getService('file').signFileUrls(file);\n    ctx.body = await pm.sanitizeOutput(signedFile);\n  },\n\n  async destroy(ctx: Context) {\n    const { id } = ctx.params;\n    const { userAbility } = ctx.state;\n\n    const { pm, file } = await findEntityAndCheckPermissions(\n      userAbility,\n      ACTIONS.update,\n      FILE_MODEL_UID,\n      id\n    );\n\n    const [body] = await Promise.all([\n      pm.sanitizeOutput(file, { action: ACTIONS.read }),\n      getService('upload').remove(file),\n    ]);\n\n    ctx.body = body;\n  },\n};\n","import { isNil } from 'lodash/fp';\nimport { getService } from '../../../utils';\n\nconst folderExists = async (folderId: number) => {\n  if (isNil(folderId)) {\n    return true;\n  }\n\n  const exists = await getService('folder').exists({ id: folderId });\n\n  return exists;\n};\n\nexport { folderExists };\n","import { Folder } from '../../types';\n\nconst isFolderOrChild = (folderOrChild: Folder, folder: Folder) =>\n  folderOrChild.path === folder.path || folderOrChild.path.startsWith(`${folder.path}/`);\n\nexport { isFolderOrChild };\n","import { isUndefined, get, isNil } from 'lodash/fp';\nimport { yup, validateYupSchema } from '@strapi/utils';\nimport { getService } from '../../../utils';\nimport { FOLDER_MODEL_UID } from '../../../constants';\nimport { folderExists } from './utils';\nimport { isFolderOrChild } from '../../utils/folders';\n\nconst NO_SLASH_REGEX = /^[^/]+$/;\nconst NO_SPACES_AROUND = /^(?! ).+(?<! )$/;\n\nconst isNameUniqueInFolder = (id?: number): yup.TestFunction<string | undefined> => {\n  return async function test(name?: string) {\n    const { exists } = getService('folder');\n    const filters: Record<string, unknown> = { name, parent: this.parent.parent || null };\n    if (id) {\n      filters.id = { $ne: id };\n\n      if (isUndefined(name)) {\n        const existingFolder = await strapi.db.query(FOLDER_MODEL_UID).findOne({ where: { id } });\n        filters.name = get('name', existingFolder);\n      }\n    }\n\n    const doesExist = await exists(filters);\n    return !doesExist;\n  };\n};\n\nconst validateCreateFolderSchema = yup\n  .object()\n  .shape({\n    name: yup\n      .string()\n      .min(1)\n      .matches(NO_SLASH_REGEX, 'name cannot contain slashes')\n      .matches(NO_SPACES_AROUND, 'name cannot start or end with a whitespace')\n      .required()\n      .test('is-folder-unique', 'A folder with this name already exists', isNameUniqueInFolder()),\n    parent: yup\n      .strapiID()\n      .nullable()\n      .test('folder-exists', 'parent folder does not exist', folderExists),\n  })\n  .noUnknown()\n  .required();\n\nconst validateUpdateFolderSchema = (id: number) =>\n  yup\n    .object()\n    .shape({\n      name: yup\n        .string()\n        .min(1)\n        .matches(NO_SLASH_REGEX, 'name cannot contain slashes')\n        .matches(NO_SPACES_AROUND, 'name cannot start or end with a whitespace')\n        .test(\n          'is-folder-unique',\n          'A folder with this name already exists',\n          isNameUniqueInFolder(id)\n        ),\n      parent: yup\n        .strapiID()\n        .nullable()\n        .test('folder-exists', 'parent folder does not exist', folderExists)\n        .test(\n          'dont-move-inside-self',\n          'folder cannot be moved inside itself',\n          async function test(parent) {\n            if (isNil(parent)) return true;\n\n            const destinationFolder = await strapi.db.query(FOLDER_MODEL_UID).findOne({\n              select: ['path'],\n              where: { id: parent },\n            });\n\n            const currentFolder = await strapi.db.query(FOLDER_MODEL_UID).findOne({\n              select: ['path'],\n              where: { id },\n            });\n\n            if (!destinationFolder || !currentFolder) return true;\n\n            return !isFolderOrChild(destinationFolder, currentFolder);\n          }\n        ),\n    })\n    .noUnknown()\n    .required();\n\nexport const validateCreateFolder = validateYupSchema(validateCreateFolderSchema);\nexport const validateUpdateFolder = (id: number) =>\n  validateYupSchema(validateUpdateFolderSchema(id));\n","import { defaultsDeep } from 'lodash/fp';\n\nimport type { Context } from 'koa';\n\nimport { getService } from '../utils';\nimport { FOLDER_MODEL_UID } from '../constants';\nimport { validateCreateFolder, validateUpdateFolder } from './validation/admin/folder';\n\nexport default {\n  async findOne(ctx: Context) {\n    const { id } = ctx.params;\n\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: FOLDER_MODEL_UID,\n    });\n\n    await permissionsManager.validateQuery(ctx.query);\n    const query = await permissionsManager.sanitizeQuery(ctx.query);\n\n    const { results } = await strapi.db.query(FOLDER_MODEL_UID).findPage(\n      strapi.get('query-params').transform(\n        FOLDER_MODEL_UID,\n        defaultsDeep(\n          {\n            filters: { id },\n            populate: {\n              children: {\n                count: true,\n              },\n              files: {\n                count: true,\n              },\n            },\n          },\n          query\n        )\n      )\n    );\n\n    if (results.length === 0) {\n      return ctx.notFound('folder not found');\n    }\n\n    ctx.body = {\n      data: await permissionsManager.sanitizeOutput(results[0]),\n    };\n  },\n\n  async find(ctx: Context) {\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: FOLDER_MODEL_UID,\n    });\n\n    await permissionsManager.validateQuery(ctx.query);\n    const query = await permissionsManager.sanitizeQuery(ctx.query);\n\n    const results = await strapi.db.query(FOLDER_MODEL_UID).findMany(\n      strapi.get('query-params').transform(\n        FOLDER_MODEL_UID,\n        defaultsDeep(\n          {\n            populate: {\n              children: {\n                count: true,\n              },\n              files: {\n                count: true,\n              },\n            },\n          },\n          query\n        )\n      )\n    );\n\n    ctx.body = {\n      data: await permissionsManager.sanitizeOutput(results),\n    };\n  },\n  async create(ctx: Context) {\n    const { user } = ctx.state;\n    const { body } = ctx.request;\n\n    await validateCreateFolder(body);\n\n    const folderService = getService('folder');\n\n    const folder = await folderService.create(body, { user });\n\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: FOLDER_MODEL_UID,\n    });\n\n    ctx.created({\n      data: await permissionsManager.sanitizeOutput(folder),\n    });\n  },\n\n  async update(ctx: Context) {\n    const { id } = ctx.params;\n    const { user } = ctx.state;\n    const { body } = ctx.request;\n\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: FOLDER_MODEL_UID,\n    });\n\n    await validateUpdateFolder(id)(body);\n\n    const folderService = getService('folder');\n\n    const updatedFolder = await folderService.update(id, body, { user });\n\n    if (!updatedFolder) {\n      return ctx.notFound('folder not found');\n    }\n\n    ctx.body = {\n      data: await permissionsManager.sanitizeOutput(updatedFolder),\n    };\n  },\n\n  async getStructure(ctx: Context) {\n    const { getStructure } = getService('folder');\n\n    const structure = await getStructure();\n\n    ctx.body = {\n      data: structure,\n    };\n  },\n};\n","import { intersection, map, isEmpty } from 'lodash/fp';\nimport { yup, validateYupSchema } from '@strapi/utils';\nimport { FOLDER_MODEL_UID } from '../../../constants';\nimport { folderExists } from './utils';\nimport { isFolderOrChild } from '../../utils/folders';\n\nconst validateDeleteManyFoldersFilesSchema = yup\n  .object()\n  .shape({\n    fileIds: yup.array().of(yup.strapiID().required()),\n    folderIds: yup.array().of(yup.strapiID().required()),\n  })\n  .noUnknown()\n  .required();\n\nconst validateStructureMoveManyFoldersFilesSchema = yup\n  .object()\n  .shape({\n    destinationFolderId: yup\n      .strapiID()\n      .nullable()\n      .defined()\n      .test('folder-exists', 'destination folder does not exist', folderExists),\n    fileIds: yup.array().of(yup.strapiID().required()),\n    folderIds: yup.array().of(yup.strapiID().required()),\n  })\n  .noUnknown()\n  .required();\n\nconst validateDuplicatesMoveManyFoldersFilesSchema = yup\n  .object()\n  .test('are-folders-unique', 'some folders already exist', async function areFoldersUnique(value) {\n    const { folderIds, destinationFolderId } = value;\n    if (isEmpty(folderIds)) return true;\n\n    const folders = await strapi.db.query(FOLDER_MODEL_UID).findMany({\n      select: ['name'],\n      where: { id: { $in: folderIds } },\n    });\n\n    const existingFolders = await strapi.db.query(FOLDER_MODEL_UID).findMany({\n      select: ['name'],\n      where: { parent: { id: destinationFolderId } },\n    });\n\n    const duplicatedNames = intersection(map('name', folders), map('name', existingFolders));\n    if (duplicatedNames.length > 0) {\n      return this.createError({\n        message: `some folders already exists: ${duplicatedNames.join(', ')}`,\n      });\n    }\n\n    return true;\n  });\n\nconst validateMoveFoldersNotInsideThemselvesSchema = yup\n  .object()\n  .test(\n    'dont-move-inside-self',\n    'folders cannot be moved inside themselves or one of its children',\n    async function validateMoveFoldersNotInsideThemselves(value) {\n      const { folderIds, destinationFolderId } = value;\n      if (destinationFolderId === null || isEmpty(folderIds)) return true;\n\n      const destinationFolder = await strapi.db.query(FOLDER_MODEL_UID).findOne({\n        select: ['path'],\n        where: { id: destinationFolderId },\n      });\n\n      const folders = await strapi.db.query(FOLDER_MODEL_UID).findMany({\n        select: ['name', 'path'],\n        where: { id: { $in: folderIds } },\n      });\n\n      const unmovableFoldersNames = folders\n        .filter((folder) => isFolderOrChild(destinationFolder, folder))\n        .map((f) => f.name);\n\n      if (unmovableFoldersNames.length > 0) {\n        return this.createError({\n          message: `folders cannot be moved inside themselves or one of its children: ${unmovableFoldersNames.join(\n            ', '\n          )}`,\n        });\n      }\n\n      return true;\n    }\n  );\n\nexport const validateDeleteManyFoldersFiles = validateYupSchema(\n  validateDeleteManyFoldersFilesSchema\n);\n\nexport async function validateMoveManyFoldersFiles(body: unknown) {\n  await validateYupSchema(validateStructureMoveManyFoldersFilesSchema)(body);\n  await validateYupSchema(validateDuplicatesMoveManyFoldersFilesSchema)(body);\n  await validateYupSchema(validateMoveFoldersNotInsideThemselvesSchema)(body);\n}\n","import { strings } from '@strapi/utils';\n\nimport type { Context } from 'koa';\n\nimport { getService } from '../utils';\nimport { ACTIONS, FOLDER_MODEL_UID, FILE_MODEL_UID } from '../constants';\nimport {\n  validateDeleteManyFoldersFiles,\n  validateMoveManyFoldersFiles,\n} from './validation/admin/folder-file';\n\nimport type { File, Folder } from '../types';\n\nexport default {\n  async deleteMany(ctx: Context) {\n    const { body } = ctx.request;\n    const {\n      state: { userAbility },\n    } = ctx;\n\n    const pmFolder = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: FOLDER_MODEL_UID,\n    });\n\n    const pmFile = strapi.service('admin::permission').createPermissionsManager({\n      ability: userAbility,\n      action: ACTIONS.read,\n      model: FILE_MODEL_UID,\n    });\n\n    await validateDeleteManyFoldersFiles(body);\n\n    const fileService = getService('file');\n    const folderService = getService('folder');\n\n    const deletedFiles = await fileService.deleteByIds(body.fileIds);\n    const {\n      folders: deletedFolders,\n      totalFolderNumber,\n      totalFileNumber,\n    } = await folderService.deleteByIds(body.folderIds);\n\n    if (deletedFiles.length + deletedFolders.length > 1) {\n      strapi.telemetry.send('didBulkDeleteMediaLibraryElements', {\n        eventProperties: {\n          rootFolderNumber: deletedFolders.length,\n          rootAssetNumber: deletedFiles.length,\n          totalFolderNumber,\n          totalAssetNumber: totalFileNumber + deletedFiles.length,\n        },\n      });\n    }\n\n    ctx.body = {\n      data: {\n        files: await pmFile.sanitizeOutput(deletedFiles),\n        folders: await pmFolder.sanitizeOutput(deletedFolders),\n      },\n    };\n  },\n  async moveMany(ctx: Context) {\n    const { body } = ctx.request;\n    const {\n      state: { userAbility },\n    } = ctx;\n\n    const pmFolder = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: FOLDER_MODEL_UID,\n    });\n\n    const pmFile = strapi.service('admin::permission').createPermissionsManager({\n      ability: userAbility,\n      action: ACTIONS.read,\n      model: FILE_MODEL_UID,\n    });\n\n    await validateMoveManyFoldersFiles(body);\n    const { folderIds = [], fileIds = [], destinationFolderId } = body;\n\n    let totalFolderNumber = 0;\n    let totalFileNumber = 0;\n\n    const trx = await strapi.db.transaction();\n    try {\n      // fetch folders\n      const existingFolders = await strapi.db\n        .queryBuilder(FOLDER_MODEL_UID)\n        .select(['id', 'pathId', 'path'])\n        .where({ id: { $in: folderIds } })\n        .transacting(trx.get())\n        .forUpdate()\n        .execute<Folder[]>();\n\n      // fetch files\n      const existingFiles = await strapi.db\n        .queryBuilder(FILE_MODEL_UID)\n        .select(['id'])\n        .where({ id: { $in: fileIds } })\n        .transacting(trx.get())\n        .forUpdate()\n        .execute<File[]>();\n\n      // fetch destinationFolder path\n      let destinationFolderPath = '/';\n      if (destinationFolderId !== null) {\n        const destinationFolder = await strapi.db\n          .queryBuilder(FOLDER_MODEL_UID)\n          .select('path')\n          .where({ id: destinationFolderId })\n          .transacting(trx.get())\n          .first()\n          .execute<Folder>();\n        destinationFolderPath = destinationFolder.path;\n      }\n\n      const fileTable = strapi.getModel(FILE_MODEL_UID).collectionName;\n      const folderTable = strapi.getModel(FOLDER_MODEL_UID).collectionName;\n      const folderPathColName =\n        // @ts-expect-error - no dynamic typings for the models\n        strapi.db.metadata.get(FILE_MODEL_UID).attributes.folderPath.columnName;\n      // @ts-expect-error - no dynamic typings for the models\n      const pathColName = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.path.columnName;\n\n      if (existingFolders.length > 0) {\n        // update folders' parent relation\n        // @ts-expect-error - no dynamic typings for the models\n        const { joinTable } = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.parent;\n        await strapi.db\n          .queryBuilder(joinTable.name)\n          .transacting(trx.get())\n          .delete()\n          .where({ [joinTable.joinColumn.name]: { $in: folderIds } })\n          .execute();\n\n        if (destinationFolderId !== null) {\n          await strapi.db\n            .queryBuilder(joinTable.name)\n            .transacting(trx.get())\n            .insert(\n              existingFolders.map((folder) => ({\n                [joinTable.inverseJoinColumn.name]: destinationFolderId,\n                [joinTable.joinColumn.name]: folder.id,\n              }))\n            )\n            .execute();\n        }\n\n        for (const existingFolder of existingFolders) {\n          let replaceQuery;\n          switch (strapi.db.dialect.client) {\n            case 'sqlite':\n              replaceQuery = '? || SUBSTRING(??, ?)';\n              break;\n            case 'postgres':\n              replaceQuery = 'CONCAT(?::TEXT, SUBSTRING(??, ?::INTEGER))';\n              break;\n            default:\n              replaceQuery = 'CONCAT(?, SUBSTRING(??, ?))';\n          }\n\n          // update path for folders themselves & folders below\n          totalFolderNumber = await strapi.db\n            .getConnection(folderTable)\n            .transacting(trx.get())\n            .where(pathColName, existingFolder.path)\n            .orWhere(pathColName, 'like', `${existingFolder.path}/%`)\n            .update(\n              pathColName,\n              strapi.db.connection.raw(replaceQuery, [\n                strings.joinBy('/', destinationFolderPath, `${existingFolder.pathId}`),\n                pathColName,\n                existingFolder.path.length + 1,\n              ])\n            );\n\n          // update path of files below\n          totalFileNumber = await strapi.db\n            .getConnection(fileTable)\n            .transacting(trx.get())\n            .where(folderPathColName, existingFolder.path)\n            .orWhere(folderPathColName, 'like', `${existingFolder.path}/%`)\n            .update(\n              folderPathColName,\n              strapi.db.connection.raw(replaceQuery, [\n                strings.joinBy('/', destinationFolderPath, `${existingFolder.pathId}`),\n                folderPathColName,\n                existingFolder.path.length + 1,\n              ])\n            );\n        }\n      }\n\n      if (existingFiles.length > 0) {\n        // update files' folder relation (delete + insert; upsert not possible)\n        // @ts-expect-error - no dynamic typings for the models\n        const fileJoinTable = strapi.db.metadata.get(FILE_MODEL_UID).attributes.folder.joinTable;\n        await strapi.db\n          .queryBuilder(fileJoinTable.name)\n          .transacting(trx.get())\n          .delete()\n          .where({ [fileJoinTable.joinColumn.name]: { $in: fileIds } })\n          .execute();\n\n        if (destinationFolderId !== null) {\n          await strapi.db\n            .queryBuilder(fileJoinTable.name)\n            .transacting(trx.get())\n            .insert(\n              existingFiles.map((file) => ({\n                [fileJoinTable.inverseJoinColumn.name]: destinationFolderId,\n                [fileJoinTable.joinColumn.name]: file.id,\n              }))\n            )\n            .execute();\n        }\n\n        // update files main fields (path + updatedBy)\n        await strapi.db\n          .getConnection(fileTable)\n          .transacting(trx.get())\n          .whereIn('id', fileIds)\n          .update(folderPathColName, destinationFolderPath);\n      }\n\n      await trx.commit();\n    } catch (e) {\n      await trx.rollback();\n      throw e;\n    }\n\n    const updatedFolders = await strapi.db.query(FOLDER_MODEL_UID).findMany({\n      where: { id: { $in: folderIds } },\n    });\n\n    const updatedFiles = await strapi.db.query(FILE_MODEL_UID).findMany({\n      where: { id: { $in: fileIds } },\n    });\n\n    strapi.telemetry.send('didBulkMoveMediaLibraryElements', {\n      eventProperties: {\n        rootFolderNumber: updatedFolders.length,\n        rootAssetNumber: updatedFiles.length,\n        totalFolderNumber,\n        totalAssetNumber: totalFileNumber + updatedFiles.length,\n      },\n    });\n\n    ctx.body = {\n      data: {\n        files: await pmFile.sanitizeOutput(updatedFiles),\n        folders: await pmFolder.sanitizeOutput(updatedFolders),\n      },\n    };\n  },\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nconst settingsSchema = yup.object({\n  sizeOptimization: yup.boolean().required(),\n  responsiveDimensions: yup.boolean().required(),\n  autoOrientation: yup.boolean(),\n});\n\nexport default validateYupSchema(settingsSchema);\n\nexport type Settings = yup.InferType<typeof settingsSchema>;\n","import type { Context } from 'koa';\n\nimport { getService } from '../utils';\nimport { ACTIONS, FILE_MODEL_UID } from '../constants';\nimport validateSettings from './validation/admin/settings';\n\nexport default {\n  async updateSettings(ctx: Context) {\n    const {\n      request: { body },\n      state: { userAbility },\n    } = ctx;\n\n    if (userAbility.cannot(ACTIONS.readSettings, FILE_MODEL_UID)) {\n      return ctx.forbidden();\n    }\n\n    const data = await validateSettings(body);\n\n    await getService('upload').setSettings(data);\n\n    ctx.body = { data };\n  },\n\n  async getSettings(ctx: Context) {\n    const {\n      state: { userAbility },\n    } = ctx;\n\n    if (userAbility.cannot(ACTIONS.readSettings, FILE_MODEL_UID)) {\n      return ctx.forbidden();\n    }\n\n    const data = await getService('upload').getSettings();\n\n    ctx.body = { data };\n  },\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\nimport { isNil } from 'lodash/fp';\nimport { getService } from '../../../utils';\n\nconst fileInfoSchema = yup.object({\n  name: yup.string().nullable(),\n  alternativeText: yup.string().nullable(),\n  caption: yup.string().nullable(),\n  folder: yup\n    .strapiID()\n    .nullable()\n    .test('folder-exists', 'the folder does not exist', async (folderId) => {\n      if (isNil(folderId)) {\n        return true;\n      }\n\n      const exists = await getService('folder').exists({ id: folderId });\n\n      return exists;\n    }),\n});\n\nconst uploadSchema = yup.object({\n  fileInfo: fileInfoSchema,\n});\n\nconst multiUploadSchema = yup.object({\n  fileInfo: yup.array().of(fileInfoSchema),\n});\n\nconst validateUploadBody = (data = {}, isMulti = false) => {\n  const schema = isMulti ? multiUploadSchema : uploadSchema;\n\n  return validateYupSchema(schema, { strict: false })(data);\n};\n\nexport { validateUploadBody };\n\nexport type UploadBody =\n  | yup.InferType<typeof uploadSchema>\n  | yup.InferType<typeof multiUploadSchema>;\n","import _ from 'lodash';\nimport { errors, async } from '@strapi/utils';\n\nimport type { Context } from 'koa';\n\nimport { getService } from '../utils';\nimport { ACTIONS, FILE_MODEL_UID } from '../constants';\nimport { validateUploadBody } from './validation/admin/upload';\nimport { findEntityAndCheckPermissions } from './utils/find-entity-and-check-permissions';\nimport { FileInfo } from '../types';\n\nexport default {\n  async updateFileInfo(ctx: Context) {\n    const {\n      state: { userAbility, user },\n      query: { id },\n      request: { body },\n    } = ctx;\n\n    if (typeof id !== 'string') {\n      throw new errors.ValidationError('File id is required');\n    }\n\n    const uploadService = getService('upload');\n    const { pm } = await findEntityAndCheckPermissions(\n      userAbility,\n      ACTIONS.update,\n      FILE_MODEL_UID,\n      id\n    );\n\n    const data = await validateUploadBody(body);\n\n    const file = await uploadService.updateFileInfo(id, data.fileInfo as any, { user });\n\n    ctx.body = await pm.sanitizeOutput(file, { action: ACTIONS.read });\n  },\n\n  async replaceFile(ctx: Context) {\n    const {\n      state: { userAbility, user },\n      query: { id },\n      request: { body, files: { files } = {} },\n    } = ctx;\n\n    if (typeof id !== 'string') {\n      throw new errors.ValidationError('File id is required');\n    }\n\n    const uploadService = getService('upload');\n    const { pm } = await findEntityAndCheckPermissions(\n      userAbility,\n      ACTIONS.update,\n      FILE_MODEL_UID,\n      id\n    );\n\n    if (Array.isArray(files)) {\n      throw new errors.ApplicationError('Cannot replace a file with multiple ones');\n    }\n\n    const data = (await validateUploadBody(body)) as { fileInfo: FileInfo };\n    const replacedFile = await uploadService.replace(id, { data, file: files }, { user });\n\n    // Sign file urls for private providers\n    const signedFile = await getService('file').signFileUrls(replacedFile);\n\n    ctx.body = await pm.sanitizeOutput(signedFile, { action: ACTIONS.read });\n  },\n\n  async uploadFiles(ctx: Context) {\n    const {\n      state: { userAbility, user },\n      request: { body, files: { files } = {} },\n    } = ctx;\n\n    const uploadService = getService('upload');\n    const pm = strapi.service('admin::permission').createPermissionsManager({\n      ability: userAbility,\n      action: ACTIONS.create,\n      model: FILE_MODEL_UID,\n    });\n\n    if (!pm.isAllowed) {\n      return ctx.forbidden();\n    }\n\n    const data = await validateUploadBody(body);\n    const uploadedFiles = await uploadService.upload({ data, files }, { user });\n\n    // Sign file urls for private providers\n    const signedFiles = await async.map(uploadedFiles, getService('file').signFileUrls);\n\n    ctx.body = await pm.sanitizeOutput(signedFiles, { action: ACTIONS.read });\n    ctx.status = 201;\n  },\n\n  // TODO: split into multiple endpoints\n  async upload(ctx: Context) {\n    const {\n      query: { id },\n      request: { files: { files } = {} },\n    } = ctx;\n\n    if (_.isEmpty(files) || (!Array.isArray(files) && files.size === 0)) {\n      if (id) {\n        return this.updateFileInfo(ctx);\n      }\n\n      throw new errors.ApplicationError('Files are empty');\n    }\n\n    await (id ? this.replaceFile : this.uploadFiles)(ctx);\n  },\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nconst fileInfoSchema = yup\n  .object({\n    name: yup.string().nullable(),\n    alternativeText: yup.string().nullable(),\n    caption: yup.string().nullable(),\n  })\n  .noUnknown();\n\nconst uploadSchema = yup.object({\n  fileInfo: fileInfoSchema,\n});\n\nconst multiUploadSchema = yup.object({\n  fileInfo: yup.array().of(fileInfoSchema),\n});\n\nconst validateUploadBody = (data = {}, isMulti = false) => {\n  const schema = isMulti ? multiUploadSchema : uploadSchema;\n\n  return validateYupSchema(schema, { strict: false })(data);\n};\n\nexport { validateUploadBody };\n\nexport type UploadBody =\n  | yup.InferType<typeof uploadSchema>\n  | yup.InferType<typeof multiUploadSchema>;\n","import _ from 'lodash';\nimport utils from '@strapi/utils';\n\nimport type { Context } from 'koa';\nimport type { Core } from '@strapi/types';\n\nimport { getService } from '../utils';\nimport { FILE_MODEL_UID } from '../constants';\nimport { validateUploadBody } from './validation/content-api/upload';\nimport { FileInfo } from '../types';\n\nconst { ValidationError } = utils.errors;\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const sanitizeOutput = async (data: unknown | unknown[], ctx: Context) => {\n    const schema = strapi.getModel(FILE_MODEL_UID);\n    const { auth } = ctx.state;\n\n    return strapi.contentAPI.sanitize.output(data, schema, { auth });\n  };\n\n  const validateQuery = async (data: Record<string, unknown>, ctx: Context) => {\n    const schema = strapi.getModel(FILE_MODEL_UID);\n    const { auth } = ctx.state;\n\n    return strapi.contentAPI.validate.query(data, schema, { auth });\n  };\n\n  const sanitizeQuery = async (data: Record<string, unknown>, ctx: Context) => {\n    const schema = strapi.getModel(FILE_MODEL_UID);\n    const { auth } = ctx.state;\n\n    return strapi.contentAPI.sanitize.query(data, schema, { auth });\n  };\n\n  return {\n    async find(ctx: Context) {\n      await validateQuery(ctx.query, ctx);\n      const sanitizedQuery = await sanitizeQuery(ctx.query, ctx);\n\n      const files = await getService('upload').findMany(sanitizedQuery);\n\n      ctx.body = await sanitizeOutput(files, ctx);\n    },\n\n    async findOne(ctx: Context) {\n      const {\n        params: { id },\n      } = ctx;\n\n      await validateQuery(ctx.query, ctx);\n      const sanitizedQuery = await sanitizeQuery(ctx.query, ctx);\n\n      const file = await getService('upload').findOne(id, sanitizedQuery.populate!);\n\n      if (!file) {\n        return ctx.notFound('file.notFound');\n      }\n\n      ctx.body = await sanitizeOutput(file, ctx);\n    },\n\n    async destroy(ctx: Context) {\n      const {\n        params: { id },\n      } = ctx;\n\n      const file = await getService('upload').findOne(id);\n\n      if (!file) {\n        return ctx.notFound('file.notFound');\n      }\n\n      await getService('upload').remove(file);\n\n      ctx.body = await sanitizeOutput(file, ctx);\n    },\n\n    async updateFileInfo(ctx: Context) {\n      const {\n        query: { id },\n        request: { body },\n      } = ctx;\n      const data = await validateUploadBody(body);\n\n      if (!id || (typeof id !== 'string' && typeof id !== 'number')) {\n        throw new ValidationError('File id is required and must be a single value');\n      }\n\n      const result = await getService('upload').updateFileInfo(id, data.fileInfo as any);\n\n      ctx.body = await sanitizeOutput(result, ctx);\n    },\n\n    async replaceFile(ctx: Context) {\n      const {\n        query: { id },\n        request: { body, files: { files } = {} },\n      } = ctx;\n\n      // cannot replace with more than one file\n      if (Array.isArray(files)) {\n        throw new ValidationError('Cannot replace a file with multiple ones');\n      }\n\n      if (!id || (typeof id !== 'string' && typeof id !== 'number')) {\n        throw new ValidationError('File id is required and must be a single value');\n      }\n\n      const data = (await validateUploadBody(body)) as { fileInfo: FileInfo };\n\n      const replacedFiles = await getService('upload').replace(id, { data, file: files });\n\n      ctx.body = await sanitizeOutput(replacedFiles, ctx);\n    },\n\n    async uploadFiles(ctx: Context) {\n      const {\n        request: { body, files: { files } = {} },\n      } = ctx;\n\n      const data: any = await validateUploadBody(body, Array.isArray(files));\n\n      const apiUploadFolderService = getService('api-upload-folder');\n\n      const apiUploadFolder = await apiUploadFolderService.getAPIUploadFolder();\n\n      if (Array.isArray(files)) {\n        data.fileInfo = data.fileInfo || [];\n        data.fileInfo = files.map((_f, i) => ({ ...data.fileInfo[i], folder: apiUploadFolder.id }));\n      } else {\n        data.fileInfo = { ...data.fileInfo, folder: apiUploadFolder.id };\n      }\n\n      const uploadedFiles = await getService('upload').upload({\n        data,\n        files,\n      });\n\n      ctx.body = await sanitizeOutput(uploadedFiles as any, ctx);\n      ctx.status = 201;\n    },\n\n    // TODO: split into multiple endpoints\n    async upload(ctx: Context) {\n      const {\n        query: { id },\n        request: { files: { files } = {} },\n      } = ctx;\n\n      if (_.isEmpty(files) || (!Array.isArray(files) && files.size === 0)) {\n        if (id) {\n          return this.updateFileInfo(ctx);\n        }\n\n        throw new ValidationError('Files are empty');\n      }\n\n      await (id ? this.replaceFile : this.uploadFiles)(ctx);\n    },\n  };\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\nimport { ALLOWED_SORT_STRINGS } from '../../../constants';\n\nconst configSchema = yup.object({\n  pageSize: yup.number().required(),\n  sort: yup.mixed().oneOf(ALLOWED_SORT_STRINGS),\n});\n\nexport const validateViewConfiguration = validateYupSchema(configSchema);\n\nexport type ViewConfiguration = yup.InferType<typeof configSchema>;\n","import type { Context } from 'koa';\n\nimport { getService } from '../utils';\nimport { ACTIONS } from '../constants';\nimport { validateViewConfiguration } from './validation/admin/configureView';\n\nexport default {\n  async updateViewConfiguration(ctx: Context) {\n    const {\n      request: { body },\n      state: { userAbility },\n    } = ctx;\n\n    if (userAbility.cannot(ACTIONS.configureView)) {\n      return ctx.forbidden();\n    }\n\n    const data = await validateViewConfiguration(body);\n\n    await getService('upload').setConfiguration(data);\n\n    ctx.body = { data };\n  },\n\n  async findViewConfiguration(ctx: Context) {\n    const data = await getService('upload').getConfiguration();\n\n    ctx.body = { data };\n  },\n};\n","import adminFile from './admin-file';\nimport adminFolder from './admin-folder';\nimport adminFolderFile from './admin-folder-file';\nimport adminSettings from './admin-settings';\nimport adminUpload from './admin-upload';\nimport contentApi from './content-api';\nimport viewConfiguration from './view-configuration';\n\nexport const controllers = {\n  'admin-file': adminFile,\n  'admin-folder': adminFolder,\n  'admin-folder-file': adminFolderFile,\n  'admin-settings': adminSettings,\n  'admin-upload': adminUpload,\n  'content-api': contentApi,\n  'view-configuration': viewConfiguration,\n};\n","import type {} from 'koa-body';\nimport type {} from '@strapi/types';\n\nimport { register } from './register';\nimport { bootstrap } from './bootstrap';\nimport { contentTypes } from './content-types';\nimport { services } from './services';\nimport { routes } from './routes';\nimport { config } from './config';\nimport { controllers } from './controllers';\n\nexport default () => ({\n  register,\n  bootstrap,\n  config,\n  routes,\n  controllers,\n  contentTypes,\n  services,\n});\n"],"names":["strapi","file","config","provider","key","folder","fileUtils","contentTypesUtils","bytesToKbytes","optimize","isImage","isFaultyImage","isOptimizableImage","upload","fileInfo","getDimensions","generateThumbnail","generateResponsiveFormats","isResizableImage","add","update","path","deleteByIds","map","metrics","exists","index","signFileUrls","routes","admin","contentApi","viewConfiguration","getStructure","fileInfoSchema","uploadSchema","multiUploadSchema","validateUploadBody","apiUploadFolder"],"mappings":"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"}
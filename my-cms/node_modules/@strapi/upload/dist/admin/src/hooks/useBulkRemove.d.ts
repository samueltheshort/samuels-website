import { BulkDeleteFiles, File } from '../../../shared/contracts/files';
import type { BulkDeleteFolders, FolderDefinition } from '../../../shared/contracts/folders';
export interface FileWithType extends File {
    type: string;
}
export declare const useBulkRemove: () => {
    remove: (variables: (FolderDefinition | FileWithType)[], options?: import("react-query").MutateOptions<BulkDeleteFiles.Response | BulkDeleteFolders.Response, import("@strapi/utils/dist/errors").ApplicationError<"ApplicationError", string, unknown> | import("@strapi/utils/dist/errors").ValidationError<string, unknown> | undefined, (FolderDefinition | FileWithType)[], unknown> | undefined) => Promise<BulkDeleteFiles.Response | BulkDeleteFolders.Response>;
    data: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isLoading: false;
    isSuccess: false;
    status: "idle";
    mutate: import("react-query").UseMutateFunction<BulkDeleteFiles.Response | BulkDeleteFolders.Response, import("@strapi/utils/dist/errors").ApplicationError<"ApplicationError", string, unknown> | import("@strapi/utils/dist/errors").ValidationError<string, unknown> | undefined, (FolderDefinition | FileWithType)[], unknown>;
    reset: () => void;
    context: unknown;
    failureCount: number;
    isPaused: boolean;
    variables: (FolderDefinition | FileWithType)[] | undefined;
    mutateAsync: import("react-query").UseMutateAsyncFunction<BulkDeleteFiles.Response | BulkDeleteFolders.Response, import("@strapi/utils/dist/errors").ApplicationError<"ApplicationError", string, unknown> | import("@strapi/utils/dist/errors").ValidationError<string, unknown> | undefined, (FolderDefinition | FileWithType)[], unknown>;
} | {
    remove: (variables: (FolderDefinition | FileWithType)[], options?: import("react-query").MutateOptions<BulkDeleteFiles.Response | BulkDeleteFolders.Response, import("@strapi/utils/dist/errors").ApplicationError<"ApplicationError", string, unknown> | import("@strapi/utils/dist/errors").ValidationError<string, unknown> | undefined, (FolderDefinition | FileWithType)[], unknown> | undefined) => Promise<BulkDeleteFiles.Response | BulkDeleteFolders.Response>;
    data: undefined;
    error: null;
    isError: false;
    isIdle: false;
    isLoading: true;
    isSuccess: false;
    status: "loading";
    mutate: import("react-query").UseMutateFunction<BulkDeleteFiles.Response | BulkDeleteFolders.Response, import("@strapi/utils/dist/errors").ApplicationError<"ApplicationError", string, unknown> | import("@strapi/utils/dist/errors").ValidationError<string, unknown> | undefined, (FolderDefinition | FileWithType)[], unknown>;
    reset: () => void;
    context: unknown;
    failureCount: number;
    isPaused: boolean;
    variables: (FolderDefinition | FileWithType)[] | undefined;
    mutateAsync: import("react-query").UseMutateAsyncFunction<BulkDeleteFiles.Response | BulkDeleteFolders.Response, import("@strapi/utils/dist/errors").ApplicationError<"ApplicationError", string, unknown> | import("@strapi/utils/dist/errors").ValidationError<string, unknown> | undefined, (FolderDefinition | FileWithType)[], unknown>;
} | {
    remove: (variables: (FolderDefinition | FileWithType)[], options?: import("react-query").MutateOptions<BulkDeleteFiles.Response | BulkDeleteFolders.Response, import("@strapi/utils/dist/errors").ApplicationError<"ApplicationError", string, unknown> | import("@strapi/utils/dist/errors").ValidationError<string, unknown> | undefined, (FolderDefinition | FileWithType)[], unknown> | undefined) => Promise<BulkDeleteFiles.Response | BulkDeleteFolders.Response>;
    data: undefined;
    error: import("@strapi/utils/dist/errors").ApplicationError<"ApplicationError", string, unknown> | import("@strapi/utils/dist/errors").ValidationError<string, unknown> | undefined;
    isError: true;
    isIdle: false;
    isLoading: false;
    isSuccess: false;
    status: "error";
    mutate: import("react-query").UseMutateFunction<BulkDeleteFiles.Response | BulkDeleteFolders.Response, import("@strapi/utils/dist/errors").ApplicationError<"ApplicationError", string, unknown> | import("@strapi/utils/dist/errors").ValidationError<string, unknown> | undefined, (FolderDefinition | FileWithType)[], unknown>;
    reset: () => void;
    context: unknown;
    failureCount: number;
    isPaused: boolean;
    variables: (FolderDefinition | FileWithType)[] | undefined;
    mutateAsync: import("react-query").UseMutateAsyncFunction<BulkDeleteFiles.Response | BulkDeleteFolders.Response, import("@strapi/utils/dist/errors").ApplicationError<"ApplicationError", string, unknown> | import("@strapi/utils/dist/errors").ValidationError<string, unknown> | undefined, (FolderDefinition | FileWithType)[], unknown>;
} | {
    remove: (variables: (FolderDefinition | FileWithType)[], options?: import("react-query").MutateOptions<BulkDeleteFiles.Response | BulkDeleteFolders.Response, import("@strapi/utils/dist/errors").ApplicationError<"ApplicationError", string, unknown> | import("@strapi/utils/dist/errors").ValidationError<string, unknown> | undefined, (FolderDefinition | FileWithType)[], unknown> | undefined) => Promise<BulkDeleteFiles.Response | BulkDeleteFolders.Response>;
    data: BulkDeleteFiles.Response | BulkDeleteFolders.Response;
    error: null;
    isError: false;
    isIdle: false;
    isLoading: false;
    isSuccess: true;
    status: "success";
    mutate: import("react-query").UseMutateFunction<BulkDeleteFiles.Response | BulkDeleteFolders.Response, import("@strapi/utils/dist/errors").ApplicationError<"ApplicationError", string, unknown> | import("@strapi/utils/dist/errors").ValidationError<string, unknown> | undefined, (FolderDefinition | FileWithType)[], unknown>;
    reset: () => void;
    context: unknown;
    failureCount: number;
    isPaused: boolean;
    variables: (FolderDefinition | FileWithType)[] | undefined;
    mutateAsync: import("react-query").UseMutateAsyncFunction<BulkDeleteFiles.Response | BulkDeleteFolders.Response, import("@strapi/utils/dist/errors").ApplicationError<"ApplicationError", string, unknown> | import("@strapi/utils/dist/errors").ValidationError<string, unknown> | undefined, (FolderDefinition | FileWithType)[], unknown>;
};
